
gripper_meantime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c1c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e08  08007e08  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007e08  08007e08  00017e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e10  08007e10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007e10  08007e10  00017e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007e18  08007e18  00017e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000074  08007e94  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08007e94  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030085  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052f9  00000000  00000000  00050129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  00055428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  00056a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f766  00000000  00000000  00057f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f996  00000000  00000000  0007769e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae839  00000000  00000000  00097034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014586d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006418  00000000  00000000  001458c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007d9c 	.word	0x08007d9c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08007d9c 	.word	0x08007d9c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4618      	mov	r0, r3
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80004f2:	b480      	push	{r7}
 80004f4:	b083      	sub	sp, #12
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <_ZNKSt14_Function_base8_M_emptyEv>:
    {
      if (_M_manager)
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    }

    bool _M_empty() const { return !_M_manager; }
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	2b00      	cmp	r3, #0
 800051c:	bf0c      	ite	eq
 800051e:	2301      	moveq	r3, #1
 8000520:	2300      	movne	r3, #0
 8000522:	b2db      	uxtb	r3, r3
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <_ZN15CommandFromHostC1Ev>:
};

class CommandFromHost{
    public:

    CommandFromHost(){};
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4618      	mov	r0, r3
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <_ZN15CommandFromHostD1Ev>:
    ~CommandFromHost(){
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
    }
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <_ZN9RS485CommC1Ev>:
uint8_t byte[1];
uint8_t rx_buf[32];
extern uint8_t rxComplete;
extern uint8_t txComplete;
extern uint8_t Err;
RS485Comm::RS485Comm(){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2201      	movs	r2, #1
 8000568:	621a      	str	r2, [r3, #32]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3328      	adds	r3, #40	; 0x28
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f9fe 	bl	8000978 <_ZNSt8functionIFv15CommandFromHostEEC1Ev>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	22c8      	movs	r2, #200	; 0xc8
 8000580:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	22c7      	movs	r2, #199	; 0xc7
 8000588:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2200      	movs	r2, #0
 8000590:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2200      	movs	r2, #0
 8000598:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2200      	movs	r2, #0
 80005e0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2200      	movs	r2, #0
 80005f0:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	220a      	movs	r2, #10
 8000608:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	22aa      	movs	r2, #170	; 0xaa
 8000610:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


}
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <_ZN9RS485Comm7ReceiveEv>:
//    HAL_UART_Transmit_DMA(&huart1, txBuffer,size);
//    while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
    while(txComplete==0);
}

void RS485Comm::Receive() {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(rs485_re_GPIO_Port, rs485_re_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062e:	4809      	ldr	r0, [pc, #36]	; (8000654 <_ZN9RS485Comm7ReceiveEv+0x34>)
 8000630:	f004 f98c 	bl	800494c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rs485_de_GPIO_Port, rs485_de_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <_ZN9RS485Comm7ReceiveEv+0x38>)
 800063c:	f004 f986 	bl	800494c <HAL_GPIO_WritePin>
	HAL_UART_Receive_DMA(&huart1,UART1_rxBuffer,9);
 8000640:	2209      	movs	r2, #9
 8000642:	4906      	ldr	r1, [pc, #24]	; (800065c <_ZN9RS485Comm7ReceiveEv+0x3c>)
 8000644:	4806      	ldr	r0, [pc, #24]	; (8000660 <_ZN9RS485Comm7ReceiveEv+0x40>)
 8000646:	f006 fc7a 	bl	8006f3e <HAL_UART_Receive_DMA>
//    while(rxComplete==0);



}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40020000 	.word	0x40020000
 8000658:	40020800 	.word	0x40020800
 800065c:	20000090 	.word	0x20000090
 8000660:	2000038c 	.word	0x2000038c

08000664 <_ZN9RS485Comm8initCommEv>:
void RS485Comm::initComm(){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	   HAL_GPIO_WritePin(rs485_re_GPIO_Port, rs485_re_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <_ZN9RS485Comm8initCommEv+0x34>)
 8000674:	f004 f96a 	bl	800494c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(rs485_de_GPIO_Port, rs485_de_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <_ZN9RS485Comm8initCommEv+0x38>)
 8000680:	f004 f964 	bl	800494c <HAL_GPIO_WritePin>
	    HAL_UART_Receive_DMA (&huart1, UART1_rxBuffer, 8);
 8000684:	2208      	movs	r2, #8
 8000686:	4906      	ldr	r1, [pc, #24]	; (80006a0 <_ZN9RS485Comm8initCommEv+0x3c>)
 8000688:	4806      	ldr	r0, [pc, #24]	; (80006a4 <_ZN9RS485Comm8initCommEv+0x40>)
 800068a:	f006 fc58 	bl	8006f3e <HAL_UART_Receive_DMA>
//	    while(!rxComplete);
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40020000 	.word	0x40020000
 800069c:	40020800 	.word	0x40020800
 80006a0:	20000090 	.word	0x20000090
 80006a4:	2000038c 	.word	0x2000038c

080006a8 <_ZN9RS485Comm10count_onesEPhi>:
        bytes_array[i] = u.temp_array[i];
    }
}


int RS485Comm::count_ones(uint8_t array[], int length) {
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
    int count = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < length; i++) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69ba      	ldr	r2, [r7, #24]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	da1a      	bge.n	80006fa <_ZN9RS485Comm10count_onesEPhi+0x52>
    	uint16_t currentByte = array[i];
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; j++) {
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	2b07      	cmp	r3, #7
 80006d6:	dc0c      	bgt.n	80006f2 <_ZN9RS485Comm10count_onesEPhi+0x4a>
        count += (currentByte & 0x01);
 80006d8:	8afb      	ldrh	r3, [r7, #22]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	69fa      	ldr	r2, [r7, #28]
 80006e0:	4413      	add	r3, r2
 80006e2:	61fb      	str	r3, [r7, #28]
        currentByte >>= 1;
 80006e4:	8afb      	ldrh	r3, [r7, #22]
 80006e6:	085b      	lsrs	r3, r3, #1
 80006e8:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; j++) {
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	3301      	adds	r3, #1
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	e7ef      	b.n	80006d2 <_ZN9RS485Comm10count_onesEPhi+0x2a>
    for (int i = 0; i < length; i++) {
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	3301      	adds	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	e7e0      	b.n	80006bc <_ZN9RS485Comm10count_onesEPhi+0x14>
        }
    }
    return count;
 80006fa:	69fb      	ldr	r3, [r7, #28]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3724      	adds	r7, #36	; 0x24
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <_ZN9RS485Comm12readFromHostEv>:

void RS485Comm::readFromHost() {
 8000708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070a:	b093      	sub	sp, #76	; 0x4c
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	if (UART1_rxBuffer[0]!=170 || UART1_rxBuffer[1]!=170)
 8000710:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <_ZN9RS485Comm12readFromHostEv+0xb8>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2baa      	cmp	r3, #170	; 0xaa
 8000716:	d103      	bne.n	8000720 <_ZN9RS485Comm12readFromHostEv+0x18>
 8000718:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <_ZN9RS485Comm12readFromHostEv+0xb8>)
 800071a:	785b      	ldrb	r3, [r3, #1]
 800071c:	2baa      	cmp	r3, #170	; 0xaa
 800071e:	d003      	beq.n	8000728 <_ZN9RS485Comm12readFromHostEv+0x20>
	{
		Err=1;
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <_ZN9RS485Comm12readFromHostEv+0xbc>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
		return;
 8000726:	e047      	b.n	80007b8 <_ZN9RS485Comm12readFromHostEv+0xb0>
	}
    CommandFromHost new_command;
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff feff 	bl	8000530 <_ZN15CommandFromHostC1Ev>

	uint16_t address = UART1_rxBuffer[2];
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <_ZN9RS485Comm12readFromHostEv+0xb8>)
 8000734:	789b      	ldrb	r3, [r3, #2]
 8000736:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	new_command._endpoint=(eEndpoints)UART1_rxBuffer[3];
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <_ZN9RS485Comm12readFromHostEv+0xb8>)
 800073c:	78db      	ldrb	r3, [r3, #3]
 800073e:	733b      	strb	r3, [r7, #12]

	new_command._command=(eCommands)UART1_rxBuffer[4];
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <_ZN9RS485Comm12readFromHostEv+0xb8>)
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	737b      	strb	r3, [r7, #13]
	new_command._payload_size=(int16_t)UART1_rxBuffer[5];
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <_ZN9RS485Comm12readFromHostEv+0xb8>)
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
	new_command._payload[0]=UART1_rxBuffer[6];
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <_ZN9RS485Comm12readFromHostEv+0xb8>)
 800074e:	799b      	ldrb	r3, [r3, #6]
 8000750:	73bb      	strb	r3, [r7, #14]
	char tail=UART1_rxBuffer[7];
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <_ZN9RS485Comm12readFromHostEv+0xb8>)
 8000754:	79db      	ldrb	r3, [r3, #7]
 8000756:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if ((tail)!=99 || (address)!=device_address)
 800075a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800075e:	2b63      	cmp	r3, #99	; 0x63
 8000760:	d106      	bne.n	8000770 <_ZN9RS485Comm12readFromHostEv+0x68>
 8000762:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800076c:	429a      	cmp	r2, r3
 800076e:	d004      	beq.n	800077a <_ZN9RS485Comm12readFromHostEv+0x72>
    {
    	Err=1;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <_ZN9RS485Comm12readFromHostEv+0xbc>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
        return;
 8000776:	2400      	movs	r4, #0
 8000778:	e018      	b.n	80007ac <_ZN9RS485Comm12readFromHostEv+0xa4>
    }
    _distribute_callback(new_command);   
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8000780:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000784:	f107 050c 	add.w	r5, r7, #12
 8000788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000790:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000798:	4619      	mov	r1, r3
 800079a:	4630      	mov	r0, r6
 800079c:	f000 f8f9 	bl	8000992 <_ZNKSt8functionIFv15CommandFromHostEEclES0_>
 80007a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fece 	bl	8000546 <_ZN15CommandFromHostD1Ev>
 80007aa:	2401      	movs	r4, #1
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fec8 	bl	8000546 <_ZN15CommandFromHostD1Ev>
 80007b6:	2c01      	cmp	r4, #1
    }
 80007b8:	374c      	adds	r7, #76	; 0x4c
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000090 	.word	0x20000090
 80007c4:	20000000 	.word	0x20000000

080007c8 <_ZN9RS485Comm7sendResE14ResponseToHost>:


void RS485Comm:: sendRes(ResponseToHost res)
{    
 80007c8:	b5b0      	push	{r4, r5, r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]


    message_array[0]=packet_header;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    message_array[1]=packet_header;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    message_array[2]=res._endpoint;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    message_array[3]=res._response;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	785a      	ldrb	r2, [r3, #1]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    message_array[4]=res._payload_size;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    memcpy(&(message_array[5]), res._payload, res._payload_size);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	1c99      	adds	r1, r3, #2
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	461a      	mov	r2, r3
 800081e:	f007 f94b 	bl	8007ab8 <memcpy>
   
    checksum = count_ones(message_array, 5+res._payload_size);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	3305      	adds	r3, #5
 800082e:	461a      	mov	r2, r3
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ff39 	bl	80006a8 <_ZN9RS485Comm10count_onesEPhi>
 8000836:	4602      	mov	r2, r0
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    crc_1 = (checksum >>8);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000844:	121b      	asrs	r3, r3, #8
 8000846:	b29a      	uxth	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
    crc_2 = (checksum);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000854:	b29a      	uxth	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

    message_array[5+res._payload_size] = crc_1;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f8b3 208e 	ldrh.w	r2, [r3, #142]	; 0x8e
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	3305      	adds	r3, #5
 8000868:	b2d1      	uxtb	r1, r2
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	460a      	mov	r2, r1
 8000870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    message_array[6+res._payload_size] = crc_2;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	3306      	adds	r3, #6
 8000880:	b2d1      	uxtb	r1, r2
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	460a      	mov	r2, r1
 8000888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    message_array[7+res._payload_size] = tail;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f8b3 2074 	ldrh.w	r2, [r3, #116]	; 0x74
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	3307      	adds	r3, #7
 8000898:	b2d1      	uxtb	r1, r2
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	460a      	mov	r2, r1
 80008a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    uint8_t target = 199;
 80008a4:	23c7      	movs	r3, #199	; 0xc7
 80008a6:	76fb      	strb	r3, [r7, #27]
    size_t len = sizeof(message_array) / sizeof(message_array[0]);
 80008a8:	2332      	movs	r3, #50	; 0x32
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    auto it = std::find(message_array, message_array + len, target);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80008b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ba:	4413      	add	r3, r2
 80008bc:	f107 021b 	add.w	r2, r7, #27
 80008c0:	4619      	mov	r1, r3
 80008c2:	f000 f882 	bl	80009ca <_ZSt4findIPhhET_S1_S1_RKT0_>
 80008c6:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t index = std::distance(message_array, it);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3338      	adds	r3, #56	; 0x38
 80008cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f88f 	bl	80009f2 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80008d4:	4603      	mov	r3, r0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
    std::vector<uint8_t> new_message_array(index + 1);
 80008d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008da:	1c5c      	adds	r4, r3, #1
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 f89a 	bl	8000a1a <_ZNSaIhEC1Ev>
 80008e6:	f107 021c 	add.w	r2, r7, #28
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4621      	mov	r1, r4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f8aa 	bl	8000a4a <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f899 	bl	8000a32 <_ZNSaIhED1Ev>
    std::copy(message_array, message_array + index + 1, new_message_array.begin());
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	3301      	adds	r3, #1
 8000910:	18d5      	adds	r5, r2, r3
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f8cc 	bl	8000ab4 <_ZNSt6vectorIhSaIhEE5beginEv>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	4629      	mov	r1, r5
 8000922:	4620      	mov	r0, r4
 8000924:	f000 f8d6 	bl	8000ad4 <_ZSt4copyIPhN9__gnu_cxx17__normal_iteratorIS0_St6vectorIhSaIhEEEEET0_T_S8_S7_>
    uint8_t *txBuffer = new_message_array.data();
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f8e9 	bl	8000b04 <_ZNSt6vectorIhSaIhEE4dataEv>
 8000932:	6238      	str	r0, [r7, #32]
	HAL_GPIO_WritePin(rs485_re_GPIO_Port, rs485_re_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <_ZN9RS485Comm7sendResE14ResponseToHost+0x1a4>)
 800093c:	f004 f806 	bl	800494c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rs485_de_GPIO_Port, rs485_de_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000946:	480a      	ldr	r0, [pc, #40]	; (8000970 <_ZN9RS485Comm7sendResE14ResponseToHost+0x1a8>)
 8000948:	f004 f800 	bl	800494c <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, txBuffer,sizeof(new_message_array),10);
 800094c:	230a      	movs	r3, #10
 800094e:	220c      	movs	r2, #12
 8000950:	6a39      	ldr	r1, [r7, #32]
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <_ZN9RS485Comm7sendResE14ResponseToHost+0x1ac>)
 8000954:	f006 fa61 	bl	8006e1a <HAL_UART_Transmit>
    std::vector<uint8_t> new_message_array(index + 1);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f88e 	bl	8000a7e <_ZNSt6vectorIhSaIhEED1Ev>
//    while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
//    while(txComplete==0);
}
 8000962:	bf00      	nop
 8000964:	3730      	adds	r7, #48	; 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bdb0      	pop	{r4, r5, r7, pc}
 800096a:	bf00      	nop
 800096c:	40020000 	.word	0x40020000
 8000970:	40020800 	.word	0x40020800
 8000974:	2000038c 	.word	0x2000038c

08000978 <_ZNSt8functionIFv15CommandFromHostEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fdb5 	bl	80004f2 <_ZNSt14_Function_baseC1Ev>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <_ZNKSt8functionIFv15CommandFromHostEEclES0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8000992:	b5b0      	push	{r4, r5, r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fdb5 	bl	800050e <_ZNKSt14_Function_base8_M_emptyEv>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <_ZNKSt8functionIFv15CommandFromHostEEclES0_+0x1c>
	__throw_bad_function_call();
 80009aa:	f007 f836 	bl	8007a1a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68dc      	ldr	r4, [r3, #12]
 80009b2:	687d      	ldr	r5, [r7, #4]
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f000 f8b4 	bl	8000b22 <_ZSt7forwardI15CommandFromHostEOT_RNSt16remove_referenceIS1_E4typeE>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4619      	mov	r1, r3
 80009be:	4628      	mov	r0, r5
 80009c0:	47a0      	blx	r4
 80009c2:	bf00      	nop
    }
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bdb0      	pop	{r4, r5, r7, pc}

080009ca <_ZSt4findIPhhET_S1_S1_RKT0_>:
   *  such that @c *i == @p __val, or @p __last if no such iterator exists.
  */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
		typename iterator_traits<_InputIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);
      return std::__find_if(__first, __last,
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 f8ae 	bl	8000b38 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKhEENS0_16_Iter_equals_valIT_EERS4_>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f000 f8b7 	bl	8000b56 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_>
 80009e8:	4603      	mov	r3, r0
			    __gnu_cxx::__ops::__iter_equals_val(__val));
    }
 80009ea:	4618      	mov	r0, r3
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_ZSt8distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80009f2:	b5b0      	push	{r4, r5, r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80009fc:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 f8bf 	bl	8000b84 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8000a06:	462a      	mov	r2, r5
 8000a08:	6839      	ldr	r1, [r7, #0]
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	f000 f8c5 	bl	8000b9a <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8000a10:	4603      	mov	r3, r0
    }
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bdb0      	pop	{r4, r5, r7, pc}

08000a1a <_ZNSaIhEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 f8c8 	bl	8000bb8 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 f8c7 	bl	8000bce <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZNSt6vectorIhSaIhEEC1EjRKS0_>:
       *
       *  This constructor fills the %vector with @a __n default
       *  constructed elements.
       */
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8000a4a:	b590      	push	{r4, r7, lr}
 8000a4c:	b085      	sub	sp, #20
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8000a56:	68fc      	ldr	r4, [r7, #12]
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	68b8      	ldr	r0, [r7, #8]
 8000a5c:	f000 f8c2 	bl	8000be4 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>
 8000a60:	4603      	mov	r3, r0
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	4619      	mov	r1, r3
 8000a66:	4620      	mov	r0, r4
 8000a68:	f000 f8f0 	bl	8000c4c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
      { _M_default_initialize(__n); }
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f000 f918 	bl	8000ca4 <_ZNSt6vectorIhSaIhEE21_M_default_initializeEj>
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd90      	pop	{r4, r7, pc}

08000a7e <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000a7e:	b5b0      	push	{r4, r5, r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681c      	ldr	r4, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f91f 	bl	8000cd4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000a96:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4629      	mov	r1, r5
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	f000 f924 	bl	8000cea <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f8e5 	bl	8000c74 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bdb0      	pop	{r4, r5, r7, pc}

08000ab4 <_ZNSt6vectorIhSaIhEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f91e 	bl	8000d06 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_ZSt4copyIPhN9__gnu_cxx17__normal_iteratorIS0_St6vectorIhSaIhEEEEET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f000 f920 	bl	8000d26 <_ZSt12__miter_baseIPhET_S1_>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	68b8      	ldr	r0, [r7, #8]
 8000aea:	f000 f91c 	bl	8000d26 <_ZSt12__miter_baseIPhET_S1_>
 8000aee:	4603      	mov	r3, r0
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4619      	mov	r1, r3
 8000af4:	4620      	mov	r0, r4
 8000af6:	f000 f921 	bl	8000d3c <_ZSt13__copy_move_aILb0EPhN9__gnu_cxx17__normal_iteratorIS0_St6vectorIhSaIhEEEEET1_T0_S8_S7_>
 8000afa:	4603      	mov	r3, r0
    }
 8000afc:	4618      	mov	r0, r3
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd90      	pop	{r4, r7, pc}

08000b04 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f933 	bl	8000d7e <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_ZSt7forwardI15CommandFromHostEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKhEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f925 	bl	8000d96 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKhEC1ERS2_>
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 8000b56:	b5b0      	push	{r4, r5, r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
 8000b62:	68fc      	ldr	r4, [r7, #12]
		       std::__iterator_category(__first));
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f80b 	bl	8000b84 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return __find_if(__first, __last, __pred,
 8000b6e:	462b      	mov	r3, r5
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	68b9      	ldr	r1, [r7, #8]
 8000b74:	4620      	mov	r0, r4
 8000b76:	f000 f91d 	bl	8000db4 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag>
 8000b7a:	4603      	mov	r3, r0
    }
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bdb0      	pop	{r4, r5, r7, pc}

08000b84 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000b8c:	bf00      	nop
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_ZSt10__distanceIPhENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8000b9a:	b480      	push	{r7}
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	1ad3      	subs	r3, r2, r3
    }
 8000bac:	4618      	mov	r0, r3
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	6839      	ldr	r1, [r7, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f976 	bl	8000ee6 <_ZNSaIhEC1ERKS_>
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f957 	bl	8000eb2 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8000c04:	4602      	mov	r2, r0
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	bf8c      	ite	hi
 8000c0c:	2301      	movhi	r3, #1
 8000c0e:	2300      	movls	r3, #0
 8000c10:	b2dc      	uxtb	r4, r3
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff0b 	bl	8000a32 <_ZNSaIhED1Ev>
 8000c1c:	2c00      	cmp	r4, #0
 8000c1e:	d002      	beq.n	8000c26 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x4c>)
 8000c22:	f006 fef7 	bl	8007a14 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8000c26:	687b      	ldr	r3, [r7, #4]
      }
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	08007db4 	.word	0x08007db4

08000c34 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff fef8 	bl	8000a32 <_ZNSaIhED1Ev>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f950 	bl	8000f02 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f000 f95e 	bl	8000f26 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 f964 	bl	8000f5a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ffcd 	bl	8000c34 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_ZNSt6vectorIhSaIhEE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f80d 	bl	8000cd4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000cba:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	6839      	ldr	r1, [r7, #0]
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f000 f95d 	bl	8000f80 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 8000cc6:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	605a      	str	r2, [r3, #4]
      }
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}

08000cd4 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f000 f950 	bl	8000f9e <_ZSt8_DestroyIPhEvT_S1_>
    }
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_ZSt13__copy_move_aILb0EPhN9__gnu_cxx17__normal_iteratorIS0_St6vectorIhSaIhEEEEET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f000 f935 	bl	8000fb8 <_ZSt12__niter_baseIPhET_S1_>
 8000d4e:	4604      	mov	r4, r0
 8000d50:	68b8      	ldr	r0, [r7, #8]
 8000d52:	f000 f931 	bl	8000fb8 <_ZSt12__niter_baseIPhET_S1_>
 8000d56:	4605      	mov	r5, r0
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f938 	bl	8000fce <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4629      	mov	r1, r5
 8000d64:	4620      	mov	r0, r4
 8000d66:	f000 f940 	bl	8000fea <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f94b 	bl	800100a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>
 8000d74:	4603      	mov	r3, r0
    }
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bdb0      	pop	{r4, r5, r7, pc}

08000d7e <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKhEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	601a      	str	r2, [r3, #0]
      { }
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	109b      	asrs	r3, r3, #2
 8000dca:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	dd37      	ble.n	8000e42 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0x8e>
	  if (__pred(__first))
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	68f9      	ldr	r1, [r7, #12]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f92c 	bl	8001034 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKhEclIPhEEbT_>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0x32>
	    return __first;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	e061      	b.n	8000eaa <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3301      	adds	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	68f9      	ldr	r1, [r7, #12]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f91f 	bl	8001034 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKhEclIPhEEbT_>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0x4c>
	    return __first;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	e054      	b.n	8000eaa <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3301      	adds	r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	68f9      	ldr	r1, [r7, #12]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f912 	bl	8001034 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKhEclIPhEEbT_>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0x66>
	    return __first;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	e047      	b.n	8000eaa <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	68f9      	ldr	r1, [r7, #12]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f905 	bl	8001034 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKhEclIPhEEbT_>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0x80>
	    return __first;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	e03a      	b.n	8000eaa <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3301      	adds	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e7c4      	b.n	8000dcc <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0x18>
      switch (__last - __first)
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d006      	beq.n	8000e5a <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xa6>
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	dc2b      	bgt.n	8000ea8 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xf4>
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d01c      	beq.n	8000e8e <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xda>
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d00d      	beq.n	8000e74 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xc0>
 8000e58:	e026      	b.n	8000ea8 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	68f9      	ldr	r1, [r7, #12]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f8e8 	bl	8001034 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKhEclIPhEEbT_>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	e01d      	b.n	8000eaa <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3301      	adds	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	68f9      	ldr	r1, [r7, #12]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 f8db 	bl	8001034 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKhEclIPhEEbT_>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	e010      	b.n	8000eaa <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	68f9      	ldr	r1, [r7, #12]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f8ce 	bl	8001034 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKhEclIPhEEbT_>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	e003      	b.n	8000eaa <_ZSt9__find_ifIPhN9__gnu_cxx5__ops16_Iter_equals_valIKhEEET_S6_S6_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
	  return __last;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
    }
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8000eba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000ebe:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f000 f8cc 	bl	800105e <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8000eca:	f107 0208 	add.w	r2, r7, #8
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f8ce 	bl	8001076 <_ZSt3minIjERKT_S2_S2_>
 8000eda:	4603      	mov	r3, r0
 8000edc:	681b      	ldr	r3, [r3, #0]
      }
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8000ef0:	6839      	ldr	r1, [r7, #0]
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f8d3 	bl	800109e <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffe9 	bl	8000ee6 <_ZNSaIhEC1ERKS_>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f8cd 	bl	80010b6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000f30:	6839      	ldr	r1, [r7, #0]
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 f8d3 	bl	80010de <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	441a      	add	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	609a      	str	r2, [r3, #8]
      }
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
	if (__p)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d005      	beq.n	8000f78 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f8c7 	bl	8001106 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f000 f8c8 	bl	8001124 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000fa8:	6839      	ldr	r1, [r7, #0]
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f8ca 	bl	8001144 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f8be 	bl	800115a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 f8b8 	bl	8001170 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8001000:	4603      	mov	r3, r0
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ffda 	bl	8000fce <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800101a:	4602      	mov	r2, r0
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	1a9a      	subs	r2, r3, r2
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f8b3 	bl	8001190 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 800102a:	4603      	mov	r3, r0
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKhEclIPhEEbT_>:
	operator()(_Iterator __it)
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	bf0c      	ite	eq
 800104c:	2301      	moveq	r3, #1
 800104e:	2300      	movne	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f8a9 	bl	80011be <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 800106c:	4603      	mov	r3, r0
      }
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d201      	bcs.n	8001090 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	e000      	b.n	8001092 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001090:	687b      	ldr	r3, [r7, #4]
    }
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
	{ }
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6839      	ldr	r1, [r7, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f86f 	bl	80011d6 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 80010f8:	4603      	mov	r3, r0
 80010fa:	e000      	b.n	80010fe <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 80010fc:	2300      	movs	r3, #0
      }
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 f86c 	bl	80011f4 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800112e:	2301      	movs	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f86b 	bl	8001210 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 800113a:	4603      	mov	r3, r0
    }
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	68b9      	ldr	r1, [r7, #8]
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f000 f858 	bl	8001236 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001186:	4603      	mov	r3, r0
    }
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	f107 020c 	add.w	r2, r7, #12
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fda9 	bl	8000d06 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
			 );
      }

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f84f 	bl	800126a <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80011e0:	2200      	movs	r2, #0
 80011e2:	6839      	ldr	r1, [r7, #0]
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f84c 	bl	8001282 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	f006 fbf0 	bl	80079e8 <_ZdlPvj>
      }
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	f107 030f 	add.w	r3, r7, #15
 8001222:	461a      	mov	r2, r3
 8001224:	6839      	ldr	r1, [r7, #0]
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f847 	bl	80012ba <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 800122c:	4603      	mov	r3, r0
	}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	461a      	mov	r2, r3
 8001254:	68f9      	ldr	r1, [r7, #12]
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f006 fc3c 	bl	8007ad4 <memmove>
	  return __result + _Num;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4413      	add	r3, r2
	}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001272:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f7ff ffeb 	bl	800126a <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	4293      	cmp	r3, r2
 800129a:	bf8c      	ite	hi
 800129c:	2301      	movhi	r3, #1
 800129e:	2300      	movls	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80012a6:	f006 fbb2 	bl	8007a0e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f006 fb9e 	bl	80079ec <_Znwj>
 80012b0:	4603      	mov	r3, r0
      }
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80012ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012bc:	b085      	sub	sp, #20
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80012c6:	68fc      	ldr	r4, [r7, #12]
 80012c8:	68b8      	ldr	r0, [r7, #8]
 80012ca:	f7ff f907 	bl	80004dc <_ZSt17__size_to_integerj>
 80012ce:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fc55 	bl	8000b84 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80012da:	4633      	mov	r3, r6
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4629      	mov	r1, r5
 80012e0:	4620      	mov	r0, r4
 80012e2:	f000 f805 	bl	80012f0 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 80012e6:	4603      	mov	r3, r0
    }
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012f0 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	e00a      	b.n	800131e <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	4413      	add	r3, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4619      	mov	r1, r3
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 f807 	bl	8001326 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4413      	add	r3, r2
    }
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 f804 	bl	8001344 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4619      	mov	r1, r3
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f006 fbcc 	bl	8007b08 <memset>
    }
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_ZN14ResponseToHostC1Ev>:
};

class ResponseToHost{
   public:

   ResponseToHost(){};
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_ZN14ResponseToHostD1Ev>:
    ~ResponseToHost(){
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
    }
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_ZN7GripperC1Ev>:
extern uint32_t ADC_RawReading[5];
extern float output_pwm;
//extern MLX90393 MagneticSensor_right;
//extern MLX90393 MagneticSensor_left;

Gripper::Gripper() {
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
//	hw.init_gripper();

}
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <_ZN7Gripper11initGripperEv>:
void Gripper::initGripper(){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  Kp =0.15;//faster gripper 0.04
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a20      	ldr	r2, [pc, #128]	; (8001448 <_ZN7Gripper11initGripperEv+0x8c>)
 80013c8:	611a      	str	r2, [r3, #16]
  Ki =0.001;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a1f      	ldr	r2, [pc, #124]	; (800144c <_ZN7Gripper11initGripperEv+0x90>)
 80013ce:	615a      	str	r2, [r3, #20]
  Kd =0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  lastError=0;         // previous error value
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
  integral=0;         // integral of error over time
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	635a      	str	r2, [r3, #52]	; 0x34
  derivative=0;        // derivative of error over time
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	639a      	str	r2, [r3, #56]	; 0x38
  dir=-1;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a17      	ldr	r2, [pc, #92]	; (8001450 <_ZN7Gripper11initGripperEv+0x94>)
 80013f4:	63da      	str	r2, [r3, #60]	; 0x3c
  targetPosition = 2000;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013fc:	601a      	str	r2, [r3, #0]
  actualPosition = 0;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  output_pwm = 0;
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <_ZN7Gripper11initGripperEv+0x98>)
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800140c:	2104      	movs	r1, #4
 800140e:	4812      	ldr	r0, [pc, #72]	; (8001458 <_ZN7Gripper11initGripperEv+0x9c>)
 8001410:	f004 ff42 	bl	8006298 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001414:	2108      	movs	r1, #8
 8001416:	4810      	ldr	r0, [pc, #64]	; (8001458 <_ZN7Gripper11initGripperEv+0x9c>)
 8001418:	f004 ff3e 	bl	8006298 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(DRV_PMODE_GPIO_Port, DRV_PMODE_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2120      	movs	r1, #32
 8001420:	480e      	ldr	r0, [pc, #56]	; (800145c <_ZN7Gripper11initGripperEv+0xa0>)
 8001422:	f003 fa93 	bl	800494c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_SLEEP_GPIO_Port, DRV_SLEEP_Pin, GPIO_PIN_SET);
 8001426:	2201      	movs	r2, #1
 8001428:	2140      	movs	r1, #64	; 0x40
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <_ZN7Gripper11initGripperEv+0xa0>)
 800142c:	f003 fa8e 	bl	800494c <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_RawReading, 5);
 8001430:	2205      	movs	r2, #5
 8001432:	490b      	ldr	r1, [pc, #44]	; (8001460 <_ZN7Gripper11initGripperEv+0xa4>)
 8001434:	480b      	ldr	r0, [pc, #44]	; (8001464 <_ZN7Gripper11initGripperEv+0xa8>)
 8001436:	f002 f805 	bl	8003444 <HAL_ADC_Start_DMA>
	  HAL_ADC_Stop_DMA(&hadc1);
 800143a:	480a      	ldr	r0, [pc, #40]	; (8001464 <_ZN7Gripper11initGripperEv+0xa8>)
 800143c:	f002 f8f2 	bl	8003624 <HAL_ADC_Stop_DMA>

}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	3e19999a 	.word	0x3e19999a
 800144c:	3a83126f 	.word	0x3a83126f
 8001450:	bf800000 	.word	0xbf800000
 8001454:	200001f4 	.word	0x200001f4
 8001458:	20000344 	.word	0x20000344
 800145c:	40020000 	.word	0x40020000
 8001460:	200001e0 	.word	0x200001e0
 8001464:	200001fc 	.word	0x200001fc

08001468 <_ZN7Gripper8mapfloatEfffff>:


float Gripper::mapfloat(float x, float in_min, float in_max, float out_min, float out_max) {
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6178      	str	r0, [r7, #20]
 8001470:	ed87 0a04 	vstr	s0, [r7, #16]
 8001474:	edc7 0a03 	vstr	s1, [r7, #12]
 8001478:	ed87 1a02 	vstr	s2, [r7, #8]
 800147c:	edc7 1a01 	vstr	s3, [r7, #4]
 8001480:	ed87 2a00 	vstr	s4, [r7]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001484:	ed97 7a04 	vldr	s14, [r7, #16]
 8001488:	edd7 7a03 	vldr	s15, [r7, #12]
 800148c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001490:	edd7 6a00 	vldr	s13, [r7]
 8001494:	edd7 7a01 	vldr	s15, [r7, #4]
 8001498:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800149c:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80014a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80014b8:	eeb0 0a67 	vmov.f32	s0, s15
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <_ZN7Gripper7pidStepEv>:

void Gripper::pidStep() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	targetPosition=50;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2232      	movs	r2, #50	; 0x32
 80014d4:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_RawReading, 5);
 80014d6:	2205      	movs	r2, #5
 80014d8:	4948      	ldr	r1, [pc, #288]	; (80015fc <_ZN7Gripper7pidStepEv+0x134>)
 80014da:	4849      	ldr	r0, [pc, #292]	; (8001600 <_ZN7Gripper7pidStepEv+0x138>)
 80014dc:	f001 ffb2 	bl	8003444 <HAL_ADC_Start_DMA>
	actualPosition = mapfloat(ADC_RawReading[0] ,maxposition,minposition,0,100);
 80014e0:	4b46      	ldr	r3, [pc, #280]	; (80015fc <_ZN7Gripper7pidStepEv+0x134>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	ee07 3a10 	vmov	s14, r3
 80014f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	ee06 3a90 	vmov	s13, r3
 8001500:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001504:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 8001604 <_ZN7Gripper7pidStepEv+0x13c>
 8001508:	eddf 1a3f 	vldr	s3, [pc, #252]	; 8001608 <_ZN7Gripper7pidStepEv+0x140>
 800150c:	eeb0 1a66 	vmov.f32	s2, s13
 8001510:	eef0 0a47 	vmov.f32	s1, s14
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffa5 	bl	8001468 <_ZN7Gripper8mapfloatEfffff>
 800151e:	eef0 7a40 	vmov.f32	s15, s0
 8001522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001526:	ee17 2a90 	vmov	r2, s15
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	605a      	str	r2, [r3, #4]

//  ActualPosition = ADC_RawReading[0];

  float error =  targetPosition - actualPosition;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	edc7 7a03 	vstr	s15, [r7, #12]
  // update the integral and derivative terms
  integral +=error;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800154a:	edd7 7a03 	vldr	s15, [r7, #12]
 800154e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  if (integral >= 100) integral = 100;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800155e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001604 <_ZN7Gripper7pidStepEv+0x13c>
 8001562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	db03      	blt.n	8001574 <_ZN7Gripper7pidStepEv+0xac>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a27      	ldr	r2, [pc, #156]	; (800160c <_ZN7Gripper7pidStepEv+0x144>)
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
 8001572:	e00c      	b.n	800158e <_ZN7Gripper7pidStepEv+0xc6>
  else if (integral < -100) integral = -100;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800157a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001610 <_ZN7Gripper7pidStepEv+0x148>
 800157e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	d502      	bpl.n	800158e <_ZN7Gripper7pidStepEv+0xc6>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a22      	ldr	r2, [pc, #136]	; (8001614 <_ZN7Gripper7pidStepEv+0x14c>)
 800158c:	635a      	str	r2, [r3, #52]	; 0x34

  derivative = error - lastError;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001594:	ed97 7a03 	vldr	s14, [r7, #12]
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  lastError = error;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
  // calculate the output value using the PID equation
  float output = (Kp * error) + (Ki * integral) + (Kd * derivative);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80015ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edd3 6a05 	vldr	s13, [r3, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 6a06 	vldr	s13, [r3, #24]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015de:	edc7 7a02 	vstr	s15, [r7, #8]

  output_pwm = output;
 80015e2:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <_ZN7Gripper7pidStepEv+0x150>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	6013      	str	r3, [r2, #0]
  HAL_ADC_Stop_DMA(&hadc1);
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <_ZN7Gripper7pidStepEv+0x138>)
 80015ea:	f002 f81b 	bl	8003624 <HAL_ADC_Stop_DMA>
  setMotor();
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f814 	bl	800161c <_ZN7Gripper8setMotorEv>
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200001e0 	.word	0x200001e0
 8001600:	200001fc 	.word	0x200001fc
 8001604:	42c80000 	.word	0x42c80000
 8001608:	00000000 	.word	0x00000000
 800160c:	42c80000 	.word	0x42c80000
 8001610:	c2c80000 	.word	0xc2c80000
 8001614:	c2c80000 	.word	0xc2c80000
 8001618:	200001f4 	.word	0x200001f4

0800161c <_ZN7Gripper8setMotorEv>:



void Gripper::setMotor(){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	if(output_pwm<0)
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <_ZN7Gripper8setMotorEv+0xc8>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d521      	bpl.n	8001678 <_ZN7Gripper8setMotorEv+0x5c>
	   {
		output_pwm = mapfloat(output_pwm ,0,2500,1250,2500);
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <_ZN7Gripper8setMotorEv+0xc8>)
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 80016e8 <_ZN7Gripper8setMotorEv+0xcc>
 800163e:	eddf 1a2b 	vldr	s3, [pc, #172]	; 80016ec <_ZN7Gripper8setMotorEv+0xd0>
 8001642:	ed9f 1a29 	vldr	s2, [pc, #164]	; 80016e8 <_ZN7Gripper8setMotorEv+0xcc>
 8001646:	eddf 0a2a 	vldr	s1, [pc, #168]	; 80016f0 <_ZN7Gripper8setMotorEv+0xd4>
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff0a 	bl	8001468 <_ZN7Gripper8mapfloatEfffff>
 8001654:	eef0 7a40 	vmov.f32	s15, s0
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <_ZN7Gripper8setMotorEv+0xc8>)
 800165a:	edc3 7a00 	vstr	s15, [r3]
		   TIM3->CCR2=0;
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <_ZN7Gripper8setMotorEv+0xd8>)
 8001660:	2200      	movs	r2, #0
 8001662:	639a      	str	r2, [r3, #56]	; 0x38
		   TIM3->CCR3=output_pwm;
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <_ZN7Gripper8setMotorEv+0xc8>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <_ZN7Gripper8setMotorEv+0xd8>)
 800166c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001670:	ee17 2a90 	vmov	r2, s15
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c
	   else{
		   TIM3->CCR3=0;
		   TIM3->CCR2=0;
	   }

}
 8001676:	e031      	b.n	80016dc <_ZN7Gripper8setMotorEv+0xc0>
	   else if(output_pwm >0){
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <_ZN7Gripper8setMotorEv+0xc8>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	dd23      	ble.n	80016d0 <_ZN7Gripper8setMotorEv+0xb4>
		   output_pwm= mapfloat(output_pwm,-2500,0,-2500,-1250);
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <_ZN7Gripper8setMotorEv+0xc8>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 80016f8 <_ZN7Gripper8setMotorEv+0xdc>
 8001692:	eddf 1a1a 	vldr	s3, [pc, #104]	; 80016fc <_ZN7Gripper8setMotorEv+0xe0>
 8001696:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80016f0 <_ZN7Gripper8setMotorEv+0xd4>
 800169a:	eddf 0a18 	vldr	s1, [pc, #96]	; 80016fc <_ZN7Gripper8setMotorEv+0xe0>
 800169e:	eeb0 0a67 	vmov.f32	s0, s15
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fee0 	bl	8001468 <_ZN7Gripper8mapfloatEfffff>
 80016a8:	eef0 7a40 	vmov.f32	s15, s0
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <_ZN7Gripper8setMotorEv+0xc8>)
 80016ae:	edc3 7a00 	vstr	s15, [r3]
		   TIM3->CCR3=0;
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <_ZN7Gripper8setMotorEv+0xd8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
		   TIM3->CCR2=-output_pwm;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <_ZN7Gripper8setMotorEv+0xc8>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	eef1 7a67 	vneg.f32	s15, s15
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <_ZN7Gripper8setMotorEv+0xd8>)
 80016c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016c8:	ee17 2a90 	vmov	r2, s15
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016ce:	e005      	b.n	80016dc <_ZN7Gripper8setMotorEv+0xc0>
		   TIM3->CCR3=0;
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <_ZN7Gripper8setMotorEv+0xd8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	63da      	str	r2, [r3, #60]	; 0x3c
		   TIM3->CCR2=0;
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <_ZN7Gripper8setMotorEv+0xd8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200001f4 	.word	0x200001f4
 80016e8:	451c4000 	.word	0x451c4000
 80016ec:	449c4000 	.word	0x449c4000
 80016f0:	00000000 	.word	0x00000000
 80016f4:	40000400 	.word	0x40000400
 80016f8:	c49c4000 	.word	0xc49c4000
 80016fc:	c51c4000 	.word	0xc51c4000

08001700 <_ZN7Gripper16calibrateGripperEv>:

void Gripper::calibrateGripper()
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t StopFlag=0;
 8001708:	2300      	movs	r3, #0
 800170a:	75fb      	strb	r3, [r7, #23]
	uint32_t StarTime=0;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
	uint16_t CurrentPot=0;
 8001710:	2300      	movs	r3, #0
 8001712:	81fb      	strh	r3, [r7, #14]
	uint16_t PreviousPot=0;
 8001714:	2300      	movs	r3, #0
 8001716:	82bb      	strh	r3, [r7, #20]

	CurrentPot=ADC_RawReading[0];
 8001718:	4b48      	ldr	r3, [pc, #288]	; (800183c <_ZN7Gripper16calibrateGripperEv+0x13c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	81fb      	strh	r3, [r7, #14]

	PreviousPot=CurrentPot;
 800171e:	89fb      	ldrh	r3, [r7, #14]
 8001720:	82bb      	strh	r3, [r7, #20]
	StarTime=hw.now();
 8001722:	4847      	ldr	r0, [pc, #284]	; (8001840 <_ZN7Gripper16calibrateGripperEv+0x140>)
 8001724:	f000 fafc 	bl	8001d20 <_ZN8Hardware3nowEv>
 8001728:	6138      	str	r0, [r7, #16]
	output_pwm = -400;
 800172a:	4b46      	ldr	r3, [pc, #280]	; (8001844 <_ZN7Gripper16calibrateGripperEv+0x144>)
 800172c:	4a46      	ldr	r2, [pc, #280]	; (8001848 <_ZN7Gripper16calibrateGripperEv+0x148>)
 800172e:	601a      	str	r2, [r3, #0]
	setMotor();
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff73 	bl	800161c <_ZN7Gripper8setMotorEv>
	HAL_Delay(50);
 8001736:	2032      	movs	r0, #50	; 0x32
 8001738:	f001 fe1c 	bl	8003374 <HAL_Delay>
	while (StopFlag==0)
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d125      	bne.n	800178e <_ZN7Gripper16calibrateGripperEv+0x8e>
	{

		HAL_Delay(50);
 8001742:	2032      	movs	r0, #50	; 0x32
 8001744:	f001 fe16 	bl	8003374 <HAL_Delay>
		CurrentPot=ADC_RawReading[0];
 8001748:	4b3c      	ldr	r3, [pc, #240]	; (800183c <_ZN7Gripper16calibrateGripperEv+0x13c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	81fb      	strh	r3, [r7, #14]

		if (abs((CurrentPot-PreviousPot))<5)
 800174e:	89fa      	ldrh	r2, [r7, #14]
 8001750:	8abb      	ldrh	r3, [r7, #20]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	bfb8      	it	lt
 8001758:	425b      	neglt	r3, r3
 800175a:	2b04      	cmp	r3, #4
 800175c:	dc04      	bgt.n	8001768 <_ZN7Gripper16calibrateGripperEv+0x68>
		{
			StopFlag=1;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
			maxposition=CurrentPot;
 8001762:	89fa      	ldrh	r2, [r7, #14]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
		}


		PreviousPot=CurrentPot;
 8001768:	89fb      	ldrh	r3, [r7, #14]
 800176a:	82bb      	strh	r3, [r7, #20]

		if (hw.now()>StarTime+1000)
 800176c:	4834      	ldr	r0, [pc, #208]	; (8001840 <_ZN7Gripper16calibrateGripperEv+0x140>)
 800176e:	f000 fad7 	bl	8001d20 <_ZN8Hardware3nowEv>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800177a:	429a      	cmp	r2, r3
 800177c:	bf8c      	ite	hi
 800177e:	2301      	movhi	r3, #1
 8001780:	2300      	movls	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0d9      	beq.n	800173c <_ZN7Gripper16calibrateGripperEv+0x3c>
		{
			StopFlag=1;
 8001788:	2301      	movs	r3, #1
 800178a:	75fb      	strb	r3, [r7, #23]
	while (StopFlag==0)
 800178c:	e7d6      	b.n	800173c <_ZN7Gripper16calibrateGripperEv+0x3c>
		}
	}

	output_pwm = 0;
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <_ZN7Gripper16calibrateGripperEv+0x144>)
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
	setMotor();
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ff40 	bl	800161c <_ZN7Gripper8setMotorEv>
	HAL_Delay(500);
 800179c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017a0:	f001 fde8 	bl	8003374 <HAL_Delay>

	CurrentPot=ADC_RawReading[0];
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <_ZN7Gripper16calibrateGripperEv+0x13c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	81fb      	strh	r3, [r7, #14]
	PreviousPot=CurrentPot;
 80017aa:	89fb      	ldrh	r3, [r7, #14]
 80017ac:	82bb      	strh	r3, [r7, #20]
	StarTime=hw.now();
 80017ae:	4824      	ldr	r0, [pc, #144]	; (8001840 <_ZN7Gripper16calibrateGripperEv+0x140>)
 80017b0:	f000 fab6 	bl	8001d20 <_ZN8Hardware3nowEv>
 80017b4:	6138      	str	r0, [r7, #16]
	StopFlag=0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]
	output_pwm = 400;
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <_ZN7Gripper16calibrateGripperEv+0x144>)
 80017bc:	4a23      	ldr	r2, [pc, #140]	; (800184c <_ZN7Gripper16calibrateGripperEv+0x14c>)
 80017be:	601a      	str	r2, [r3, #0]
	setMotor();
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff2b 	bl	800161c <_ZN7Gripper8setMotorEv>
	HAL_Delay(50);
 80017c6:	2032      	movs	r0, #50	; 0x32
 80017c8:	f001 fdd4 	bl	8003374 <HAL_Delay>
	while (StopFlag==0)
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d125      	bne.n	800181e <_ZN7Gripper16calibrateGripperEv+0x11e>
	{
		HAL_Delay(50);
 80017d2:	2032      	movs	r0, #50	; 0x32
 80017d4:	f001 fdce 	bl	8003374 <HAL_Delay>
		CurrentPot=ADC_RawReading[0];
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <_ZN7Gripper16calibrateGripperEv+0x13c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	81fb      	strh	r3, [r7, #14]

		if (abs((CurrentPot-PreviousPot))<5)
 80017de:	89fa      	ldrh	r2, [r7, #14]
 80017e0:	8abb      	ldrh	r3, [r7, #20]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bfb8      	it	lt
 80017e8:	425b      	neglt	r3, r3
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	dc04      	bgt.n	80017f8 <_ZN7Gripper16calibrateGripperEv+0xf8>
		{
			StopFlag=1;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
			minposition=CurrentPot;
 80017f2:	89fa      	ldrh	r2, [r7, #14]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	60da      	str	r2, [r3, #12]
		}

		PreviousPot=CurrentPot;
 80017f8:	89fb      	ldrh	r3, [r7, #14]
 80017fa:	82bb      	strh	r3, [r7, #20]

		if (hw.now()>StarTime+1000)
 80017fc:	4810      	ldr	r0, [pc, #64]	; (8001840 <_ZN7Gripper16calibrateGripperEv+0x140>)
 80017fe:	f000 fa8f 	bl	8001d20 <_ZN8Hardware3nowEv>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800180a:	429a      	cmp	r2, r3
 800180c:	bf8c      	ite	hi
 800180e:	2301      	movhi	r3, #1
 8001810:	2300      	movls	r3, #0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0d9      	beq.n	80017cc <_ZN7Gripper16calibrateGripperEv+0xcc>
		{
			StopFlag=1;
 8001818:	2301      	movs	r3, #1
 800181a:	75fb      	strb	r3, [r7, #23]
	while (StopFlag==0)
 800181c:	e7d6      	b.n	80017cc <_ZN7Gripper16calibrateGripperEv+0xcc>
		}
	}
	output_pwm =0;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <_ZN7Gripper16calibrateGripperEv+0x144>)
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
	setMotor();
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fef8 	bl	800161c <_ZN7Gripper8setMotorEv>

	targetPosition = 80;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2250      	movs	r2, #80	; 0x50
 8001830:	601a      	str	r2, [r3, #0]
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200001e0 	.word	0x200001e0
 8001840:	2000009c 	.word	0x2000009c
 8001844:	200001f4 	.word	0x200001f4
 8001848:	c3c80000 	.word	0xc3c80000
 800184c:	43c80000 	.word	0x43c80000

08001850 <_ZN7Gripper10distributeE15CommandFromHost>:
  float current = voltage / 0.4;  // sensitivity of the current sensor is 400mV/A
  return current;
}


void Gripper::distribute(CommandFromHost _in_command){
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	b0fa      	sub	sp, #488	; 0x1e8
 8001854:	af00      	add	r7, sp, #0
 8001856:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800185a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800185e:	6018      	str	r0, [r3, #0]
 8001860:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001864:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001868:	6019      	str	r1, [r3, #0]

if(_in_command._command == eGetStatus){
 800186a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800186e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	785b      	ldrb	r3, [r3, #1]
 8001876:	2b08      	cmp	r3, #8
 8001878:	d164      	bne.n	8001944 <_ZN7Gripper10distributeE15CommandFromHost+0xf4>
  ResponseToHost res;
 800187a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fd7a 	bl	8001378 <_ZN14ResponseToHostC1Ev>
  int target;
  target=int(_in_command._payload[0]);
 8001884:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001888:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	789b      	ldrb	r3, [r3, #2]
 8001890:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
  targetPosition=target;
 8001894:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001898:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80018a2:	601a      	str	r2, [r3, #0]
//  readings_right[2]=MagneticSensor_right.z;
//  readings_left[0]=MagneticSensor_left.x;
//  readings_left[1]=MagneticSensor_left.y;
//  readings_left[2]=MagneticSensor_left.z;
//  float current= measureCurrent(A2);
  memcpy(res._payload, &actualPosition, sizeof(int));
 80018a4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80018a8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3304      	adds	r3, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80018b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018bc:	f8c3 2002 	str.w	r2, [r3, #2]
//  memcpy(res._payload, &current, sizeof(float));
  memcpy(res._payload, (char*)readings_right, sizeof(int) * 3);
 80018c0:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80018c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018c8:	3302      	adds	r3, #2
 80018ca:	220c      	movs	r2, #12
 80018cc:	4618      	mov	r0, r3
 80018ce:	f006 f8f3 	bl	8007ab8 <memcpy>
  memcpy(res._payload, (char*)readings_left, sizeof(int) * 3);
 80018d2:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80018d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018da:	3302      	adds	r3, #2
 80018dc:	220c      	movs	r2, #12
 80018de:	4618      	mov	r0, r3
 80018e0:	f006 f8ea 	bl	8007ab8 <memcpy>
  res._payload_size = sizeof(int)*7+sizeof(float);
 80018e4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80018e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018ec:	2220      	movs	r2, #32
 80018ee:	619a      	str	r2, [r3, #24]
  res._endpoint=eHost;
 80018f0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80018f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
  res._response=eData;
 80018fc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001904:	2201      	movs	r2, #1
 8001906:	705a      	strb	r2, [r3, #1]
  comm.sendRes(res);
 8001908:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800190c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001910:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8001914:	461d      	mov	r5, r3
 8001916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800191e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001922:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001926:	4619      	mov	r1, r3
 8001928:	48d4      	ldr	r0, [pc, #848]	; (8001c7c <_ZN7Gripper10distributeE15CommandFromHost+0x42c>)
 800192a:	f7fe ff4d 	bl	80007c8 <_ZN9RS485Comm7sendResE14ResponseToHost>
 800192e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fd2b 	bl	800138e <_ZN14ResponseToHostD1Ev>
  ResponseToHost res;
 8001938:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fd26 	bl	800138e <_ZN14ResponseToHostD1Ev>
}
else{
//  Ser->write("E5"); WRITE
}

}
 8001942:	e1e5      	b.n	8001d10 <_ZN7Gripper10distributeE15CommandFromHost+0x4c0>
else if(_in_command._command == eMoveToPos){
 8001944:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001948:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	785b      	ldrb	r3, [r3, #1]
 8001950:	2b05      	cmp	r3, #5
 8001952:	d149      	bne.n	80019e8 <_ZN7Gripper10distributeE15CommandFromHost+0x198>
  target=int(_in_command._payload[0]);
 8001954:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001958:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	789b      	ldrb	r3, [r3, #2]
 8001960:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  targetPosition=target;
 8001964:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001968:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8001972:	601a      	str	r2, [r3, #0]
  ResponseToHost res;
 8001974:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fcfd 	bl	8001378 <_ZN14ResponseToHostC1Ev>
  res._endpoint=eHost;
 800197e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001982:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
  res._response=eConfirm;
 800198a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800198e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001992:	2200      	movs	r2, #0
 8001994:	705a      	strb	r2, [r3, #1]
  res._payload_size = sizeof(int);
 8001996:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800199a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800199e:	2204      	movs	r2, #4
 80019a0:	619a      	str	r2, [r3, #24]
  *(int*)res._payload = 101;
 80019a2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019a6:	3302      	adds	r3, #2
 80019a8:	2265      	movs	r2, #101	; 0x65
 80019aa:	601a      	str	r2, [r3, #0]
  comm.sendRes(res);
 80019ac:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80019b0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80019b4:	f507 748e 	add.w	r4, r7, #284	; 0x11c
 80019b8:	461d      	mov	r5, r3
 80019ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019c6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80019ca:	4619      	mov	r1, r3
 80019cc:	48ab      	ldr	r0, [pc, #684]	; (8001c7c <_ZN7Gripper10distributeE15CommandFromHost+0x42c>)
 80019ce:	f7fe fefb 	bl	80007c8 <_ZN9RS485Comm7sendResE14ResponseToHost>
 80019d2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fcd9 	bl	800138e <_ZN14ResponseToHostD1Ev>
  ResponseToHost res;
 80019dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fcd4 	bl	800138e <_ZN14ResponseToHostD1Ev>
}
 80019e6:	e193      	b.n	8001d10 <_ZN7Gripper10distributeE15CommandFromHost+0x4c0>
else if(_in_command._command == eGetPos){
 80019e8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80019ec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	785b      	ldrb	r3, [r3, #1]
 80019f4:	2b06      	cmp	r3, #6
 80019f6:	d13e      	bne.n	8001a76 <_ZN7Gripper10distributeE15CommandFromHost+0x226>
  ResponseToHost res;
 80019f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fcbb 	bl	8001378 <_ZN14ResponseToHostC1Ev>
  res._endpoint=eHost;
 8001a02:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001a06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
  res._response=eData;
 8001a0e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001a12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a16:	2201      	movs	r2, #1
 8001a18:	705a      	strb	r2, [r3, #1]
  res._payload_size = sizeof(int);
 8001a1a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001a1e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a22:	2204      	movs	r2, #4
 8001a24:	619a      	str	r2, [r3, #24]
  *(int*)res._payload = actualPosition;
 8001a26:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8001a30:	f5a2 72f2 	sub.w	r2, r2, #484	; 0x1e4
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	6852      	ldr	r2, [r2, #4]
 8001a38:	601a      	str	r2, [r3, #0]
  comm.sendRes(res);
 8001a3a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001a3e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a42:	f507 749c 	add.w	r4, r7, #312	; 0x138
 8001a46:	461d      	mov	r5, r3
 8001a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4888      	ldr	r0, [pc, #544]	; (8001c7c <_ZN7Gripper10distributeE15CommandFromHost+0x42c>)
 8001a5c:	f7fe feb4 	bl	80007c8 <_ZN9RS485Comm7sendResE14ResponseToHost>
 8001a60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fc92 	bl	800138e <_ZN14ResponseToHostD1Ev>
  ResponseToHost res;
 8001a6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fc8d 	bl	800138e <_ZN14ResponseToHostD1Ev>
}
 8001a74:	e14c      	b.n	8001d10 <_ZN7Gripper10distributeE15CommandFromHost+0x4c0>
else if(_in_command._command == eGetCurrent){
 8001a76:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001a7a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	785b      	ldrb	r3, [r3, #1]
 8001a82:	2b07      	cmp	r3, #7
 8001a84:	d134      	bne.n	8001af0 <_ZN7Gripper10distributeE15CommandFromHost+0x2a0>
  ResponseToHost res;
 8001a86:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fc74 	bl	8001378 <_ZN14ResponseToHostC1Ev>
  res._endpoint=eHost;
 8001a90:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001a94:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
    res._response=eData;
 8001a9c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001aa0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	705a      	strb	r2, [r3, #1]
  res._payload_size = sizeof(float);
 8001aa8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001aac:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	619a      	str	r2, [r3, #24]
  comm.sendRes(res);
 8001ab4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001ab8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001abc:	f507 74aa 	add.w	r4, r7, #340	; 0x154
 8001ac0:	461d      	mov	r5, r3
 8001ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ace:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4869      	ldr	r0, [pc, #420]	; (8001c7c <_ZN7Gripper10distributeE15CommandFromHost+0x42c>)
 8001ad6:	f7fe fe77 	bl	80007c8 <_ZN9RS485Comm7sendResE14ResponseToHost>
 8001ada:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fc55 	bl	800138e <_ZN14ResponseToHostD1Ev>
  ResponseToHost res;
 8001ae4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fc50 	bl	800138e <_ZN14ResponseToHostD1Ev>
}
 8001aee:	e10f      	b.n	8001d10 <_ZN7Gripper10distributeE15CommandFromHost+0x4c0>
else if(_in_command._command == eEnable){
 8001af0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001af4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	785b      	ldrb	r3, [r3, #1]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d139      	bne.n	8001b74 <_ZN7Gripper10distributeE15CommandFromHost+0x324>
    ResponseToHost res;
 8001b00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fc37 	bl	8001378 <_ZN14ResponseToHostC1Ev>
  res._endpoint=eHost;
 8001b0a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001b0e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
  res._response=eConfirm;
 8001b16:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001b1a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b1e:	2200      	movs	r2, #0
 8001b20:	705a      	strb	r2, [r3, #1]
  res._payload_size = sizeof(int);
 8001b22:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001b26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	619a      	str	r2, [r3, #24]
  *(int*)res._payload = 102;
 8001b2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b32:	3302      	adds	r3, #2
 8001b34:	2266      	movs	r2, #102	; 0x66
 8001b36:	601a      	str	r2, [r3, #0]
  comm.sendRes(res);
 8001b38:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001b3c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b40:	f507 74b8 	add.w	r4, r7, #368	; 0x170
 8001b44:	461d      	mov	r5, r3
 8001b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b52:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001b56:	4619      	mov	r1, r3
 8001b58:	4848      	ldr	r0, [pc, #288]	; (8001c7c <_ZN7Gripper10distributeE15CommandFromHost+0x42c>)
 8001b5a:	f7fe fe35 	bl	80007c8 <_ZN9RS485Comm7sendResE14ResponseToHost>
 8001b5e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fc13 	bl	800138e <_ZN14ResponseToHostD1Ev>
    ResponseToHost res;
 8001b68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fc0e 	bl	800138e <_ZN14ResponseToHostD1Ev>
}
 8001b72:	e0cd      	b.n	8001d10 <_ZN7Gripper10distributeE15CommandFromHost+0x4c0>
else if(_in_command._command == eDisable){
 8001b74:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001b78:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	785b      	ldrb	r3, [r3, #1]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d139      	bne.n	8001bf8 <_ZN7Gripper10distributeE15CommandFromHost+0x3a8>
    ResponseToHost res;
 8001b84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fbf5 	bl	8001378 <_ZN14ResponseToHostC1Ev>
  res._endpoint=eHost;
 8001b8e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001b92:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
    res._response=eConfirm;
 8001b9a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001b9e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	705a      	strb	r2, [r3, #1]
  res._payload_size = sizeof(int);
 8001ba6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001baa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bae:	2204      	movs	r2, #4
 8001bb0:	619a      	str	r2, [r3, #24]
  *(int*)res._payload = 103;
 8001bb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	2267      	movs	r2, #103	; 0x67
 8001bba:	601a      	str	r2, [r3, #0]
  comm.sendRes(res);
 8001bbc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001bc0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bc4:	f507 74c6 	add.w	r4, r7, #396	; 0x18c
 8001bc8:	461d      	mov	r5, r3
 8001bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001bd6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4827      	ldr	r0, [pc, #156]	; (8001c7c <_ZN7Gripper10distributeE15CommandFromHost+0x42c>)
 8001bde:	f7fe fdf3 	bl	80007c8 <_ZN9RS485Comm7sendResE14ResponseToHost>
 8001be2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fbd1 	bl	800138e <_ZN14ResponseToHostD1Ev>
    ResponseToHost res;
 8001bec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fbcc 	bl	800138e <_ZN14ResponseToHostD1Ev>
}
 8001bf6:	e08b      	b.n	8001d10 <_ZN7Gripper10distributeE15CommandFromHost+0x4c0>
else if(_in_command._command == eReset){
 8001bf8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001bfc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d13b      	bne.n	8001c80 <_ZN7Gripper10distributeE15CommandFromHost+0x430>
    ResponseToHost res;
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fbb3 	bl	8001378 <_ZN14ResponseToHostC1Ev>
  res._endpoint=eHost;
 8001c12:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001c16:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
    res._response=eConfirm;
 8001c1e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001c22:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c26:	2200      	movs	r2, #0
 8001c28:	705a      	strb	r2, [r3, #1]
  res._payload_size = sizeof(int);
 8001c2a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001c2e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c32:	2204      	movs	r2, #4
 8001c34:	619a      	str	r2, [r3, #24]
  *(int*)res._payload = 104;
 8001c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	2268      	movs	r2, #104	; 0x68
 8001c3e:	601a      	str	r2, [r3, #0]
  comm.sendRes(res);
 8001c40:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001c44:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c48:	f507 74d4 	add.w	r4, r7, #424	; 0x1a8
 8001c4c:	461d      	mov	r5, r3
 8001c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c5a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4806      	ldr	r0, [pc, #24]	; (8001c7c <_ZN7Gripper10distributeE15CommandFromHost+0x42c>)
 8001c62:	f7fe fdb1 	bl	80007c8 <_ZN9RS485Comm7sendResE14ResponseToHost>
 8001c66:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fb8f 	bl	800138e <_ZN14ResponseToHostD1Ev>
    ResponseToHost res;
 8001c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fb8a 	bl	800138e <_ZN14ResponseToHostD1Ev>
}
 8001c7a:	e049      	b.n	8001d10 <_ZN7Gripper10distributeE15CommandFromHost+0x4c0>
 8001c7c:	20000138 	.word	0x20000138
else if(_in_command._command == eCalibrate){
 8001c80:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001c84:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	785b      	ldrb	r3, [r3, #1]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d13f      	bne.n	8001d10 <_ZN7Gripper10distributeE15CommandFromHost+0x4c0>
  calibrateGripper();
 8001c90:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001c94:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	f7ff fd31 	bl	8001700 <_ZN7Gripper16calibrateGripperEv>
    ResponseToHost res;
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fb68 	bl	8001378 <_ZN14ResponseToHostC1Ev>
  res._endpoint=eHost;
 8001ca8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001cac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
  res._response=eConfirm;
 8001cb4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001cb8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	705a      	strb	r2, [r3, #1]
  res._payload_size = sizeof(int);
 8001cc0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001cc4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cc8:	2204      	movs	r2, #4
 8001cca:	619a      	str	r2, [r3, #24]
  *(int*)res._payload = 105;
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	2269      	movs	r2, #105	; 0x69
 8001cd4:	601a      	str	r2, [r3, #0]
  comm.sendRes(res);
 8001cd6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001cda:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cde:	f507 74e2 	add.w	r4, r7, #452	; 0x1c4
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cf0:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4809      	ldr	r0, [pc, #36]	; (8001d1c <_ZN7Gripper10distributeE15CommandFromHost+0x4cc>)
 8001cf8:	f7fe fd66 	bl	80007c8 <_ZN9RS485Comm7sendResE14ResponseToHost>
 8001cfc:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fb44 	bl	800138e <_ZN14ResponseToHostD1Ev>
    ResponseToHost res;
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fb3f 	bl	800138e <_ZN14ResponseToHostD1Ev>
}
 8001d10:	bf00      	nop
 8001d12:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000138 	.word	0x20000138

08001d20 <_ZN8Hardware3nowEv>:
{

}

uint32_t Hardware::now(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	return HAL_GetTick();
 8001d28:	f001 fb18 	bl	800335c <HAL_GetTick>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	2203      	movs	r2, #3
 8001d94:	4798      	blx	r3
    }
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_ZN9RS485Comm11setCallbackESt8functionIFv15CommandFromHostEE>:
		void floatToBytes(float num, uint8_t *uint16_ts_array);
		int count_ones(uint8_t array[], int length);
		void readFromHost();
		size_t remove_trailing_zeros(uint8_t *array, size_t len);
		void sendRes(ResponseToHost res);
		void setCallback(std::function<void(CommandFromHost)> i_callback){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
			_distribute_callback = i_callback;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3328      	adds	r3, #40	; 0x28
 8001dae:	6839      	ldr	r1, [r7, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 f92d 	bl	8002010 <_ZNSt8functionIFv15CommandFromHostEEaSERKS2_>
		}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_ZNSt8functionIFv15CommandFromHostEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ffd6 	bl	8001d7a <_ZNSt14_Function_baseD1Ev>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <loop_init>:
uint32_t ADC_RawReading[5];
float output_pwm;

void distribute(CommandFromHost i_command);

extern "C" void loop_init() {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0

	grip.initGripper();
 8001dde:	480f      	ldr	r0, [pc, #60]	; (8001e1c <loop_init+0x44>)
 8001de0:	f7ff faec 	bl	80013bc <_ZN7Gripper11initGripperEv>
	MagneticSensor_right.init_mlx();
 8001de4:	480e      	ldr	r0, [pc, #56]	; (8001e20 <loop_init+0x48>)
 8001de6:	f000 fbe5 	bl	80025b4 <_ZN3Mlx8init_mlxEv>
	MagneticSensor_left.init_mlx();
 8001dea:	480e      	ldr	r0, [pc, #56]	; (8001e24 <loop_init+0x4c>)
 8001dec:	f000 fbe2 	bl	80025b4 <_ZN3Mlx8init_mlxEv>
	comm.initComm();
 8001df0:	480d      	ldr	r0, [pc, #52]	; (8001e28 <loop_init+0x50>)
 8001df2:	f7fe fc37 	bl	8000664 <_ZN9RS485Comm8initCommEv>
	comm.setCallback(&distribute);
 8001df6:	463b      	mov	r3, r7
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <loop_init+0x54>)
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f924 	bl	8002048 <_ZNSt8functionIFv15CommandFromHostEEC1IPS1_vvEET_>
 8001e00:	463b      	mov	r3, r7
 8001e02:	4619      	mov	r1, r3
 8001e04:	4808      	ldr	r0, [pc, #32]	; (8001e28 <loop_init+0x50>)
 8001e06:	f7ff ffcb 	bl	8001da0 <_ZN9RS485Comm11setCallbackESt8functionIFv15CommandFromHostEE>
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ffd6 	bl	8001dbe <_ZNSt8functionIFv15CommandFromHostEED1Ev>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200000a8 	.word	0x200000a8
 8001e20:	200000e8 	.word	0x200000e8
 8001e24:	20000110 	.word	0x20000110
 8001e28:	20000138 	.word	0x20000138
 8001e2c:	08001f0d 	.word	0x08001f0d

08001e30 <loop>:


extern "C" void loop() {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8001e36:	f001 fa91 	bl	800335c <HAL_GetTick>
 8001e3a:	6078      	str	r0, [r7, #4]
	grip.calibrateGripper();
 8001e3c:	4823      	ldr	r0, [pc, #140]	; (8001ecc <loop+0x9c>)
 8001e3e:	f7ff fc5f 	bl	8001700 <_ZN7Gripper16calibrateGripperEv>

    while (1) {
		now = HAL_GetTick();
 8001e42:	f001 fa8b 	bl	800335c <HAL_GetTick>
 8001e46:	6078      	str	r0, [r7, #4]
//		 the 100Hz loop will be small (if it's 5ms, it'll happen every other time)
		if (now % 2 != 0) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <loop+0x2e>
			  adcConversionComplete=0;
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <loop+0xa0>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
			grip.pidStep();
 8001e58:	481c      	ldr	r0, [pc, #112]	; (8001ecc <loop+0x9c>)
 8001e5a:	f7ff fb35 	bl	80014c8 <_ZN7Gripper7pidStepEv>

		}

		if (now % 10 != 0) {
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <loop+0xa4>)
 8001e62:	fba3 2301 	umull	r2, r3, r3, r1
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	1aca      	subs	r2, r1, r3
 8001e72:	2a00      	cmp	r2, #0
 8001e74:	d00c      	beq.n	8001e90 <loop+0x60>
			if(Err){
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <loop+0xa8>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <loop+0x60>
			    comm.Receive();
 8001e8a:	4814      	ldr	r0, [pc, #80]	; (8001edc <loop+0xac>)
 8001e8c:	f7fe fbc8 	bl	8000620 <_ZN9RS485Comm7ReceiveEv>
			}
		}

		if (now % 10 == 0) {
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <loop+0xa4>)
 8001e94:	fba3 2301 	umull	r2, r3, r3, r1
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	1aca      	subs	r2, r1, r3
 8001ea4:	2a00      	cmp	r2, #0
 8001ea6:	d105      	bne.n	8001eb4 <loop+0x84>
			MagneticSensor_right.read();
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <loop+0xb0>)
 8001eaa:	f000 fbc5 	bl	8002638 <_ZN3Mlx4readEv>
			MagneticSensor_left.read();
 8001eae:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <loop+0xb4>)
 8001eb0:	f000 fbc2 	bl	8002638 <_ZN3Mlx4readEv>
		}

		if (now % 200 == 0) {
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <loop+0xb8>)
 8001eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	21c8      	movs	r1, #200	; 0xc8
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b00      	cmp	r3, #0
		now = HAL_GetTick();
 8001ec8:	e7bb      	b.n	8001e42 <loop+0x12>
 8001eca:	bf00      	nop
 8001ecc:	200000a8 	.word	0x200000a8
 8001ed0:	200000a0 	.word	0x200000a0
 8001ed4:	cccccccd 	.word	0xcccccccd
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000138 	.word	0x20000138
 8001ee0:	200000e8 	.word	0x200000e8
 8001ee4:	20000110 	.word	0x20000110
 8001ee8:	51eb851f 	.word	0x51eb851f

08001eec <HAL_ADC_ConvCpltCallback>:
	}
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	adcConversionComplete=1;
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	200000a0 	.word	0x200000a0

08001f0c <_Z10distribute15CommandFromHost>:

void distribute(CommandFromHost i_command){
 8001f0c:	b5b0      	push	{r4, r5, r7, lr}
 8001f0e:	b098      	sub	sp, #96	; 0x60
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(i_command._endpoint == eGripper)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d115      	bne.n	8001f48 <_Z10distribute15CommandFromHost+0x3c>
  {
    grip.distribute(i_command);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f107 040c 	add.w	r4, r7, #12
 8001f22:	461d      	mov	r5, r3
 8001f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	4619      	mov	r1, r3
 8001f36:	4820      	ldr	r0, [pc, #128]	; (8001fb8 <_Z10distribute15CommandFromHost+0xac>)
 8001f38:	f7ff fc8a 	bl	8001850 <_ZN7Gripper10distributeE15CommandFromHost>
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fb00 	bl	8000546 <_ZN15CommandFromHostD1Ev>
}
  else
  {
//	 comm.Transmit('E1', 1);
  }
}
 8001f46:	e032      	b.n	8001fae <_Z10distribute15CommandFromHost+0xa2>
  else if(i_command._endpoint == eMLX_right)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d115      	bne.n	8001f7c <_Z10distribute15CommandFromHost+0x70>
    MagneticSensor_right.distribute(i_command);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f56:	461d      	mov	r5, r3
 8001f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4814      	ldr	r0, [pc, #80]	; (8001fbc <_Z10distribute15CommandFromHost+0xb0>)
 8001f6c:	f000 fbc2 	bl	80026f4 <_ZN3Mlx10distributeE15CommandFromHost>
 8001f70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fae6 	bl	8000546 <_ZN15CommandFromHostD1Ev>
}
 8001f7a:	e018      	b.n	8001fae <_Z10distribute15CommandFromHost+0xa2>
else if(i_command._endpoint == eMLX_left)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d114      	bne.n	8001fae <_Z10distribute15CommandFromHost+0xa2>
    MagneticSensor_left.distribute(i_command);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4808      	ldr	r0, [pc, #32]	; (8001fc0 <_Z10distribute15CommandFromHost+0xb4>)
 8001fa0:	f000 fba8 	bl	80026f4 <_ZN3Mlx10distributeE15CommandFromHost>
 8001fa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe facc 	bl	8000546 <_ZN15CommandFromHostD1Ev>
}
 8001fae:	bf00      	nop
 8001fb0:	3760      	adds	r7, #96	; 0x60
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200000a8 	.word	0x200000a8
 8001fbc:	200000e8 	.word	0x200000e8
 8001fc0:	20000110 	.word	0x20000110

08001fc4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
    if (huart -> Instance == USART1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_UART_RxCpltCallback+0x38>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_UART_RxCpltCallback+0x30>
    {
    	rxComplete=1;
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_UART_RxCpltCallback+0x3c>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
    	txComplete=0;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_UART_RxCpltCallback+0x40>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
    	Err=0;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_UART_RxCpltCallback+0x44>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
    	comm.readFromHost();
 8001fe8:	4808      	ldr	r0, [pc, #32]	; (800200c <HAL_UART_RxCpltCallback+0x48>)
 8001fea:	f7fe fb8d 	bl	8000708 <_ZN9RS485Comm12readFromHostEv>
    	comm.Receive();
 8001fee:	4807      	ldr	r0, [pc, #28]	; (800200c <HAL_UART_RxCpltCallback+0x48>)
 8001ff0:	f7fe fb16 	bl	8000620 <_ZN9RS485Comm7ReceiveEv>

    }
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40011000 	.word	0x40011000
 8002000:	200000a5 	.word	0x200000a5
 8002004:	200000a4 	.word	0x200000a4
 8002008:	20000000 	.word	0x20000000
 800200c:	20000138 	.word	0x20000138

08002010 <_ZNSt8functionIFv15CommandFromHostEEaSERKS2_>:
      operator=(const function& __x)
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	6839      	ldr	r1, [r7, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f83b 	bl	800209c <_ZNSt8functionIFv15CommandFromHostEEC1ERKS2_>
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f857 	bl	80020e0 <_ZNSt8functionIFv15CommandFromHostEE4swapERS2_>
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fec1 	bl	8001dbe <_ZNSt8functionIFv15CommandFromHostEED1Ev>
	return *this;
 800203c:	687b      	ldr	r3, [r7, #4]
      }
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <_ZNSt8functionIFv15CommandFromHostEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa4c 	bl	80004f2 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f000 f860 	bl	8002122 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE21_M_not_empty_functionIS2_EEbPT_>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00f      	beq.n	8002088 <_ZNSt8functionIFv15CommandFromHostEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8002068:	687c      	ldr	r4, [r7, #4]
 800206a:	463b      	mov	r3, r7
 800206c:	4618      	mov	r0, r3
 800206e:	f000 f868 	bl	8002142 <_ZSt4moveIRPFv15CommandFromHostEEONSt16remove_referenceIT_E4typeEOS5_>
 8002072:	4603      	mov	r3, r0
 8002074:	4619      	mov	r1, r3
 8002076:	4620      	mov	r0, r4
 8002078:	f000 f86e 	bl	8002158 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <_ZNSt8functionIFv15CommandFromHostEEC1IPS1_vvEET_+0x4c>)
 8002080:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <_ZNSt8functionIFv15CommandFromHostEEC1IPS1_vvEET_+0x50>)
 8002086:	609a      	str	r2, [r3, #8]
      }
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}
 8002092:	bf00      	nop
 8002094:	0800217d 	.word	0x0800217d
 8002098:	080021a7 	.word	0x080021a7

0800209c <_ZNSt8functionIFv15CommandFromHostEEC1ERKS2_>:
    function<_Res(_ArgTypes...)>::
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
    : _Function_base()
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fa22 	bl	80004f2 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 80020ae:	6838      	ldr	r0, [r7, #0]
 80020b0:	f000 f898 	bl	80021e4 <_ZNKSt8functionIFv15CommandFromHostEEcvbEv>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00d      	beq.n	80020d6 <_ZNSt8functionIFv15CommandFromHostEEC1ERKS2_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	6839      	ldr	r1, [r7, #0]
 80020c2:	2202      	movs	r2, #2
 80020c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	609a      	str	r2, [r3, #8]
    }
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_ZNSt8functionIFv15CommandFromHostEE4swapERS2_>:
      void swap(function& __x) noexcept
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 f892 	bl	800221a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f103 0208 	add.w	r2, r3, #8
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	3308      	adds	r3, #8
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f000 f8bb 	bl	800227e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f103 020c 	add.w	r2, r3, #12
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	330c      	adds	r3, #12
 8002112:	4619      	mov	r1, r3
 8002114:	4610      	mov	r0, r2
 8002116:	f000 f8dc 	bl	80022d2 <_ZSt4swapIPFvRKSt9_Any_dataO15CommandFromHostEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
      }
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <_ZSt4moveIRPFv15CommandFromHostEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002162:	6838      	ldr	r0, [r7, #0]
 8002164:	f7ff ffed 	bl	8002142 <_ZSt4moveIRPFv15CommandFromHostEEONSt16remove_referenceIT_E4typeEOS5_>
 8002168:	4603      	mov	r3, r0
 800216a:	4622      	mov	r2, r4
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8ce 	bl	8002310 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bd90      	pop	{r4, r7, pc}

0800217c <_ZNSt17_Function_handlerIFv15CommandFromHostEPS1_E9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f8db 	bl	8002342 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE14_M_get_pointerERKSt9_Any_data>
 800218c:	4604      	mov	r4, r0
 800218e:	6838      	ldr	r0, [r7, #0]
 8002190:	f7fe fcc7 	bl	8000b22 <_ZSt7forwardI15CommandFromHostEOT_RNSt16remove_referenceIS1_E4typeE>
 8002194:	4603      	mov	r3, r0
 8002196:	4619      	mov	r1, r3
 8002198:	4620      	mov	r0, r4
 800219a:	f000 f8e3 	bl	8002364 <_ZSt10__invoke_rIvRPFv15CommandFromHostEJS0_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>
				     std::forward<_ArgTypes>(__args)...);
 800219e:	bf00      	nop
      }
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}

080021a6 <_ZNSt17_Function_handlerIFv15CommandFromHostEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80021a6:	b590      	push	{r4, r7, lr}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	4613      	mov	r3, r2
 80021b2:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d109      	bne.n	80021ce <_ZNSt17_Function_handlerIFv15CommandFromHostEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f8e8 	bl	8002390 <_ZNSt9_Any_data9_M_accessIPPFv15CommandFromHostEEERT_v>
 80021c0:	4604      	mov	r4, r0
 80021c2:	68b8      	ldr	r0, [r7, #8]
 80021c4:	f000 f8bd 	bl	8002342 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE14_M_get_pointerERKSt9_Any_data>
 80021c8:	4603      	mov	r3, r0
 80021ca:	6023      	str	r3, [r4, #0]
	    break;
 80021cc:	e005      	b.n	80021da <_ZNSt17_Function_handlerIFv15CommandFromHostEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	461a      	mov	r2, r3
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f8e7 	bl	80023a8 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80021da:	2300      	movs	r3, #0
      }
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd90      	pop	{r4, r7, pc}

080021e4 <_ZNKSt8functionIFv15CommandFromHostEEcvbEv>:
      explicit operator bool() const noexcept
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f98d 	bl	800050e <_ZNKSt14_Function_base8_M_emptyEv>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f083 0301 	eor.w	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ffed 	bl	8002204 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800222a:	4602      	mov	r2, r0
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002234:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002238:	6838      	ldr	r0, [r7, #0]
 800223a:	f7ff ffe3 	bl	8002204 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800223e:	4602      	mov	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002246:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800224a:	f107 0308 	add.w	r3, r7, #8
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff ffd8 	bl	8002204 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8002254:	4602      	mov	r2, r0
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800225c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffed 	bl	8002268 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800228e:	4603      	mov	r3, r0
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002294:	6838      	ldr	r0, [r7, #0]
 8002296:	f7ff ffe7 	bl	8002268 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800229a:	4603      	mov	r3, r0
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80022a2:	f107 030c 	add.w	r3, r7, #12
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ffde 	bl	8002268 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80022ac:	4603      	mov	r3, r0
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	601a      	str	r2, [r3, #0]
    }
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <_ZSt4moveIRPFvRKSt9_Any_dataO15CommandFromHostEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <_ZSt4swapIPFvRKSt9_Any_dataO15CommandFromHostEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ffed 	bl	80022bc <_ZSt4moveIRPFvRKSt9_Any_dataO15CommandFromHostEEONSt16remove_referenceIT_E4typeEOS9_>
 80022e2:	4603      	mov	r3, r0
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80022e8:	6838      	ldr	r0, [r7, #0]
 80022ea:	f7ff ffe7 	bl	80022bc <_ZSt4moveIRPFvRKSt9_Any_dataO15CommandFromHostEEONSt16remove_referenceIT_E4typeEOS9_>
 80022ee:	4603      	mov	r3, r0
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ffde 	bl	80022bc <_ZSt4moveIRPFvRKSt9_Any_dataO15CommandFromHostEEONSt16remove_referenceIT_E4typeEOS9_>
 8002300:	4603      	mov	r3, r0
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	601a      	str	r2, [r3, #0]
    }
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800231c:	68b8      	ldr	r0, [r7, #8]
 800231e:	f7ff ff10 	bl	8002142 <_ZSt4moveIRPFv15CommandFromHostEEONSt16remove_referenceIT_E4typeEOS5_>
 8002322:	4603      	mov	r3, r0
 8002324:	681c      	ldr	r4, [r3, #0]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f7ff fd11 	bl	8001d4e <_ZNSt9_Any_data9_M_accessEv>
 800232c:	4603      	mov	r3, r0
 800232e:	4619      	mov	r1, r3
 8002330:	2004      	movs	r0, #4
 8002332:	f7ff fd00 	bl	8001d36 <_ZnwjPv>
 8002336:	4603      	mov	r3, r0
 8002338:	601c      	str	r4, [r3, #0]
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bd90      	pop	{r4, r7, pc}

08002342 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f857 	bl	80023fe <_ZNKSt9_Any_data9_M_accessIPFv15CommandFromHostEEERKT_v>
 8002350:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f85f 	bl	8002416 <_ZSt11__addressofIKPFv15CommandFromHostEEPT_RS4_>
 8002358:	4603      	mov	r3, r0
 800235a:	bf00      	nop
	}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <_ZSt10__invoke_rIvRPFv15CommandFromHostEJS0_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002364:	b5b0      	push	{r4, r5, r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f85c 	bl	800242c <_ZSt7forwardIRPFv15CommandFromHostEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002374:	4604      	mov	r4, r0
 8002376:	6838      	ldr	r0, [r7, #0]
 8002378:	f7fe fbd3 	bl	8000b22 <_ZSt7forwardI15CommandFromHostEOT_RNSt16remove_referenceIS1_E4typeE>
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	4621      	mov	r1, r4
 8002382:	4628      	mov	r0, r5
 8002384:	f000 f85d 	bl	8002442 <_ZSt13__invoke_implIvRPFv15CommandFromHostEJS0_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bdb0      	pop	{r4, r5, r7, pc}

08002390 <_ZNSt9_Any_data9_M_accessIPPFv15CommandFromHostEEERT_v>:
      _M_access()
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fcd8 	bl	8001d4e <_ZNSt9_Any_data9_M_accessEv>
 800239e:	4603      	mov	r3, r0
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80023a8:	b5b0      	push	{r4, r5, r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	4613      	mov	r3, r2
 80023b4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d016      	beq.n	80023ea <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80023bc:	2b03      	cmp	r3, #3
 80023be:	dc19      	bgt.n	80023f4 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d002      	beq.n	80023ca <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d00a      	beq.n	80023de <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80023c8:	e014      	b.n	80023f4 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f7ff ffe0 	bl	8002390 <_ZNSt9_Any_data9_M_accessIPPFv15CommandFromHostEEERT_v>
 80023d0:	4604      	mov	r4, r0
 80023d2:	68b8      	ldr	r0, [r7, #8]
 80023d4:	f7ff ffb5 	bl	8002342 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE14_M_get_pointerERKSt9_Any_data>
 80023d8:	4603      	mov	r3, r0
 80023da:	6023      	str	r3, [r4, #0]
	      break;
 80023dc:	e00a      	b.n	80023f4 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80023de:	462a      	mov	r2, r5
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f852 	bl	800248c <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80023e8:	e004      	b.n	80023f4 <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80023ea:	4621      	mov	r1, r4
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f866 	bl	80024be <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80023f2:	bf00      	nop
	  return false;
 80023f4:	2300      	movs	r3, #0
	}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bdb0      	pop	{r4, r5, r7, pc}

080023fe <_ZNKSt9_Any_data9_M_accessIPFv15CommandFromHostEEERKT_v>:
      _M_access() const
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fcac 	bl	8001d64 <_ZNKSt9_Any_data9_M_accessEv>
 800240c:	4603      	mov	r3, r0
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <_ZSt11__addressofIKPFv15CommandFromHostEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_ZSt7forwardIRPFv15CommandFromHostEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <_ZSt13__invoke_implIvRPFv15CommandFromHostEJS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002442:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002444:	b08d      	sub	sp, #52	; 0x34
 8002446:	af00      	add	r7, sp, #0
 8002448:	7338      	strb	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800244e:	68b8      	ldr	r0, [r7, #8]
 8002450:	f7ff ffec 	bl	800242c <_ZSt7forwardIRPFv15CommandFromHostEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002454:	4603      	mov	r3, r0
 8002456:	681e      	ldr	r6, [r3, #0]
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7fe fb62 	bl	8000b22 <_ZSt7forwardI15CommandFromHostEOT_RNSt16remove_referenceIS1_E4typeE>
 800245e:	4603      	mov	r3, r0
 8002460:	f107 0414 	add.w	r4, r7, #20
 8002464:	461d      	mov	r5, r3
 8002466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800246a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800246e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4618      	mov	r0, r3
 8002478:	47b0      	blx	r6
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f861 	bl	8000546 <_ZN15CommandFromHostD1Ev>
 8002484:	bf00      	nop
 8002486:	3734      	adds	r7, #52	; 0x34
 8002488:	46bd      	mov	sp, r7
 800248a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800248c <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8002498:	68b8      	ldr	r0, [r7, #8]
 800249a:	f7ff ffb0 	bl	80023fe <_ZNKSt9_Any_data9_M_accessIPFv15CommandFromHostEEERKT_v>
 800249e:	4603      	mov	r3, r0
 80024a0:	681c      	ldr	r4, [r3, #0]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f7ff fc53 	bl	8001d4e <_ZNSt9_Any_data9_M_accessEv>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4619      	mov	r1, r3
 80024ac:	2004      	movs	r0, #4
 80024ae:	f7ff fc42 	bl	8001d36 <_ZnwjPv>
 80024b2:	4603      	mov	r3, r0
 80024b4:	601c      	str	r4, [r3, #0]
	}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}

080024be <_ZNSt14_Function_base13_Base_managerIPFv15CommandFromHostEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f804 	bl	80024d6 <_ZNSt9_Any_data9_M_accessIPFv15CommandFromHostEEERT_v>
	}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_ZNSt9_Any_data9_M_accessIPFv15CommandFromHostEEERT_v>:
      _M_access()
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff fc35 	bl	8001d4e <_ZNSt9_Any_data9_M_accessEv>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <_ZN9RS485CommD1Ev>:
class RS485Comm {
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3328      	adds	r3, #40	; 0x28
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fc5f 	bl	8001dbe <_ZNSt8functionIFv15CommandFromHostEED1Ev>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <_Z41__static_initialization_and_destruction_0ii>:
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d112      	bne.n	8002542 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002522:	4293      	cmp	r3, r2
 8002524:	d10d      	bne.n	8002542 <_Z41__static_initialization_and_destruction_0ii+0x36>
Gripper grip;
 8002526:	480e      	ldr	r0, [pc, #56]	; (8002560 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002528:	f7fe ff3c 	bl	80013a4 <_ZN7GripperC1Ev>
Mlx MagneticSensor_right(MLX_ADDR_right);
 800252c:	2130      	movs	r1, #48	; 0x30
 800252e:	480d      	ldr	r0, [pc, #52]	; (8002564 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002530:	f000 f82e 	bl	8002590 <_ZN3MlxC1Et>
Mlx MagneticSensor_left(MLX_ADDR_left);
 8002534:	2132      	movs	r1, #50	; 0x32
 8002536:	480c      	ldr	r0, [pc, #48]	; (8002568 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002538:	f000 f82a 	bl	8002590 <_ZN3MlxC1Et>
RS485Comm comm;
 800253c:	480b      	ldr	r0, [pc, #44]	; (800256c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800253e:	f7fe f80d 	bl	800055c <_ZN9RS485CommC1Ev>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d107      	bne.n	8002558 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254e:	4293      	cmp	r3, r2
 8002550:	d102      	bne.n	8002558 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8002552:	4806      	ldr	r0, [pc, #24]	; (800256c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002554:	f7ff ffcb 	bl	80024ee <_ZN9RS485CommD1Ev>
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	200000a8 	.word	0x200000a8
 8002564:	200000e8 	.word	0x200000e8
 8002568:	20000110 	.word	0x20000110
 800256c:	20000138 	.word	0x20000138

08002570 <_GLOBAL__sub_I_x>:
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
 8002574:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002578:	2001      	movs	r0, #1
 800257a:	f7ff ffc7 	bl	800250c <_Z41__static_initialization_and_destruction_0ii>
 800257e:	bd80      	pop	{r7, pc}

08002580 <_GLOBAL__sub_D_x>:
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
 8002584:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002588:	2000      	movs	r0, #0
 800258a:	f7ff ffbf 	bl	800250c <_Z41__static_initialization_and_destruction_0ii>
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZN3MlxC1Et>:

extern RS485Comm comm;

uint16_t MLX_ADDR;

Mlx::Mlx(uint16_t addr){
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
	MLX_ADDR=addr;
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <_ZN3MlxC1Et+0x20>)
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	8013      	strh	r3, [r2, #0]
}
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	200001f8 	.word	0x200001f8

080025b4 <_ZN3Mlx8init_mlxEv>:

void Mlx::init_mlx() {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	6078      	str	r0, [r7, #4]

	 x = 0;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
	 y = 0;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	605a      	str	r2, [r3, #4]
	 z = 0;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]

	 uint8_t data1[2];
	 uint8_t data2[2];

	// Start I2C Transmission
	data1[0] = 0x60; // Select Write register command
 80025ce:	2360      	movs	r3, #96	; 0x60
 80025d0:	743b      	strb	r3, [r7, #16]
	data1[1] = 0x00; // Set AH = 0x00, BIST disabled
 80025d2:	2300      	movs	r3, #0
 80025d4:	747b      	strb	r3, [r7, #17]
	data2[0] = 0x5C; // Set AL = 0x5C, Hall plate spinning rate = DEFAULT, GAIN_SEL = 5
 80025d6:	235c      	movs	r3, #92	; 0x5c
 80025d8:	733b      	strb	r3, [r7, #12]
	data2[1] = 0x00; // Select address register, (0x00 << 2)
 80025da:	2300      	movs	r3, #0
 80025dc:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef RES1 = HAL_I2C_Master_Transmit(&hi2c1, MLX_ADDR, data1, 2, 100);
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <_ZN3Mlx8init_mlxEv+0x7c>)
 80025e0:	8819      	ldrh	r1, [r3, #0]
 80025e2:	f107 0210 	add.w	r2, r7, #16
 80025e6:	2364      	movs	r3, #100	; 0x64
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2302      	movs	r3, #2
 80025ec:	4811      	ldr	r0, [pc, #68]	; (8002634 <_ZN3Mlx8init_mlxEv+0x80>)
 80025ee:	f002 fb0b 	bl	8004c08 <HAL_I2C_Master_Transmit>
 80025f2:	4603      	mov	r3, r0
 80025f4:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef RES2 = HAL_I2C_Master_Transmit(&hi2c1, MLX_ADDR, data2, 2, 100);
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <_ZN3Mlx8init_mlxEv+0x7c>)
 80025f8:	8819      	ldrh	r1, [r3, #0]
 80025fa:	f107 020c 	add.w	r2, r7, #12
 80025fe:	2364      	movs	r3, #100	; 0x64
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2302      	movs	r3, #2
 8002604:	480b      	ldr	r0, [pc, #44]	; (8002634 <_ZN3Mlx8init_mlxEv+0x80>)
 8002606:	f002 faff 	bl	8004c08 <HAL_I2C_Master_Transmit>
 800260a:	4603      	mov	r3, r0
 800260c:	75bb      	strb	r3, [r7, #22]

	// Request 1 byte of data
	uint8_t status_byte;
	HAL_StatusTypeDef RES3 = HAL_I2C_Master_Receive(&hi2c1, MLX_ADDR, &status_byte, 1, 100);
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <_ZN3Mlx8init_mlxEv+0x7c>)
 8002610:	8819      	ldrh	r1, [r3, #0]
 8002612:	f107 020b 	add.w	r2, r7, #11
 8002616:	2364      	movs	r3, #100	; 0x64
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2301      	movs	r3, #1
 800261c:	4805      	ldr	r0, [pc, #20]	; (8002634 <_ZN3Mlx8init_mlxEv+0x80>)
 800261e:	f002 fbf1 	bl	8004e04 <HAL_I2C_Master_Receive>
 8002622:	4603      	mov	r3, r0
 8002624:	757b      	strb	r3, [r7, #21]


}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200001f8 	.word	0x200001f8
 8002634:	200002a4 	.word	0x200002a4

08002638 <_ZN3Mlx4readEv>:
void Mlx::read() {
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af02      	add	r7, sp, #8
 800263e:	6078      	str	r0, [r7, #4]
 

	uint8_t command;
	uint8_t data[7];
	// Start I2C Transmission
	command = 0x3E; // Start single measurement mode, ZYX enabled
 8002640:	233e      	movs	r3, #62	; 0x3e
 8002642:	74fb      	strb	r3, [r7, #19]
	HAL_StatusTypeDef RES1  = HAL_I2C_Master_Transmit(&hi2c1, MLX_ADDR, &command, 1, 100);
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <_ZN3Mlx4readEv+0xb4>)
 8002646:	8819      	ldrh	r1, [r3, #0]
 8002648:	f107 0213 	add.w	r2, r7, #19
 800264c:	2364      	movs	r3, #100	; 0x64
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2301      	movs	r3, #1
 8002652:	4827      	ldr	r0, [pc, #156]	; (80026f0 <_ZN3Mlx4readEv+0xb8>)
 8002654:	f002 fad8 	bl	8004c08 <HAL_I2C_Master_Transmit>
 8002658:	4603      	mov	r3, r0
 800265a:	75fb      	strb	r3, [r7, #23]

	// Request 1 byte of data
	uint8_t status_byte;
	HAL_StatusTypeDef RES2 = HAL_I2C_Master_Receive(&hi2c1, MLX_ADDR, &status_byte, 1, 100);
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <_ZN3Mlx4readEv+0xb4>)
 800265e:	8819      	ldrh	r1, [r3, #0]
 8002660:	f107 020b 	add.w	r2, r7, #11
 8002664:	2364      	movs	r3, #100	; 0x64
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2301      	movs	r3, #1
 800266a:	4821      	ldr	r0, [pc, #132]	; (80026f0 <_ZN3Mlx4readEv+0xb8>)
 800266c:	f002 fbca 	bl	8004e04 <HAL_I2C_Master_Receive>
 8002670:	4603      	mov	r3, r0
 8002672:	75bb      	strb	r3, [r7, #22]

	// Start I2C Transmission
	command = 0x4E; // Send read measurement command, ZYX enabled
 8002674:	234e      	movs	r3, #78	; 0x4e
 8002676:	74fb      	strb	r3, [r7, #19]
	HAL_StatusTypeDef RES3 = HAL_I2C_Master_Transmit(&hi2c1, MLX_ADDR, &command, 1, 100);
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <_ZN3Mlx4readEv+0xb4>)
 800267a:	8819      	ldrh	r1, [r3, #0]
 800267c:	f107 0213 	add.w	r2, r7, #19
 8002680:	2364      	movs	r3, #100	; 0x64
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	2301      	movs	r3, #1
 8002686:	481a      	ldr	r0, [pc, #104]	; (80026f0 <_ZN3Mlx4readEv+0xb8>)
 8002688:	f002 fabe 	bl	8004c08 <HAL_I2C_Master_Transmit>
 800268c:	4603      	mov	r3, r0
 800268e:	757b      	strb	r3, [r7, #21]

	// Request 7 bytes of data
	HAL_StatusTypeDef RES4 = HAL_I2C_Master_Receive(&hi2c1, MLX_ADDR, data, 7, 100);
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <_ZN3Mlx4readEv+0xb4>)
 8002692:	8819      	ldrh	r1, [r3, #0]
 8002694:	f107 020c 	add.w	r2, r7, #12
 8002698:	2364      	movs	r3, #100	; 0x64
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2307      	movs	r3, #7
 800269e:	4814      	ldr	r0, [pc, #80]	; (80026f0 <_ZN3Mlx4readEv+0xb8>)
 80026a0:	f002 fbb0 	bl	8004e04 <HAL_I2C_Master_Receive>
 80026a4:	4603      	mov	r3, r0
 80026a6:	753b      	strb	r3, [r7, #20]

	// Read 7 bytes of data
	// status, xMag msb, xMag lsb, yMag msb, yMag lsb, zMag msb, zMag lsb

	// Convert the data
	x = (int16_t)(data[1] << 8 | data[2]);
 80026a8:	7b7b      	ldrb	r3, [r7, #13]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	b21a      	sxth	r2, r3
 80026ae:	7bbb      	ldrb	r3, [r7, #14]
 80026b0:	b21b      	sxth	r3, r3
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	601a      	str	r2, [r3, #0]
	y = (int16_t)(data[3] << 8 | data[4]);
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	7c3b      	ldrb	r3, [r7, #16]
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	4313      	orrs	r3, r2
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	605a      	str	r2, [r3, #4]
	z = (int16_t)(data[5] << 8 | data[6]);
 80026d0:	7c7b      	ldrb	r3, [r7, #17]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	b21a      	sxth	r2, r3
 80026d6:	7cbb      	ldrb	r3, [r7, #18]
 80026d8:	b21b      	sxth	r3, r3
 80026da:	4313      	orrs	r3, r2
 80026dc:	b21b      	sxth	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	bf00      	nop
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200001f8 	.word	0x200001f8
 80026f0:	200002a4 	.word	0x200002a4

080026f4 <_ZN3Mlx10distributeE15CommandFromHost>:
void Mlx::distribute(CommandFromHost i_command){
 80026f4:	b5b0      	push	{r4, r5, r7, lr}
 80026f6:	b094      	sub	sp, #80	; 0x50
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  if(i_command._command==eGetMagField)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	785b      	ldrb	r3, [r3, #1]
 8002702:	2b04      	cmp	r3, #4
 8002704:	d139      	bne.n	800277a <_ZN3Mlx10distributeE15CommandFromHost+0x86>
  {
  read();
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ff96 	bl	8002638 <_ZN3Mlx4readEv>
  int readings[3];
  ResponseToHost res;
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe fe31 	bl	8001378 <_ZN14ResponseToHostC1Ev>
  res._endpoint=eHost;
 8002716:	2301      	movs	r3, #1
 8002718:	733b      	strb	r3, [r7, #12]
  res._response=eData;
 800271a:	2301      	movs	r3, #1
 800271c:	737b      	strb	r3, [r7, #13]
  res._payload_size = sizeof(int) * 3;
 800271e:	230c      	movs	r3, #12
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
  readings[0]=x;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
  readings[1]=y;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
  readings[2]=z;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
  memcpy(res._payload, (char*)readings, sizeof(int) * 3);
 8002734:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002738:	f107 030c 	add.w	r3, r7, #12
 800273c:	3302      	adds	r3, #2
 800273e:	220c      	movs	r2, #12
 8002740:	4618      	mov	r0, r3
 8002742:	f005 f9b9 	bl	8007ab8 <memcpy>
  comm.sendRes(res);
 8002746:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800274a:	f107 050c 	add.w	r5, r7, #12
 800274e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002752:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800275a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800275e:	4619      	mov	r1, r3
 8002760:	4808      	ldr	r0, [pc, #32]	; (8002784 <_ZN3Mlx10distributeE15CommandFromHost+0x90>)
 8002762:	f7fe f831 	bl	80007c8 <_ZN9RS485Comm7sendResE14ResponseToHost>
 8002766:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fe0f 	bl	800138e <_ZN14ResponseToHostD1Ev>
  ResponseToHost res;
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fe0a 	bl	800138e <_ZN14ResponseToHostD1Ev>
  }
}
 800277a:	bf00      	nop
 800277c:	3750      	adds	r7, #80	; 0x50
 800277e:	46bd      	mov	sp, r7
 8002780:	bdb0      	pop	{r4, r5, r7, pc}
 8002782:	bf00      	nop
 8002784:	20000138 	.word	0x20000138

08002788 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800278e:	463b      	mov	r3, r7
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800279a:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <MX_ADC1_Init+0x108>)
 800279c:	4a3d      	ldr	r2, [pc, #244]	; (8002894 <MX_ADC1_Init+0x10c>)
 800279e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80027a0:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <MX_ADC1_Init+0x108>)
 80027a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027a8:	4b39      	ldr	r3, [pc, #228]	; (8002890 <MX_ADC1_Init+0x108>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <MX_ADC1_Init+0x108>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80027b4:	4b36      	ldr	r3, [pc, #216]	; (8002890 <MX_ADC1_Init+0x108>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027ba:	4b35      	ldr	r3, [pc, #212]	; (8002890 <MX_ADC1_Init+0x108>)
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027c2:	4b33      	ldr	r3, [pc, #204]	; (8002890 <MX_ADC1_Init+0x108>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027c8:	4b31      	ldr	r3, [pc, #196]	; (8002890 <MX_ADC1_Init+0x108>)
 80027ca:	4a33      	ldr	r2, [pc, #204]	; (8002898 <MX_ADC1_Init+0x110>)
 80027cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <MX_ADC1_Init+0x108>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80027d4:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <MX_ADC1_Init+0x108>)
 80027d6:	2205      	movs	r2, #5
 80027d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027da:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <MX_ADC1_Init+0x108>)
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027e2:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <MX_ADC1_Init+0x108>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027e8:	4829      	ldr	r0, [pc, #164]	; (8002890 <MX_ADC1_Init+0x108>)
 80027ea:	f000 fde7 	bl	80033bc <HAL_ADC_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80027f4:	f000 fa56 	bl	8002ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027fc:	2301      	movs	r3, #1
 80027fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002804:	463b      	mov	r3, r7
 8002806:	4619      	mov	r1, r3
 8002808:	4821      	ldr	r0, [pc, #132]	; (8002890 <MX_ADC1_Init+0x108>)
 800280a:	f000 ff79 	bl	8003700 <HAL_ADC_ConfigChannel>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002814:	f000 fa46 	bl	8002ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002818:	2301      	movs	r3, #1
 800281a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800281c:	2302      	movs	r3, #2
 800281e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002820:	463b      	mov	r3, r7
 8002822:	4619      	mov	r1, r3
 8002824:	481a      	ldr	r0, [pc, #104]	; (8002890 <MX_ADC1_Init+0x108>)
 8002826:	f000 ff6b 	bl	8003700 <HAL_ADC_ConfigChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002830:	f000 fa38 	bl	8002ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002834:	2302      	movs	r3, #2
 8002836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002838:	2303      	movs	r3, #3
 800283a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800283c:	463b      	mov	r3, r7
 800283e:	4619      	mov	r1, r3
 8002840:	4813      	ldr	r0, [pc, #76]	; (8002890 <MX_ADC1_Init+0x108>)
 8002842:	f000 ff5d 	bl	8003700 <HAL_ADC_ConfigChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800284c:	f000 fa2a 	bl	8002ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002850:	2303      	movs	r3, #3
 8002852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002854:	2304      	movs	r3, #4
 8002856:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002858:	463b      	mov	r3, r7
 800285a:	4619      	mov	r1, r3
 800285c:	480c      	ldr	r0, [pc, #48]	; (8002890 <MX_ADC1_Init+0x108>)
 800285e:	f000 ff4f 	bl	8003700 <HAL_ADC_ConfigChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002868:	f000 fa1c 	bl	8002ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <MX_ADC1_Init+0x114>)
 800286e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002870:	2305      	movs	r3, #5
 8002872:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002874:	463b      	mov	r3, r7
 8002876:	4619      	mov	r1, r3
 8002878:	4805      	ldr	r0, [pc, #20]	; (8002890 <MX_ADC1_Init+0x108>)
 800287a:	f000 ff41 	bl	8003700 <HAL_ADC_ConfigChannel>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002884:	f000 fa0e 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	200001fc 	.word	0x200001fc
 8002894:	40012000 	.word	0x40012000
 8002898:	0f000001 	.word	0x0f000001
 800289c:	10000012 	.word	0x10000012

080028a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2f      	ldr	r2, [pc, #188]	; (800297c <HAL_ADC_MspInit+0xdc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d157      	bne.n	8002972 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <HAL_ADC_MspInit+0xe0>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4a2d      	ldr	r2, [pc, #180]	; (8002980 <HAL_ADC_MspInit+0xe0>)
 80028cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44
 80028d2:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_ADC_MspInit+0xe0>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_ADC_MspInit+0xe0>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a26      	ldr	r2, [pc, #152]	; (8002980 <HAL_ADC_MspInit+0xe0>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_ADC_MspInit+0xe0>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80028fa:	230f      	movs	r3, #15
 80028fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028fe:	2303      	movs	r3, #3
 8002900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	481d      	ldr	r0, [pc, #116]	; (8002984 <HAL_ADC_MspInit+0xe4>)
 800290e:	f001 fe99 	bl	8004644 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 8002914:	4a1d      	ldr	r2, [pc, #116]	; (800298c <HAL_ADC_MspInit+0xec>)
 8002916:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 800291a:	2200      	movs	r2, #0
 800291c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 800292c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002930:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 8002934:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002938:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 800293c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002940:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 8002944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002948:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800294a:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 8002952:	2200      	movs	r2, #0
 8002954:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002956:	480c      	ldr	r0, [pc, #48]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 8002958:	f001 fa94 	bl	8003e84 <HAL_DMA_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002962:	f000 f99f 	bl	8002ca4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a07      	ldr	r2, [pc, #28]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 800296a:	639a      	str	r2, [r3, #56]	; 0x38
 800296c:	4a06      	ldr	r2, [pc, #24]	; (8002988 <HAL_ADC_MspInit+0xe8>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002972:	bf00      	nop
 8002974:	3728      	adds	r7, #40	; 0x28
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40012000 	.word	0x40012000
 8002980:	40023800 	.word	0x40023800
 8002984:	40020000 	.word	0x40020000
 8002988:	20000244 	.word	0x20000244
 800298c:	40026410 	.word	0x40026410

08002990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <MX_DMA_Init+0x4c>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <MX_DMA_Init+0x4c>)
 80029a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <MX_DMA_Init+0x4c>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2101      	movs	r1, #1
 80029b6:	2038      	movs	r0, #56	; 0x38
 80029b8:	f001 fa2d 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80029bc:	2038      	movs	r0, #56	; 0x38
 80029be:	f001 fa46 	bl	8003e4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	203a      	movs	r0, #58	; 0x3a
 80029c8:	f001 fa25 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80029cc:	203a      	movs	r0, #58	; 0x3a
 80029ce:	f001 fa3e 	bl	8003e4e <HAL_NVIC_EnableIRQ>

}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800

080029e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e6:	f107 030c 	add.w	r3, r7, #12
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <MX_GPIO_Init+0xc8>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <MX_GPIO_Init+0xc8>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <MX_GPIO_Init+0xc8>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <MX_GPIO_Init+0xc8>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a23      	ldr	r2, [pc, #140]	; (8002aa8 <MX_GPIO_Init+0xc8>)
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <MX_GPIO_Init+0xc8>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	607b      	str	r3, [r7, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <MX_GPIO_Init+0xc8>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <MX_GPIO_Init+0xc8>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <MX_GPIO_Init+0xc8>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRV_PMODE_Pin|DRV_SLEEP_Pin|rs485_re_Pin, GPIO_PIN_RESET);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002a50:	4816      	ldr	r0, [pc, #88]	; (8002aac <MX_GPIO_Init+0xcc>)
 8002a52:	f001 ff7b 	bl	800494c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rs485_de_GPIO_Port, rs485_de_Pin, GPIO_PIN_RESET);
 8002a56:	2200      	movs	r2, #0
 8002a58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a5c:	4814      	ldr	r0, [pc, #80]	; (8002ab0 <MX_GPIO_Init+0xd0>)
 8002a5e:	f001 ff75 	bl	800494c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DRV_PMODE_Pin|DRV_SLEEP_Pin|rs485_re_Pin;
 8002a62:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8002a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a74:	f107 030c 	add.w	r3, r7, #12
 8002a78:	4619      	mov	r1, r3
 8002a7a:	480c      	ldr	r0, [pc, #48]	; (8002aac <MX_GPIO_Init+0xcc>)
 8002a7c:	f001 fde2 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = rs485_de_Pin;
 8002a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a86:	2301      	movs	r3, #1
 8002a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(rs485_de_GPIO_Port, &GPIO_InitStruct);
 8002a92:	f107 030c 	add.w	r3, r7, #12
 8002a96:	4619      	mov	r1, r3
 8002a98:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <MX_GPIO_Init+0xd0>)
 8002a9a:	f001 fdd3 	bl	8004644 <HAL_GPIO_Init>

}
 8002a9e:	bf00      	nop
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40020800 	.word	0x40020800

08002ab4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <MX_I2C1_Init+0x50>)
 8002aba:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <MX_I2C1_Init+0x54>)
 8002abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002abe:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <MX_I2C1_Init+0x50>)
 8002ac0:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <MX_I2C1_Init+0x58>)
 8002ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <MX_I2C1_Init+0x50>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002aca:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <MX_I2C1_Init+0x50>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <MX_I2C1_Init+0x50>)
 8002ad2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ad6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <MX_I2C1_Init+0x50>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <MX_I2C1_Init+0x50>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ae4:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <MX_I2C1_Init+0x50>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <MX_I2C1_Init+0x50>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002af0:	4804      	ldr	r0, [pc, #16]	; (8002b04 <MX_I2C1_Init+0x50>)
 8002af2:	f001 ff45 	bl	8004980 <HAL_I2C_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002afc:	f000 f8d2 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200002a4 	.word	0x200002a4
 8002b08:	40005400 	.word	0x40005400
 8002b0c:	000186a0 	.word	0x000186a0

08002b10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_I2C_MspInit+0x84>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d12b      	bne.n	8002b8a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_I2C_MspInit+0x88>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <HAL_I2C_MspInit+0x88>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_I2C_MspInit+0x88>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b4e:	23c0      	movs	r3, #192	; 0xc0
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b52:	2312      	movs	r3, #18
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b5e:	2304      	movs	r3, #4
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	480c      	ldr	r0, [pc, #48]	; (8002b9c <HAL_I2C_MspInit+0x8c>)
 8002b6a:	f001 fd6b 	bl	8004644 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_I2C_MspInit+0x88>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <HAL_I2C_MspInit+0x88>)
 8002b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_I2C_MspInit+0x88>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	3728      	adds	r7, #40	; 0x28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40005400 	.word	0x40005400
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40020400 	.word	0x40020400

08002ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ba4:	f000 fb74 	bl	8003290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ba8:	f000 f814 	bl	8002bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bac:	f7ff ff18 	bl	80029e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bb0:	f7ff feee 	bl	8002990 <MX_DMA_Init>
  MX_I2C1_Init();
 8002bb4:	f7ff ff7e 	bl	8002ab4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002bb8:	f7ff fde6 	bl	8002788 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002bbc:	f000 f948 	bl	8002e50 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002bc0:	f000 f996 	bl	8002ef0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002bc4:	f000 fa96 	bl	80030f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  loop_init();
 8002bc8:	f7ff f906 	bl	8001dd8 <loop_init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  loop();
 8002bcc:	f7ff f930 	bl	8001e30 <loop>
 8002bd0:	e7fc      	b.n	8002bcc <main+0x2c>
	...

08002bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b094      	sub	sp, #80	; 0x50
 8002bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bda:	f107 0320 	add.w	r3, r7, #32
 8002bde:	2230      	movs	r2, #48	; 0x30
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f004 ff90 	bl	8007b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <SystemClock_Config+0xc8>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	4a26      	ldr	r2, [pc, #152]	; (8002c9c <SystemClock_Config+0xc8>)
 8002c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	; 0x40
 8002c08:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <SystemClock_Config+0xc8>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c14:	2300      	movs	r3, #0
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <SystemClock_Config+0xcc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <SystemClock_Config+0xcc>)
 8002c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <SystemClock_Config+0xcc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c30:	2302      	movs	r3, #2
 8002c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c34:	2301      	movs	r3, #1
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c38:	2310      	movs	r3, #16
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c40:	2300      	movs	r3, #0
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c44:	2308      	movs	r3, #8
 8002c46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002c48:	2364      	movs	r3, #100	; 0x64
 8002c4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c50:	2304      	movs	r3, #4
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c54:	f107 0320 	add.w	r3, r7, #32
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f002 fe27 	bl	80058ac <HAL_RCC_OscConfig>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c64:	f000 f81e 	bl	8002ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c68:	230f      	movs	r3, #15
 8002c6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	2103      	movs	r1, #3
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 f889 	bl	8005d9c <HAL_RCC_ClockConfig>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002c90:	f000 f808 	bl	8002ca4 <Error_Handler>
  }
}
 8002c94:	bf00      	nop
 8002c96:	3750      	adds	r7, #80	; 0x50
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40007000 	.word	0x40007000

08002ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca8:	b672      	cpsid	i
}
 8002caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cac:	e7fe      	b.n	8002cac <Error_Handler+0x8>
	...

08002cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_MspInit+0x4c>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <HAL_MspInit+0x4c>)
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <HAL_MspInit+0x4c>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_MspInit+0x4c>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <HAL_MspInit+0x4c>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_MspInit+0x4c>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800

08002d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d04:	e7fe      	b.n	8002d04 <NMI_Handler+0x4>

08002d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d0a:	e7fe      	b.n	8002d0a <HardFault_Handler+0x4>

08002d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d10:	e7fe      	b.n	8002d10 <MemManage_Handler+0x4>

08002d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d16:	e7fe      	b.n	8002d16 <BusFault_Handler+0x4>

08002d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <UsageFault_Handler+0x4>

08002d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d4c:	f000 faf2 	bl	8003334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <DMA2_Stream0_IRQHandler+0x10>)
 8002d5a:	f001 fa09 	bl	8004170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000244 	.word	0x20000244

08002d68 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <DMA2_Stream2_IRQHandler+0x10>)
 8002d6e:	f001 f9ff 	bl	8004170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200003d0 	.word	0x200003d0

08002d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return 1;
 8002d80:	2301      	movs	r3, #1
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <_kill>:

int _kill(int pid, int sig)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d96:	f004 fe55 	bl	8007a44 <__errno>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2216      	movs	r2, #22
 8002d9e:	601a      	str	r2, [r3, #0]
  return -1;
 8002da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <_exit>:

void _exit (int status)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ffe7 	bl	8002d8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dbe:	e7fe      	b.n	8002dbe <_exit+0x12>

08002dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dc8:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <_sbrk+0x5c>)
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <_sbrk+0x60>)
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dd4:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <_sbrk+0x64>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d102      	bne.n	8002de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <_sbrk+0x64>)
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <_sbrk+0x68>)
 8002de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <_sbrk+0x64>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d207      	bcs.n	8002e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002df0:	f004 fe28 	bl	8007a44 <__errno>
 8002df4:	4603      	mov	r3, r0
 8002df6:	220c      	movs	r2, #12
 8002df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dfe:	e009      	b.n	8002e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <_sbrk+0x64>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <_sbrk+0x64>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <_sbrk+0x64>)
 8002e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e12:	68fb      	ldr	r3, [r7, #12]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20020000 	.word	0x20020000
 8002e20:	00000400 	.word	0x00000400
 8002e24:	200002f8 	.word	0x200002f8
 8002e28:	20000448 	.word	0x20000448

08002e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <SystemInit+0x20>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <SystemInit+0x20>)
 8002e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e56:	f107 0308 	add.w	r3, r7, #8
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e64:	463b      	mov	r3, r7
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <MX_TIM1_Init+0x98>)
 8002e6e:	4a1f      	ldr	r2, [pc, #124]	; (8002eec <MX_TIM1_Init+0x9c>)
 8002e70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8002e72:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <MX_TIM1_Init+0x98>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e78:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <MX_TIM1_Init+0x98>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <MX_TIM1_Init+0x98>)
 8002e80:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002e84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e86:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <MX_TIM1_Init+0x98>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e8c:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <MX_TIM1_Init+0x98>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <MX_TIM1_Init+0x98>)
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e98:	4813      	ldr	r0, [pc, #76]	; (8002ee8 <MX_TIM1_Init+0x98>)
 8002e9a:	f003 f95f 	bl	800615c <HAL_TIM_Base_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002ea4:	f7ff fefe 	bl	8002ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002eae:	f107 0308 	add.w	r3, r7, #8
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <MX_TIM1_Init+0x98>)
 8002eb6:	f003 fb61 	bl	800657c <HAL_TIM_ConfigClockSource>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002ec0:	f7ff fef0 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ecc:	463b      	mov	r3, r7
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4805      	ldr	r0, [pc, #20]	; (8002ee8 <MX_TIM1_Init+0x98>)
 8002ed2:	f003 fee7 	bl	8006ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002edc:	f7ff fee2 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ee0:	bf00      	nop
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200002fc 	.word	0x200002fc
 8002eec:	40010000 	.word	0x40010000

08002ef0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef6:	f107 0320 	add.w	r3, r7, #32
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
 8002f0c:	611a      	str	r2, [r3, #16]
 8002f0e:	615a      	str	r2, [r3, #20]
 8002f10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f12:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <MX_TIM3_Init+0xc0>)
 8002f14:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <MX_TIM3_Init+0xc4>)
 8002f16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <MX_TIM3_Init+0xc0>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <MX_TIM3_Init+0xc0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2499;
 8002f24:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <MX_TIM3_Init+0xc0>)
 8002f26:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002f2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <MX_TIM3_Init+0xc0>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f32:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <MX_TIM3_Init+0xc0>)
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f38:	481d      	ldr	r0, [pc, #116]	; (8002fb0 <MX_TIM3_Init+0xc0>)
 8002f3a:	f003 f95e 	bl	80061fa <HAL_TIM_PWM_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002f44:	f7ff feae 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f50:	f107 0320 	add.w	r3, r7, #32
 8002f54:	4619      	mov	r1, r3
 8002f56:	4816      	ldr	r0, [pc, #88]	; (8002fb0 <MX_TIM3_Init+0xc0>)
 8002f58:	f003 fea4 	bl	8006ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002f62:	f7ff fe9f 	bl	8002ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f66:	2360      	movs	r3, #96	; 0x60
 8002f68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	2204      	movs	r2, #4
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	480c      	ldr	r0, [pc, #48]	; (8002fb0 <MX_TIM3_Init+0xc0>)
 8002f7e:	f003 fa3b 	bl	80063f8 <HAL_TIM_PWM_ConfigChannel>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002f88:	f7ff fe8c 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	2208      	movs	r2, #8
 8002f90:	4619      	mov	r1, r3
 8002f92:	4807      	ldr	r0, [pc, #28]	; (8002fb0 <MX_TIM3_Init+0xc0>)
 8002f94:	f003 fa30 	bl	80063f8 <HAL_TIM_PWM_ConfigChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f9e:	f7ff fe81 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002fa2:	4803      	ldr	r0, [pc, #12]	; (8002fb0 <MX_TIM3_Init+0xc0>)
 8002fa4:	f000 f84c 	bl	8003040 <HAL_TIM_MspPostInit>

}
 8002fa8:	bf00      	nop
 8002faa:	3728      	adds	r7, #40	; 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000344 	.word	0x20000344
 8002fb4:	40000400 	.word	0x40000400

08002fb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <HAL_TIM_Base_MspInit+0x3c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d10d      	bne.n	8002fe6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_TIM_Base_MspInit+0x40>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <HAL_TIM_Base_MspInit+0x40>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <HAL_TIM_Base_MspInit+0x40>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40010000 	.word	0x40010000
 8002ff8:	40023800 	.word	0x40023800

08002ffc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <HAL_TIM_PWM_MspInit+0x3c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d10d      	bne.n	800302a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_TIM_PWM_MspInit+0x40>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a09      	ldr	r2, [pc, #36]	; (800303c <HAL_TIM_PWM_MspInit+0x40>)
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <HAL_TIM_PWM_MspInit+0x40>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40000400 	.word	0x40000400
 800303c:	40023800 	.word	0x40023800

08003040 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <HAL_TIM_MspPostInit+0xa4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d13b      	bne.n	80030da <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_TIM_MspPostInit+0xa8>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <HAL_TIM_MspPostInit+0xa8>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_TIM_MspPostInit+0xa8>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_TIM_MspPostInit+0xa8>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a18      	ldr	r2, [pc, #96]	; (80030e8 <HAL_TIM_MspPostInit+0xa8>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <HAL_TIM_MspPostInit+0xa8>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = DRV_IN1_Pin;
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	2300      	movs	r3, #0
 80030a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030aa:	2302      	movs	r3, #2
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DRV_IN1_GPIO_Port, &GPIO_InitStruct);
 80030ae:	f107 0314 	add.w	r3, r7, #20
 80030b2:	4619      	mov	r1, r3
 80030b4:	480d      	ldr	r0, [pc, #52]	; (80030ec <HAL_TIM_MspPostInit+0xac>)
 80030b6:	f001 fac5 	bl	8004644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DRV_IN2_Pin;
 80030ba:	2301      	movs	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030ca:	2302      	movs	r3, #2
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DRV_IN2_GPIO_Port, &GPIO_InitStruct);
 80030ce:	f107 0314 	add.w	r3, r7, #20
 80030d2:	4619      	mov	r1, r3
 80030d4:	4806      	ldr	r0, [pc, #24]	; (80030f0 <HAL_TIM_MspPostInit+0xb0>)
 80030d6:	f001 fab5 	bl	8004644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80030da:	bf00      	nop
 80030dc:	3728      	adds	r7, #40	; 0x28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40020400 	.word	0x40020400

080030f4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030f8:	4b10      	ldr	r3, [pc, #64]	; (800313c <MX_USART1_UART_Init+0x48>)
 80030fa:	4a11      	ldr	r2, [pc, #68]	; (8003140 <MX_USART1_UART_Init+0x4c>)
 80030fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80030fe:	4b0f      	ldr	r3, [pc, #60]	; (800313c <MX_USART1_UART_Init+0x48>)
 8003100:	4a10      	ldr	r2, [pc, #64]	; (8003144 <MX_USART1_UART_Init+0x50>)
 8003102:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <MX_USART1_UART_Init+0x48>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800310a:	4b0c      	ldr	r3, [pc, #48]	; (800313c <MX_USART1_UART_Init+0x48>)
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <MX_USART1_UART_Init+0x48>)
 8003112:	2200      	movs	r2, #0
 8003114:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <MX_USART1_UART_Init+0x48>)
 8003118:	220c      	movs	r2, #12
 800311a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800311c:	4b07      	ldr	r3, [pc, #28]	; (800313c <MX_USART1_UART_Init+0x48>)
 800311e:	2200      	movs	r2, #0
 8003120:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <MX_USART1_UART_Init+0x48>)
 8003124:	2200      	movs	r2, #0
 8003126:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003128:	4804      	ldr	r0, [pc, #16]	; (800313c <MX_USART1_UART_Init+0x48>)
 800312a:	f003 fe29 	bl	8006d80 <HAL_UART_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8003134:	f7ff fdb6 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003138:	bf00      	nop
 800313a:	bd80      	pop	{r7, pc}
 800313c:	2000038c 	.word	0x2000038c
 8003140:	40011000 	.word	0x40011000
 8003144:	000f4240 	.word	0x000f4240

08003148 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a30      	ldr	r2, [pc, #192]	; (8003228 <HAL_UART_MspInit+0xe0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d15a      	bne.n	8003220 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	4b2f      	ldr	r3, [pc, #188]	; (800322c <HAL_UART_MspInit+0xe4>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	4a2e      	ldr	r2, [pc, #184]	; (800322c <HAL_UART_MspInit+0xe4>)
 8003174:	f043 0310 	orr.w	r3, r3, #16
 8003178:	6453      	str	r3, [r2, #68]	; 0x44
 800317a:	4b2c      	ldr	r3, [pc, #176]	; (800322c <HAL_UART_MspInit+0xe4>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <HAL_UART_MspInit+0xe4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a27      	ldr	r2, [pc, #156]	; (800322c <HAL_UART_MspInit+0xe4>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_UART_MspInit+0xe4>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = rs485_tx_Pin|rs485_rx_Pin;
 80031a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031b4:	2307      	movs	r3, #7
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4619      	mov	r1, r3
 80031be:	481c      	ldr	r0, [pc, #112]	; (8003230 <HAL_UART_MspInit+0xe8>)
 80031c0:	f001 fa40 	bl	8004644 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80031c4:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_UART_MspInit+0xec>)
 80031c6:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <HAL_UART_MspInit+0xf0>)
 80031c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80031ca:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <HAL_UART_MspInit+0xec>)
 80031cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_UART_MspInit+0xec>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d8:	4b16      	ldr	r3, [pc, #88]	; (8003234 <HAL_UART_MspInit+0xec>)
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <HAL_UART_MspInit+0xec>)
 80031e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HAL_UART_MspInit+0xec>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_UART_MspInit+0xec>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_UART_MspInit+0xec>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031f8:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <HAL_UART_MspInit+0xec>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_UART_MspInit+0xec>)
 8003200:	2200      	movs	r2, #0
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003204:	480b      	ldr	r0, [pc, #44]	; (8003234 <HAL_UART_MspInit+0xec>)
 8003206:	f000 fe3d 	bl	8003e84 <HAL_DMA_Init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003210:	f7ff fd48 	bl	8002ca4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a07      	ldr	r2, [pc, #28]	; (8003234 <HAL_UART_MspInit+0xec>)
 8003218:	639a      	str	r2, [r3, #56]	; 0x38
 800321a:	4a06      	ldr	r2, [pc, #24]	; (8003234 <HAL_UART_MspInit+0xec>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003220:	bf00      	nop
 8003222:	3728      	adds	r7, #40	; 0x28
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40011000 	.word	0x40011000
 800322c:	40023800 	.word	0x40023800
 8003230:	40020000 	.word	0x40020000
 8003234:	200003d0 	.word	0x200003d0
 8003238:	40026440 	.word	0x40026440

0800323c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800323c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003274 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003240:	480d      	ldr	r0, [pc, #52]	; (8003278 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003242:	490e      	ldr	r1, [pc, #56]	; (800327c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003244:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003248:	e002      	b.n	8003250 <LoopCopyDataInit>

0800324a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800324a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800324c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800324e:	3304      	adds	r3, #4

08003250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003254:	d3f9      	bcc.n	800324a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003256:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003258:	4c0b      	ldr	r4, [pc, #44]	; (8003288 <LoopFillZerobss+0x26>)
  movs r3, #0
 800325a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800325c:	e001      	b.n	8003262 <LoopFillZerobss>

0800325e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800325e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003260:	3204      	adds	r2, #4

08003262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003264:	d3fb      	bcc.n	800325e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003266:	f7ff fde1 	bl	8002e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800326a:	f004 fbf1 	bl	8007a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800326e:	f7ff fc97 	bl	8002ba0 <main>
  bx  lr    
 8003272:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800327c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003280:	08007e20 	.word	0x08007e20
  ldr r2, =_sbss
 8003284:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003288:	20000448 	.word	0x20000448

0800328c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800328c:	e7fe      	b.n	800328c <ADC_IRQHandler>
	...

08003290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <HAL_Init+0x40>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_Init+0x40>)
 800329a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800329e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_Init+0x40>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <HAL_Init+0x40>)
 80032a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <HAL_Init+0x40>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <HAL_Init+0x40>)
 80032b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032b8:	2003      	movs	r0, #3
 80032ba:	f000 fda1 	bl	8003e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032be:	200f      	movs	r0, #15
 80032c0:	f000 f808 	bl	80032d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032c4:	f7ff fcf4 	bl	8002cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023c00 	.word	0x40023c00

080032d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032dc:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_InitTick+0x54>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_InitTick+0x58>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	4619      	mov	r1, r3
 80032e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fdb9 	bl	8003e6a <HAL_SYSTICK_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e00e      	b.n	8003320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b0f      	cmp	r3, #15
 8003306:	d80a      	bhi.n	800331e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003308:	2200      	movs	r2, #0
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003310:	f000 fd81 	bl	8003e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003314:	4a06      	ldr	r2, [pc, #24]	; (8003330 <HAL_InitTick+0x5c>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	e000      	b.n	8003320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20000004 	.word	0x20000004
 800332c:	2000000c 	.word	0x2000000c
 8003330:	20000008 	.word	0x20000008

08003334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_IncTick+0x20>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_IncTick+0x24>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4413      	add	r3, r2
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_IncTick+0x24>)
 8003346:	6013      	str	r3, [r2, #0]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	2000000c 	.word	0x2000000c
 8003358:	20000430 	.word	0x20000430

0800335c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return uwTick;
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <HAL_GetTick+0x14>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000430 	.word	0x20000430

08003374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800337c:	f7ff ffee 	bl	800335c <HAL_GetTick>
 8003380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800338c:	d005      	beq.n	800339a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_Delay+0x44>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800339a:	bf00      	nop
 800339c:	f7ff ffde 	bl	800335c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d8f7      	bhi.n	800339c <HAL_Delay+0x28>
  {
  }
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2000000c 	.word	0x2000000c

080033bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e033      	b.n	800343a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff fa60 	bl	80028a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d118      	bne.n	800342c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003402:	f023 0302 	bic.w	r3, r3, #2
 8003406:	f043 0202 	orr.w	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 faa8 	bl	8003964 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f023 0303 	bic.w	r3, r3, #3
 8003422:	f043 0201 	orr.w	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
 800342a:	e001      	b.n	8003430 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_ADC_Start_DMA+0x1e>
 800345e:	2302      	movs	r3, #2
 8003460:	e0ce      	b.n	8003600 <HAL_ADC_Start_DMA+0x1bc>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d018      	beq.n	80034aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003488:	4b5f      	ldr	r3, [pc, #380]	; (8003608 <HAL_ADC_Start_DMA+0x1c4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5f      	ldr	r2, [pc, #380]	; (800360c <HAL_ADC_Start_DMA+0x1c8>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	0c9a      	lsrs	r2, r3, #18
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800349c:	e002      	b.n	80034a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f9      	bne.n	800349e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b8:	d107      	bne.n	80034ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	f040 8086 	bne.w	80035e6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d007      	beq.n	800350c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003504:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003518:	d106      	bne.n	8003528 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f023 0206 	bic.w	r2, r3, #6
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
 8003526:	e002      	b.n	800352e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003536:	4b36      	ldr	r3, [pc, #216]	; (8003610 <HAL_ADC_Start_DMA+0x1cc>)
 8003538:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	4a35      	ldr	r2, [pc, #212]	; (8003614 <HAL_ADC_Start_DMA+0x1d0>)
 8003540:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	4a34      	ldr	r2, [pc, #208]	; (8003618 <HAL_ADC_Start_DMA+0x1d4>)
 8003548:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	4a33      	ldr	r2, [pc, #204]	; (800361c <HAL_ADC_Start_DMA+0x1d8>)
 8003550:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800355a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800356a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800357a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	334c      	adds	r3, #76	; 0x4c
 8003586:	4619      	mov	r1, r3
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f000 fd28 	bl	8003fe0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10f      	bne.n	80035bc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d129      	bne.n	80035fe <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	e020      	b.n	80035fe <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a17      	ldr	r2, [pc, #92]	; (8003620 <HAL_ADC_Start_DMA+0x1dc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d11b      	bne.n	80035fe <HAL_ADC_Start_DMA+0x1ba>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d114      	bne.n	80035fe <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	e00b      	b.n	80035fe <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f043 0210 	orr.w	r2, r3, #16
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f043 0201 	orr.w	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000004 	.word	0x20000004
 800360c:	431bde83 	.word	0x431bde83
 8003610:	40012300 	.word	0x40012300
 8003614:	08003b5d 	.word	0x08003b5d
 8003618:	08003c17 	.word	0x08003c17
 800361c:	08003c33 	.word	0x08003c33
 8003620:	40012000 	.word	0x40012000

08003624 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_ADC_Stop_DMA+0x1a>
 800363a:	2302      	movs	r3, #2
 800363c:	e048      	b.n	80036d0 <HAL_ADC_Stop_DMA+0xac>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d130      	bne.n	80036c6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003672:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d10f      	bne.n	80036a2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fd02 	bl	8004090 <HAL_DMA_Abort>
 800368c:	4603      	mov	r3, r0
 800368e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80036b0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	f043 0201 	orr.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_ADC_ConfigChannel+0x1c>
 8003718:	2302      	movs	r3, #2
 800371a:	e113      	b.n	8003944 <HAL_ADC_ConfigChannel+0x244>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b09      	cmp	r3, #9
 800372a:	d925      	bls.n	8003778 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68d9      	ldr	r1, [r3, #12]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	4613      	mov	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	4413      	add	r3, r2
 8003740:	3b1e      	subs	r3, #30
 8003742:	2207      	movs	r2, #7
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43da      	mvns	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	400a      	ands	r2, r1
 8003750:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68d9      	ldr	r1, [r3, #12]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	b29b      	uxth	r3, r3
 8003762:	4618      	mov	r0, r3
 8003764:	4603      	mov	r3, r0
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4403      	add	r3, r0
 800376a:	3b1e      	subs	r3, #30
 800376c:	409a      	lsls	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	e022      	b.n	80037be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6919      	ldr	r1, [r3, #16]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	2207      	movs	r2, #7
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43da      	mvns	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	400a      	ands	r2, r1
 800379a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6919      	ldr	r1, [r3, #16]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	4618      	mov	r0, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4403      	add	r3, r0
 80037b4:	409a      	lsls	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d824      	bhi.n	8003810 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	3b05      	subs	r3, #5
 80037d8:	221f      	movs	r2, #31
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43da      	mvns	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	400a      	ands	r2, r1
 80037e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	4618      	mov	r0, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	3b05      	subs	r3, #5
 8003802:	fa00 f203 	lsl.w	r2, r0, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	635a      	str	r2, [r3, #52]	; 0x34
 800380e:	e04c      	b.n	80038aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b0c      	cmp	r3, #12
 8003816:	d824      	bhi.n	8003862 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	3b23      	subs	r3, #35	; 0x23
 800382a:	221f      	movs	r2, #31
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43da      	mvns	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	400a      	ands	r2, r1
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	4618      	mov	r0, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	3b23      	subs	r3, #35	; 0x23
 8003854:	fa00 f203 	lsl.w	r2, r0, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
 8003860:	e023      	b.n	80038aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	3b41      	subs	r3, #65	; 0x41
 8003874:	221f      	movs	r2, #31
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43da      	mvns	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	400a      	ands	r2, r1
 8003882:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	4618      	mov	r0, r3
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	3b41      	subs	r3, #65	; 0x41
 800389e:	fa00 f203 	lsl.w	r2, r0, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <HAL_ADC_ConfigChannel+0x250>)
 80038ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a28      	ldr	r2, [pc, #160]	; (8003954 <HAL_ADC_ConfigChannel+0x254>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10f      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x1d8>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b12      	cmp	r3, #18
 80038be:	d10b      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_ADC_ConfigChannel+0x254>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d12b      	bne.n	800393a <HAL_ADC_ConfigChannel+0x23a>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <HAL_ADC_ConfigChannel+0x258>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d003      	beq.n	80038f4 <HAL_ADC_ConfigChannel+0x1f4>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b11      	cmp	r3, #17
 80038f2:	d122      	bne.n	800393a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a11      	ldr	r2, [pc, #68]	; (8003958 <HAL_ADC_ConfigChannel+0x258>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d111      	bne.n	800393a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003916:	4b11      	ldr	r3, [pc, #68]	; (800395c <HAL_ADC_ConfigChannel+0x25c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a11      	ldr	r2, [pc, #68]	; (8003960 <HAL_ADC_ConfigChannel+0x260>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	0c9a      	lsrs	r2, r3, #18
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800392c:	e002      	b.n	8003934 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3b01      	subs	r3, #1
 8003932:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f9      	bne.n	800392e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	40012300 	.word	0x40012300
 8003954:	40012000 	.word	0x40012000
 8003958:	10000012 	.word	0x10000012
 800395c:	20000004 	.word	0x20000004
 8003960:	431bde83 	.word	0x431bde83

08003964 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800396c:	4b79      	ldr	r3, [pc, #484]	; (8003b54 <ADC_Init+0x1f0>)
 800396e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003998:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	021a      	lsls	r2, r3, #8
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6899      	ldr	r1, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	4a58      	ldr	r2, [pc, #352]	; (8003b58 <ADC_Init+0x1f4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d022      	beq.n	8003a42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6899      	ldr	r1, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6899      	ldr	r1, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	e00f      	b.n	8003a62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0202 	bic.w	r2, r2, #2
 8003a70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6899      	ldr	r1, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	7e1b      	ldrb	r3, [r3, #24]
 8003a7c:	005a      	lsls	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01b      	beq.n	8003ac8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003aae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	3b01      	subs	r3, #1
 8003abc:	035a      	lsls	r2, r3, #13
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	e007      	b.n	8003ad8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	051a      	lsls	r2, r3, #20
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6899      	ldr	r1, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b1a:	025a      	lsls	r2, r3, #9
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6899      	ldr	r1, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	029a      	lsls	r2, r3, #10
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	40012300 	.word	0x40012300
 8003b58:	0f000001 	.word	0x0f000001

08003b5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d13c      	bne.n	8003bf0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d12b      	bne.n	8003be8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d127      	bne.n	8003be8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d006      	beq.n	8003bb4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d119      	bne.n	8003be8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0220 	bic.w	r2, r2, #32
 8003bc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d105      	bne.n	8003be8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7fe f97f 	bl	8001eec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bee:	e00e      	b.n	8003c0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f7ff fd75 	bl	80036ec <HAL_ADC_ErrorCallback>
}
 8003c02:	e004      	b.n	8003c0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff fd57 	bl	80036d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2240      	movs	r2, #64	; 0x40
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f043 0204 	orr.w	r2, r3, #4
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff fd4a 	bl	80036ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c58:	bf00      	nop
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c92:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	60d3      	str	r3, [r2, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	f003 0307 	and.w	r3, r3, #7
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	db0b      	blt.n	8003cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	f003 021f 	and.w	r2, r3, #31
 8003cdc:	4907      	ldr	r1, [pc, #28]	; (8003cfc <__NVIC_EnableIRQ+0x38>)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000e100 	.word	0xe000e100

08003d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	6039      	str	r1, [r7, #0]
 8003d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	db0a      	blt.n	8003d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	490c      	ldr	r1, [pc, #48]	; (8003d4c <__NVIC_SetPriority+0x4c>)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	0112      	lsls	r2, r2, #4
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	440b      	add	r3, r1
 8003d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d28:	e00a      	b.n	8003d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	4908      	ldr	r1, [pc, #32]	; (8003d50 <__NVIC_SetPriority+0x50>)
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	3b04      	subs	r3, #4
 8003d38:	0112      	lsls	r2, r2, #4
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	761a      	strb	r2, [r3, #24]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000e100 	.word	0xe000e100
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	; 0x24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f1c3 0307 	rsb	r3, r3, #7
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	bf28      	it	cs
 8003d72:	2304      	movcs	r3, #4
 8003d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	2b06      	cmp	r3, #6
 8003d7c:	d902      	bls.n	8003d84 <NVIC_EncodePriority+0x30>
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3b03      	subs	r3, #3
 8003d82:	e000      	b.n	8003d86 <NVIC_EncodePriority+0x32>
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	401a      	ands	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	fa01 f303 	lsl.w	r3, r1, r3
 8003da6:	43d9      	mvns	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dac:	4313      	orrs	r3, r2
         );
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3724      	adds	r7, #36	; 0x24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dcc:	d301      	bcc.n	8003dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00f      	b.n	8003df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <SysTick_Config+0x40>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dda:	210f      	movs	r1, #15
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003de0:	f7ff ff8e 	bl	8003d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <SysTick_Config+0x40>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dea:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <SysTick_Config+0x40>)
 8003dec:	2207      	movs	r2, #7
 8003dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	e000e010 	.word	0xe000e010

08003e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff ff29 	bl	8003c60 <__NVIC_SetPriorityGrouping>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e28:	f7ff ff3e 	bl	8003ca8 <__NVIC_GetPriorityGrouping>
 8003e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	6978      	ldr	r0, [r7, #20]
 8003e34:	f7ff ff8e 	bl	8003d54 <NVIC_EncodePriority>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff5d 	bl	8003d00 <__NVIC_SetPriority>
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4603      	mov	r3, r0
 8003e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff ff31 	bl	8003cc4 <__NVIC_EnableIRQ>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ffa2 	bl	8003dbc <SysTick_Config>
 8003e78:	4603      	mov	r3, r0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e90:	f7ff fa64 	bl	800335c <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e099      	b.n	8003fd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec0:	e00f      	b.n	8003ee2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ec2:	f7ff fa4b 	bl	800335c <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b05      	cmp	r3, #5
 8003ece:	d908      	bls.n	8003ee2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2203      	movs	r2, #3
 8003eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e078      	b.n	8003fd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e8      	bne.n	8003ec2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4b38      	ldr	r3, [pc, #224]	; (8003fdc <HAL_DMA_Init+0x158>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d107      	bne.n	8003f4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	4313      	orrs	r3, r2
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 0307 	bic.w	r3, r3, #7
 8003f62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d117      	bne.n	8003fa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00e      	beq.n	8003fa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fadf 	bl	800454c <DMA_CheckFifoParam>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2240      	movs	r2, #64	; 0x40
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e016      	b.n	8003fd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fa96 	bl	80044e0 <DMA_CalcBaseAndBitshift>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbc:	223f      	movs	r2, #63	; 0x3f
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	f010803f 	.word	0xf010803f

08003fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_DMA_Start_IT+0x26>
 8004002:	2302      	movs	r3, #2
 8004004:	e040      	b.n	8004088 <HAL_DMA_Start_IT+0xa8>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d12f      	bne.n	800407a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2202      	movs	r2, #2
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fa28 	bl	8004484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004038:	223f      	movs	r2, #63	; 0x3f
 800403a:	409a      	lsls	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0216 	orr.w	r2, r2, #22
 800404e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d007      	beq.n	8004068 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0208 	orr.w	r2, r2, #8
 8004066:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e005      	b.n	8004086 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004082:	2302      	movs	r3, #2
 8004084:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004086:	7dfb      	ldrb	r3, [r7, #23]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800409e:	f7ff f95d 	bl	800335c <HAL_GetTick>
 80040a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d008      	beq.n	80040c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2280      	movs	r2, #128	; 0x80
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e052      	b.n	8004168 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0216 	bic.w	r2, r2, #22
 80040d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <HAL_DMA_Abort+0x62>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0208 	bic.w	r2, r2, #8
 8004100:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004112:	e013      	b.n	800413c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004114:	f7ff f922 	bl	800335c <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b05      	cmp	r3, #5
 8004120:	d90c      	bls.n	800413c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2203      	movs	r2, #3
 800412c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e015      	b.n	8004168 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e4      	bne.n	8004114 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414e:	223f      	movs	r2, #63	; 0x3f
 8004150:	409a      	lsls	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800417c:	4b8e      	ldr	r3, [pc, #568]	; (80043b8 <HAL_DMA_IRQHandler+0x248>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a8e      	ldr	r2, [pc, #568]	; (80043bc <HAL_DMA_IRQHandler+0x24c>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	0a9b      	lsrs	r3, r3, #10
 8004188:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	2208      	movs	r2, #8
 800419c:	409a      	lsls	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01a      	beq.n	80041dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d013      	beq.n	80041dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0204 	bic.w	r2, r2, #4
 80041c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c8:	2208      	movs	r2, #8
 80041ca:	409a      	lsls	r2, r3
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	f043 0201 	orr.w	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	2201      	movs	r2, #1
 80041e2:	409a      	lsls	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d012      	beq.n	8004212 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fe:	2201      	movs	r2, #1
 8004200:	409a      	lsls	r2, r3
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f043 0202 	orr.w	r2, r3, #2
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004216:	2204      	movs	r2, #4
 8004218:	409a      	lsls	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d012      	beq.n	8004248 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00b      	beq.n	8004248 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004234:	2204      	movs	r2, #4
 8004236:	409a      	lsls	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	f043 0204 	orr.w	r2, r3, #4
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424c:	2210      	movs	r2, #16
 800424e:	409a      	lsls	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d043      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d03c      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426a:	2210      	movs	r2, #16
 800426c:	409a      	lsls	r2, r3
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d018      	beq.n	80042b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d108      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d024      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
 800429e:	e01f      	b.n	80042e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01b      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	4798      	blx	r3
 80042b0:	e016      	b.n	80042e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d107      	bne.n	80042d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0208 	bic.w	r2, r2, #8
 80042ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e4:	2220      	movs	r2, #32
 80042e6:	409a      	lsls	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 808f 	beq.w	8004410 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8087 	beq.w	8004410 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004306:	2220      	movs	r2, #32
 8004308:	409a      	lsls	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b05      	cmp	r3, #5
 8004318:	d136      	bne.n	8004388 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0216 	bic.w	r2, r2, #22
 8004328:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695a      	ldr	r2, [r3, #20]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004338:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <HAL_DMA_IRQHandler+0x1da>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0208 	bic.w	r2, r2, #8
 8004358:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435e:	223f      	movs	r2, #63	; 0x3f
 8004360:	409a      	lsls	r2, r3
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437a:	2b00      	cmp	r3, #0
 800437c:	d07e      	beq.n	800447c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
        }
        return;
 8004386:	e079      	b.n	800447c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01d      	beq.n	80043d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10d      	bne.n	80043c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d031      	beq.n	8004410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
 80043b4:	e02c      	b.n	8004410 <HAL_DMA_IRQHandler+0x2a0>
 80043b6:	bf00      	nop
 80043b8:	20000004 	.word	0x20000004
 80043bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d023      	beq.n	8004410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4798      	blx	r3
 80043d0:	e01e      	b.n	8004410 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10f      	bne.n	8004400 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0210 	bic.w	r2, r2, #16
 80043ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	2b00      	cmp	r3, #0
 8004416:	d032      	beq.n	800447e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d022      	beq.n	800446a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2205      	movs	r2, #5
 8004428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	3301      	adds	r3, #1
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	429a      	cmp	r2, r3
 8004446:	d307      	bcc.n	8004458 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f2      	bne.n	800443c <HAL_DMA_IRQHandler+0x2cc>
 8004456:	e000      	b.n	800445a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004458:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	4798      	blx	r3
 800447a:	e000      	b.n	800447e <HAL_DMA_IRQHandler+0x30e>
        return;
 800447c:	bf00      	nop
    }
  }
}
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d108      	bne.n	80044c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044c2:	e007      	b.n	80044d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	60da      	str	r2, [r3, #12]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	3b10      	subs	r3, #16
 80044f0:	4a14      	ldr	r2, [pc, #80]	; (8004544 <DMA_CalcBaseAndBitshift+0x64>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044fa:	4a13      	ldr	r2, [pc, #76]	; (8004548 <DMA_CalcBaseAndBitshift+0x68>)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d909      	bls.n	8004522 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	1d1a      	adds	r2, r3, #4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	659a      	str	r2, [r3, #88]	; 0x58
 8004520:	e007      	b.n	8004532 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800452a:	f023 0303 	bic.w	r3, r3, #3
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	aaaaaaab 	.word	0xaaaaaaab
 8004548:	08007e00 	.word	0x08007e00

0800454c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11f      	bne.n	80045a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d856      	bhi.n	800461a <DMA_CheckFifoParam+0xce>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <DMA_CheckFifoParam+0x28>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	08004585 	.word	0x08004585
 8004578:	08004597 	.word	0x08004597
 800457c:	08004585 	.word	0x08004585
 8004580:	0800461b 	.word	0x0800461b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d046      	beq.n	800461e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004594:	e043      	b.n	800461e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800459e:	d140      	bne.n	8004622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a4:	e03d      	b.n	8004622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ae:	d121      	bne.n	80045f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d837      	bhi.n	8004626 <DMA_CheckFifoParam+0xda>
 80045b6:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <DMA_CheckFifoParam+0x70>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045d3 	.word	0x080045d3
 80045c4:	080045cd 	.word	0x080045cd
 80045c8:	080045e5 	.word	0x080045e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      break;
 80045d0:	e030      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d025      	beq.n	800462a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e2:	e022      	b.n	800462a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ec:	d11f      	bne.n	800462e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045f2:	e01c      	b.n	800462e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d903      	bls.n	8004602 <DMA_CheckFifoParam+0xb6>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d003      	beq.n	8004608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004600:	e018      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
      break;
 8004606:	e015      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00e      	beq.n	8004632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      break;
 8004618:	e00b      	b.n	8004632 <DMA_CheckFifoParam+0xe6>
      break;
 800461a:	bf00      	nop
 800461c:	e00a      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 800461e:	bf00      	nop
 8004620:	e008      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 8004622:	bf00      	nop
 8004624:	e006      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 8004626:	bf00      	nop
 8004628:	e004      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;   
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 8004632:	bf00      	nop
    }
  } 
  
  return status; 
 8004634:	7bfb      	ldrb	r3, [r7, #15]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop

08004644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004644:	b480      	push	{r7}
 8004646:	b089      	sub	sp, #36	; 0x24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	e159      	b.n	8004914 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004660:	2201      	movs	r2, #1
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	429a      	cmp	r2, r3
 800467a:	f040 8148 	bne.w	800490e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d005      	beq.n	8004696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004692:	2b02      	cmp	r3, #2
 8004694:	d130      	bne.n	80046f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	2203      	movs	r2, #3
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046cc:	2201      	movs	r2, #1
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 0201 	and.w	r2, r3, #1
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	2b03      	cmp	r3, #3
 8004702:	d017      	beq.n	8004734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	2203      	movs	r2, #3
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4013      	ands	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4313      	orrs	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d123      	bne.n	8004788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	08da      	lsrs	r2, r3, #3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3208      	adds	r2, #8
 8004748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	220f      	movs	r2, #15
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	08da      	lsrs	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3208      	adds	r2, #8
 8004782:	69b9      	ldr	r1, [r7, #24]
 8004784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	2203      	movs	r2, #3
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	43db      	mvns	r3, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 0203 	and.w	r2, r3, #3
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80a2 	beq.w	800490e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	4b57      	ldr	r3, [pc, #348]	; (800492c <HAL_GPIO_Init+0x2e8>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	4a56      	ldr	r2, [pc, #344]	; (800492c <HAL_GPIO_Init+0x2e8>)
 80047d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d8:	6453      	str	r3, [r2, #68]	; 0x44
 80047da:	4b54      	ldr	r3, [pc, #336]	; (800492c <HAL_GPIO_Init+0x2e8>)
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047e6:	4a52      	ldr	r2, [pc, #328]	; (8004930 <HAL_GPIO_Init+0x2ec>)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	3302      	adds	r3, #2
 80047ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	220f      	movs	r2, #15
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a49      	ldr	r2, [pc, #292]	; (8004934 <HAL_GPIO_Init+0x2f0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d019      	beq.n	8004846 <HAL_GPIO_Init+0x202>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a48      	ldr	r2, [pc, #288]	; (8004938 <HAL_GPIO_Init+0x2f4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_GPIO_Init+0x1fe>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a47      	ldr	r2, [pc, #284]	; (800493c <HAL_GPIO_Init+0x2f8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00d      	beq.n	800483e <HAL_GPIO_Init+0x1fa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a46      	ldr	r2, [pc, #280]	; (8004940 <HAL_GPIO_Init+0x2fc>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d007      	beq.n	800483a <HAL_GPIO_Init+0x1f6>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a45      	ldr	r2, [pc, #276]	; (8004944 <HAL_GPIO_Init+0x300>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d101      	bne.n	8004836 <HAL_GPIO_Init+0x1f2>
 8004832:	2304      	movs	r3, #4
 8004834:	e008      	b.n	8004848 <HAL_GPIO_Init+0x204>
 8004836:	2307      	movs	r3, #7
 8004838:	e006      	b.n	8004848 <HAL_GPIO_Init+0x204>
 800483a:	2303      	movs	r3, #3
 800483c:	e004      	b.n	8004848 <HAL_GPIO_Init+0x204>
 800483e:	2302      	movs	r3, #2
 8004840:	e002      	b.n	8004848 <HAL_GPIO_Init+0x204>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_GPIO_Init+0x204>
 8004846:	2300      	movs	r3, #0
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	f002 0203 	and.w	r2, r2, #3
 800484e:	0092      	lsls	r2, r2, #2
 8004850:	4093      	lsls	r3, r2
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004858:	4935      	ldr	r1, [pc, #212]	; (8004930 <HAL_GPIO_Init+0x2ec>)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	3302      	adds	r3, #2
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004866:	4b38      	ldr	r3, [pc, #224]	; (8004948 <HAL_GPIO_Init+0x304>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800488a:	4a2f      	ldr	r2, [pc, #188]	; (8004948 <HAL_GPIO_Init+0x304>)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004890:	4b2d      	ldr	r3, [pc, #180]	; (8004948 <HAL_GPIO_Init+0x304>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b4:	4a24      	ldr	r2, [pc, #144]	; (8004948 <HAL_GPIO_Init+0x304>)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048ba:	4b23      	ldr	r3, [pc, #140]	; (8004948 <HAL_GPIO_Init+0x304>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048de:	4a1a      	ldr	r2, [pc, #104]	; (8004948 <HAL_GPIO_Init+0x304>)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048e4:	4b18      	ldr	r3, [pc, #96]	; (8004948 <HAL_GPIO_Init+0x304>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4013      	ands	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004908:	4a0f      	ldr	r2, [pc, #60]	; (8004948 <HAL_GPIO_Init+0x304>)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3301      	adds	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b0f      	cmp	r3, #15
 8004918:	f67f aea2 	bls.w	8004660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	3724      	adds	r7, #36	; 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	40013800 	.word	0x40013800
 8004934:	40020000 	.word	0x40020000
 8004938:	40020400 	.word	0x40020400
 800493c:	40020800 	.word	0x40020800
 8004940:	40020c00 	.word	0x40020c00
 8004944:	40021000 	.word	0x40021000
 8004948:	40013c00 	.word	0x40013c00

0800494c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	807b      	strh	r3, [r7, #2]
 8004958:	4613      	mov	r3, r2
 800495a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800495c:	787b      	ldrb	r3, [r7, #1]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004962:	887a      	ldrh	r2, [r7, #2]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004968:	e003      	b.n	8004972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800496a:	887b      	ldrh	r3, [r7, #2]
 800496c:	041a      	lsls	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	619a      	str	r2, [r3, #24]
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e12b      	b.n	8004bea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fe f8b2 	bl	8002b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2224      	movs	r2, #36	; 0x24
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049e4:	f001 fb92 	bl	800610c <HAL_RCC_GetPCLK1Freq>
 80049e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	4a81      	ldr	r2, [pc, #516]	; (8004bf4 <HAL_I2C_Init+0x274>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d807      	bhi.n	8004a04 <HAL_I2C_Init+0x84>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4a80      	ldr	r2, [pc, #512]	; (8004bf8 <HAL_I2C_Init+0x278>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	bf94      	ite	ls
 80049fc:	2301      	movls	r3, #1
 80049fe:	2300      	movhi	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e006      	b.n	8004a12 <HAL_I2C_Init+0x92>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4a7d      	ldr	r2, [pc, #500]	; (8004bfc <HAL_I2C_Init+0x27c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	bf94      	ite	ls
 8004a0c:	2301      	movls	r3, #1
 8004a0e:	2300      	movhi	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e0e7      	b.n	8004bea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4a78      	ldr	r2, [pc, #480]	; (8004c00 <HAL_I2C_Init+0x280>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	0c9b      	lsrs	r3, r3, #18
 8004a24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4a6a      	ldr	r2, [pc, #424]	; (8004bf4 <HAL_I2C_Init+0x274>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d802      	bhi.n	8004a54 <HAL_I2C_Init+0xd4>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	3301      	adds	r3, #1
 8004a52:	e009      	b.n	8004a68 <HAL_I2C_Init+0xe8>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	4a69      	ldr	r2, [pc, #420]	; (8004c04 <HAL_I2C_Init+0x284>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	099b      	lsrs	r3, r3, #6
 8004a66:	3301      	adds	r3, #1
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	495c      	ldr	r1, [pc, #368]	; (8004bf4 <HAL_I2C_Init+0x274>)
 8004a84:	428b      	cmp	r3, r1
 8004a86:	d819      	bhi.n	8004abc <HAL_I2C_Init+0x13c>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	1e59      	subs	r1, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a96:	1c59      	adds	r1, r3, #1
 8004a98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a9c:	400b      	ands	r3, r1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_I2C_Init+0x138>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1e59      	subs	r1, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab6:	e051      	b.n	8004b5c <HAL_I2C_Init+0x1dc>
 8004ab8:	2304      	movs	r3, #4
 8004aba:	e04f      	b.n	8004b5c <HAL_I2C_Init+0x1dc>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d111      	bne.n	8004ae8 <HAL_I2C_Init+0x168>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	1e58      	subs	r0, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6859      	ldr	r1, [r3, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	440b      	add	r3, r1
 8004ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e012      	b.n	8004b0e <HAL_I2C_Init+0x18e>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	1e58      	subs	r0, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6859      	ldr	r1, [r3, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	0099      	lsls	r1, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004afe:	3301      	adds	r3, #1
 8004b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_I2C_Init+0x196>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e022      	b.n	8004b5c <HAL_I2C_Init+0x1dc>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10e      	bne.n	8004b3c <HAL_I2C_Init+0x1bc>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	1e58      	subs	r0, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6859      	ldr	r1, [r3, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	440b      	add	r3, r1
 8004b2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b30:	3301      	adds	r3, #1
 8004b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3a:	e00f      	b.n	8004b5c <HAL_I2C_Init+0x1dc>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1e58      	subs	r0, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6859      	ldr	r1, [r3, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	0099      	lsls	r1, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b52:	3301      	adds	r3, #1
 8004b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	6809      	ldr	r1, [r1, #0]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6911      	ldr	r1, [r2, #16]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68d2      	ldr	r2, [r2, #12]
 8004b96:	4311      	orrs	r1, r2
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	000186a0 	.word	0x000186a0
 8004bf8:	001e847f 	.word	0x001e847f
 8004bfc:	003d08ff 	.word	0x003d08ff
 8004c00:	431bde83 	.word	0x431bde83
 8004c04:	10624dd3 	.word	0x10624dd3

08004c08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	461a      	mov	r2, r3
 8004c14:	460b      	mov	r3, r1
 8004c16:	817b      	strh	r3, [r7, #10]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c1c:	f7fe fb9e 	bl	800335c <HAL_GetTick>
 8004c20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	f040 80e0 	bne.w	8004df0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2319      	movs	r3, #25
 8004c36:	2201      	movs	r2, #1
 8004c38:	4970      	ldr	r1, [pc, #448]	; (8004dfc <HAL_I2C_Master_Transmit+0x1f4>)
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fc58 	bl	80054f0 <I2C_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
 8004c48:	e0d3      	b.n	8004df2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_I2C_Master_Transmit+0x50>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e0cc      	b.n	8004df2 <HAL_I2C_Master_Transmit+0x1ea>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d007      	beq.n	8004c7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0201 	orr.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2221      	movs	r2, #33	; 0x21
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2210      	movs	r2, #16
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	893a      	ldrh	r2, [r7, #8]
 8004cae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a50      	ldr	r2, [pc, #320]	; (8004e00 <HAL_I2C_Master_Transmit+0x1f8>)
 8004cbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cc0:	8979      	ldrh	r1, [r7, #10]
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	6a3a      	ldr	r2, [r7, #32]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fac2 	bl	8005250 <I2C_MasterRequestWrite>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e08d      	b.n	8004df2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004cec:	e066      	b.n	8004dbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	6a39      	ldr	r1, [r7, #32]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 fcd2 	bl	800569c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00d      	beq.n	8004d1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d107      	bne.n	8004d16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e06b      	b.n	8004df2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	781a      	ldrb	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d11b      	bne.n	8004d90 <HAL_I2C_Master_Transmit+0x188>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d017      	beq.n	8004d90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	781a      	ldrb	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	6a39      	ldr	r1, [r7, #32]
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fcc2 	bl	800571e <I2C_WaitOnBTFFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00d      	beq.n	8004dbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d107      	bne.n	8004db8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e01a      	b.n	8004df2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d194      	bne.n	8004cee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	e000      	b.n	8004df2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
  }
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	00100002 	.word	0x00100002
 8004e00:	ffff0000 	.word	0xffff0000

08004e04 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08c      	sub	sp, #48	; 0x30
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	460b      	mov	r3, r1
 8004e12:	817b      	strh	r3, [r7, #10]
 8004e14:	4613      	mov	r3, r2
 8004e16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e18:	f7fe faa0 	bl	800335c <HAL_GetTick>
 8004e1c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	f040 820b 	bne.w	8005242 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2319      	movs	r3, #25
 8004e32:	2201      	movs	r2, #1
 8004e34:	497c      	ldr	r1, [pc, #496]	; (8005028 <HAL_I2C_Master_Receive+0x224>)
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fb5a 	bl	80054f0 <I2C_WaitOnFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
 8004e44:	e1fe      	b.n	8005244 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_I2C_Master_Receive+0x50>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e1f7      	b.n	8005244 <HAL_I2C_Master_Receive+0x440>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d007      	beq.n	8004e7a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2222      	movs	r2, #34	; 0x22
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2210      	movs	r2, #16
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	893a      	ldrh	r2, [r7, #8]
 8004eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a5c      	ldr	r2, [pc, #368]	; (800502c <HAL_I2C_Master_Receive+0x228>)
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ebc:	8979      	ldrh	r1, [r7, #10]
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fa46 	bl	8005354 <I2C_MasterRequestRead>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e1b8      	b.n	8005244 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d113      	bne.n	8004f02 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eda:	2300      	movs	r3, #0
 8004edc:	623b      	str	r3, [r7, #32]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	623b      	str	r3, [r7, #32]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	623b      	str	r3, [r7, #32]
 8004eee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e18c      	b.n	800521c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d11b      	bne.n	8004f42 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	e16c      	b.n	800521c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d11b      	bne.n	8004f82 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	e14c      	b.n	800521c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004fa8:	e138      	b.n	800521c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	f200 80f1 	bhi.w	8005196 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d123      	bne.n	8005004 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fbed 	bl	80057a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e139      	b.n	8005244 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005002:	e10b      	b.n	800521c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005008:	2b02      	cmp	r3, #2
 800500a:	d14e      	bne.n	80050aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	2200      	movs	r2, #0
 8005014:	4906      	ldr	r1, [pc, #24]	; (8005030 <HAL_I2C_Master_Receive+0x22c>)
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fa6a 	bl	80054f0 <I2C_WaitOnFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e10e      	b.n	8005244 <HAL_I2C_Master_Receive+0x440>
 8005026:	bf00      	nop
 8005028:	00100002 	.word	0x00100002
 800502c:	ffff0000 	.word	0xffff0000
 8005030:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050a8:	e0b8      	b.n	800521c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	2200      	movs	r2, #0
 80050b2:	4966      	ldr	r1, [pc, #408]	; (800524c <HAL_I2C_Master_Receive+0x448>)
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 fa1b 	bl	80054f0 <I2C_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0bf      	b.n	8005244 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	2200      	movs	r2, #0
 800510e:	494f      	ldr	r1, [pc, #316]	; (800524c <HAL_I2C_Master_Receive+0x448>)
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f9ed 	bl	80054f0 <I2C_WaitOnFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e091      	b.n	8005244 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800512e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005194:	e042      	b.n	800521c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fb00 	bl	80057a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e04c      	b.n	8005244 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d118      	bne.n	800521c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005220:	2b00      	cmp	r3, #0
 8005222:	f47f aec2 	bne.w	8004faa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	e000      	b.n	8005244 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3728      	adds	r7, #40	; 0x28
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	00010004 	.word	0x00010004

08005250 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	607a      	str	r2, [r7, #4]
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	460b      	mov	r3, r1
 800525e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b08      	cmp	r3, #8
 800526a:	d006      	beq.n	800527a <I2C_MasterRequestWrite+0x2a>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d003      	beq.n	800527a <I2C_MasterRequestWrite+0x2a>
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005278:	d108      	bne.n	800528c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	e00b      	b.n	80052a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005290:	2b12      	cmp	r3, #18
 8005292:	d107      	bne.n	80052a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f91d 	bl	80054f0 <I2C_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ca:	d103      	bne.n	80052d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e035      	b.n	8005344 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052e0:	d108      	bne.n	80052f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052e2:	897b      	ldrh	r3, [r7, #10]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052f0:	611a      	str	r2, [r3, #16]
 80052f2:	e01b      	b.n	800532c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052f4:	897b      	ldrh	r3, [r7, #10]
 80052f6:	11db      	asrs	r3, r3, #7
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f003 0306 	and.w	r3, r3, #6
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f063 030f 	orn	r3, r3, #15
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	490e      	ldr	r1, [pc, #56]	; (800534c <I2C_MasterRequestWrite+0xfc>)
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f943 	bl	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e010      	b.n	8005344 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005322:	897b      	ldrh	r3, [r7, #10]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4907      	ldr	r1, [pc, #28]	; (8005350 <I2C_MasterRequestWrite+0x100>)
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f933 	bl	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	00010008 	.word	0x00010008
 8005350:	00010002 	.word	0x00010002

08005354 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af02      	add	r7, sp, #8
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	607a      	str	r2, [r7, #4]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	460b      	mov	r3, r1
 8005362:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005378:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b08      	cmp	r3, #8
 800537e:	d006      	beq.n	800538e <I2C_MasterRequestRead+0x3a>
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d003      	beq.n	800538e <I2C_MasterRequestRead+0x3a>
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800538c:	d108      	bne.n	80053a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e00b      	b.n	80053b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	2b11      	cmp	r3, #17
 80053a6:	d107      	bne.n	80053b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f893 	bl	80054f0 <I2C_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00d      	beq.n	80053ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053de:	d103      	bne.n	80053e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e079      	b.n	80054e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053f4:	d108      	bne.n	8005408 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053f6:	897b      	ldrh	r3, [r7, #10]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	f043 0301 	orr.w	r3, r3, #1
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	611a      	str	r2, [r3, #16]
 8005406:	e05f      	b.n	80054c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005408:	897b      	ldrh	r3, [r7, #10]
 800540a:	11db      	asrs	r3, r3, #7
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f003 0306 	and.w	r3, r3, #6
 8005412:	b2db      	uxtb	r3, r3
 8005414:	f063 030f 	orn	r3, r3, #15
 8005418:	b2da      	uxtb	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	4930      	ldr	r1, [pc, #192]	; (80054e8 <I2C_MasterRequestRead+0x194>)
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f8b9 	bl	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e054      	b.n	80054e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005436:	897b      	ldrh	r3, [r7, #10]
 8005438:	b2da      	uxtb	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	4929      	ldr	r1, [pc, #164]	; (80054ec <I2C_MasterRequestRead+0x198>)
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f8a9 	bl	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e044      	b.n	80054e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005456:	2300      	movs	r3, #0
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800547a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f831 	bl	80054f0 <I2C_WaitOnFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a2:	d103      	bne.n	80054ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e017      	b.n	80054e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80054b0:	897b      	ldrh	r3, [r7, #10]
 80054b2:	11db      	asrs	r3, r3, #7
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f003 0306 	and.w	r3, r3, #6
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	f063 030e 	orn	r3, r3, #14
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4907      	ldr	r1, [pc, #28]	; (80054ec <I2C_MasterRequestRead+0x198>)
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f865 	bl	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	00010008 	.word	0x00010008
 80054ec:	00010002 	.word	0x00010002

080054f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	4613      	mov	r3, r2
 80054fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005500:	e025      	b.n	800554e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005508:	d021      	beq.n	800554e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550a:	f7fd ff27 	bl	800335c <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d302      	bcc.n	8005520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d116      	bne.n	800554e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e023      	b.n	8005596 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	0c1b      	lsrs	r3, r3, #16
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10d      	bne.n	8005574 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	43da      	mvns	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	bf0c      	ite	eq
 800556a:	2301      	moveq	r3, #1
 800556c:	2300      	movne	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	e00c      	b.n	800558e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	43da      	mvns	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	429a      	cmp	r2, r3
 8005592:	d0b6      	beq.n	8005502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
 80055aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ac:	e051      	b.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055bc:	d123      	bne.n	8005606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f043 0204 	orr.w	r2, r3, #4
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e046      	b.n	8005694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800560c:	d021      	beq.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7fd fea5 	bl	800335c <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d116      	bne.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f043 0220 	orr.w	r2, r3, #32
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e020      	b.n	8005694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d10c      	bne.n	8005676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	43da      	mvns	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4013      	ands	r3, r2
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf14      	ite	ne
 800566e:	2301      	movne	r3, #1
 8005670:	2300      	moveq	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	e00b      	b.n	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	43da      	mvns	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4013      	ands	r3, r2
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	bf14      	ite	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2300      	moveq	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d18d      	bne.n	80055ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056a8:	e02d      	b.n	8005706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f8ce 	bl	800584c <I2C_IsAcknowledgeFailed>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e02d      	b.n	8005716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056c0:	d021      	beq.n	8005706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c2:	f7fd fe4b 	bl	800335c <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d302      	bcc.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d116      	bne.n	8005706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0220 	orr.w	r2, r3, #32
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e007      	b.n	8005716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005710:	2b80      	cmp	r3, #128	; 0x80
 8005712:	d1ca      	bne.n	80056aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800572a:	e02d      	b.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f88d 	bl	800584c <I2C_IsAcknowledgeFailed>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e02d      	b.n	8005798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005742:	d021      	beq.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005744:	f7fd fe0a 	bl	800335c <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	429a      	cmp	r2, r3
 8005752:	d302      	bcc.n	800575a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d116      	bne.n	8005788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	f043 0220 	orr.w	r2, r3, #32
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e007      	b.n	8005798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b04      	cmp	r3, #4
 8005794:	d1ca      	bne.n	800572c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057ac:	e042      	b.n	8005834 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d119      	bne.n	80057f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0210 	mvn.w	r2, #16
 80057c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e029      	b.n	8005844 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f0:	f7fd fdb4 	bl	800335c <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d302      	bcc.n	8005806 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d116      	bne.n	8005834 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	f043 0220 	orr.w	r2, r3, #32
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e007      	b.n	8005844 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d1b5      	bne.n	80057ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005862:	d11b      	bne.n	800589c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800586c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	f043 0204 	orr.w	r2, r3, #4
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e267      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d075      	beq.n	80059b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ca:	4b88      	ldr	r3, [pc, #544]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 030c 	and.w	r3, r3, #12
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d00c      	beq.n	80058f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058d6:	4b85      	ldr	r3, [pc, #532]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d112      	bne.n	8005908 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058e2:	4b82      	ldr	r3, [pc, #520]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ee:	d10b      	bne.n	8005908 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f0:	4b7e      	ldr	r3, [pc, #504]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d05b      	beq.n	80059b4 <HAL_RCC_OscConfig+0x108>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d157      	bne.n	80059b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e242      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005910:	d106      	bne.n	8005920 <HAL_RCC_OscConfig+0x74>
 8005912:	4b76      	ldr	r3, [pc, #472]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a75      	ldr	r2, [pc, #468]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	e01d      	b.n	800595c <HAL_RCC_OscConfig+0xb0>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005928:	d10c      	bne.n	8005944 <HAL_RCC_OscConfig+0x98>
 800592a:	4b70      	ldr	r3, [pc, #448]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a6f      	ldr	r2, [pc, #444]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	4b6d      	ldr	r3, [pc, #436]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6c      	ldr	r2, [pc, #432]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 800593c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	e00b      	b.n	800595c <HAL_RCC_OscConfig+0xb0>
 8005944:	4b69      	ldr	r3, [pc, #420]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a68      	ldr	r2, [pc, #416]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 800594a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	4b66      	ldr	r3, [pc, #408]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a65      	ldr	r2, [pc, #404]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800595a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d013      	beq.n	800598c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005964:	f7fd fcfa 	bl	800335c <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800596c:	f7fd fcf6 	bl	800335c <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b64      	cmp	r3, #100	; 0x64
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e207      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597e:	4b5b      	ldr	r3, [pc, #364]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0f0      	beq.n	800596c <HAL_RCC_OscConfig+0xc0>
 800598a:	e014      	b.n	80059b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800598c:	f7fd fce6 	bl	800335c <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005994:	f7fd fce2 	bl	800335c <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b64      	cmp	r3, #100	; 0x64
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e1f3      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a6:	4b51      	ldr	r3, [pc, #324]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f0      	bne.n	8005994 <HAL_RCC_OscConfig+0xe8>
 80059b2:	e000      	b.n	80059b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d063      	beq.n	8005a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059c2:	4b4a      	ldr	r3, [pc, #296]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00b      	beq.n	80059e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ce:	4b47      	ldr	r3, [pc, #284]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d11c      	bne.n	8005a14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059da:	4b44      	ldr	r3, [pc, #272]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d116      	bne.n	8005a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059e6:	4b41      	ldr	r3, [pc, #260]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <HAL_RCC_OscConfig+0x152>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d001      	beq.n	80059fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e1c7      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fe:	4b3b      	ldr	r3, [pc, #236]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	4937      	ldr	r1, [pc, #220]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a12:	e03a      	b.n	8005a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d020      	beq.n	8005a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a1c:	4b34      	ldr	r3, [pc, #208]	; (8005af0 <HAL_RCC_OscConfig+0x244>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a22:	f7fd fc9b 	bl	800335c <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a2a:	f7fd fc97 	bl	800335c <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e1a8      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3c:	4b2b      	ldr	r3, [pc, #172]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a48:	4b28      	ldr	r3, [pc, #160]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4925      	ldr	r1, [pc, #148]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	600b      	str	r3, [r1, #0]
 8005a5c:	e015      	b.n	8005a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a5e:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <HAL_RCC_OscConfig+0x244>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a64:	f7fd fc7a 	bl	800335c <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a6c:	f7fd fc76 	bl	800335c <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e187      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a7e:	4b1b      	ldr	r3, [pc, #108]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d036      	beq.n	8005b04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d016      	beq.n	8005acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a9e:	4b15      	ldr	r3, [pc, #84]	; (8005af4 <HAL_RCC_OscConfig+0x248>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa4:	f7fd fc5a 	bl	800335c <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aac:	f7fd fc56 	bl	800335c <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e167      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <HAL_RCC_OscConfig+0x240>)
 8005ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0f0      	beq.n	8005aac <HAL_RCC_OscConfig+0x200>
 8005aca:	e01b      	b.n	8005b04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005acc:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <HAL_RCC_OscConfig+0x248>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad2:	f7fd fc43 	bl	800335c <HAL_GetTick>
 8005ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ad8:	e00e      	b.n	8005af8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ada:	f7fd fc3f 	bl	800335c <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d907      	bls.n	8005af8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e150      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
 8005aec:	40023800 	.word	0x40023800
 8005af0:	42470000 	.word	0x42470000
 8005af4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af8:	4b88      	ldr	r3, [pc, #544]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1ea      	bne.n	8005ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8097 	beq.w	8005c40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b12:	2300      	movs	r3, #0
 8005b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b16:	4b81      	ldr	r3, [pc, #516]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10f      	bne.n	8005b42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	4b7d      	ldr	r3, [pc, #500]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	4a7c      	ldr	r2, [pc, #496]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b30:	6413      	str	r3, [r2, #64]	; 0x40
 8005b32:	4b7a      	ldr	r3, [pc, #488]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b42:	4b77      	ldr	r3, [pc, #476]	; (8005d20 <HAL_RCC_OscConfig+0x474>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d118      	bne.n	8005b80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b4e:	4b74      	ldr	r3, [pc, #464]	; (8005d20 <HAL_RCC_OscConfig+0x474>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a73      	ldr	r2, [pc, #460]	; (8005d20 <HAL_RCC_OscConfig+0x474>)
 8005b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b5a:	f7fd fbff 	bl	800335c <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b62:	f7fd fbfb 	bl	800335c <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e10c      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b74:	4b6a      	ldr	r3, [pc, #424]	; (8005d20 <HAL_RCC_OscConfig+0x474>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f0      	beq.n	8005b62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d106      	bne.n	8005b96 <HAL_RCC_OscConfig+0x2ea>
 8005b88:	4b64      	ldr	r3, [pc, #400]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	4a63      	ldr	r2, [pc, #396]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	6713      	str	r3, [r2, #112]	; 0x70
 8005b94:	e01c      	b.n	8005bd0 <HAL_RCC_OscConfig+0x324>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2b05      	cmp	r3, #5
 8005b9c:	d10c      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x30c>
 8005b9e:	4b5f      	ldr	r3, [pc, #380]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba2:	4a5e      	ldr	r2, [pc, #376]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005ba4:	f043 0304 	orr.w	r3, r3, #4
 8005ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8005baa:	4b5c      	ldr	r3, [pc, #368]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bae:	4a5b      	ldr	r2, [pc, #364]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb6:	e00b      	b.n	8005bd0 <HAL_RCC_OscConfig+0x324>
 8005bb8:	4b58      	ldr	r3, [pc, #352]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbc:	4a57      	ldr	r2, [pc, #348]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bbe:	f023 0301 	bic.w	r3, r3, #1
 8005bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc4:	4b55      	ldr	r3, [pc, #340]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc8:	4a54      	ldr	r2, [pc, #336]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bca:	f023 0304 	bic.w	r3, r3, #4
 8005bce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d015      	beq.n	8005c04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd8:	f7fd fbc0 	bl	800335c <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bde:	e00a      	b.n	8005bf6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005be0:	f7fd fbbc 	bl	800335c <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e0cb      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf6:	4b49      	ldr	r3, [pc, #292]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0ee      	beq.n	8005be0 <HAL_RCC_OscConfig+0x334>
 8005c02:	e014      	b.n	8005c2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c04:	f7fd fbaa 	bl	800335c <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c0a:	e00a      	b.n	8005c22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c0c:	f7fd fba6 	bl	800335c <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e0b5      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c22:	4b3e      	ldr	r3, [pc, #248]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1ee      	bne.n	8005c0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d105      	bne.n	8005c40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c34:	4b39      	ldr	r3, [pc, #228]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	4a38      	ldr	r2, [pc, #224]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 80a1 	beq.w	8005d8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c4a:	4b34      	ldr	r3, [pc, #208]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d05c      	beq.n	8005d10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d141      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c5e:	4b31      	ldr	r3, [pc, #196]	; (8005d24 <HAL_RCC_OscConfig+0x478>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c64:	f7fd fb7a 	bl	800335c <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c6c:	f7fd fb76 	bl	800335c <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e087      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7e:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f0      	bne.n	8005c6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	019b      	lsls	r3, r3, #6
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	041b      	lsls	r3, r3, #16
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	061b      	lsls	r3, r3, #24
 8005cae:	491b      	ldr	r1, [pc, #108]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cb4:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <HAL_RCC_OscConfig+0x478>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cba:	f7fd fb4f 	bl	800335c <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cc2:	f7fd fb4b 	bl	800335c <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e05c      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd4:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f0      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x416>
 8005ce0:	e054      	b.n	8005d8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce2:	4b10      	ldr	r3, [pc, #64]	; (8005d24 <HAL_RCC_OscConfig+0x478>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce8:	f7fd fb38 	bl	800335c <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf0:	f7fd fb34 	bl	800335c <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e045      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d02:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <HAL_RCC_OscConfig+0x470>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x444>
 8005d0e:	e03d      	b.n	8005d8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d107      	bne.n	8005d28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e038      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	40007000 	.word	0x40007000
 8005d24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d28:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <HAL_RCC_OscConfig+0x4ec>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d028      	beq.n	8005d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d121      	bne.n	8005d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d11a      	bne.n	8005d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d58:	4013      	ands	r3, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d111      	bne.n	8005d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	085b      	lsrs	r3, r3, #1
 8005d70:	3b01      	subs	r3, #1
 8005d72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d107      	bne.n	8005d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d001      	beq.n	8005d8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40023800 	.word	0x40023800

08005d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e0cc      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005db0:	4b68      	ldr	r3, [pc, #416]	; (8005f54 <HAL_RCC_ClockConfig+0x1b8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d90c      	bls.n	8005dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dbe:	4b65      	ldr	r3, [pc, #404]	; (8005f54 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc6:	4b63      	ldr	r3, [pc, #396]	; (8005f54 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0b8      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d020      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005df0:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4a58      	ldr	r2, [pc, #352]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0308 	and.w	r3, r3, #8
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e08:	4b53      	ldr	r3, [pc, #332]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	4a52      	ldr	r2, [pc, #328]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e14:	4b50      	ldr	r3, [pc, #320]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	494d      	ldr	r1, [pc, #308]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d044      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d107      	bne.n	8005e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3a:	4b47      	ldr	r3, [pc, #284]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d119      	bne.n	8005e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e07f      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d003      	beq.n	8005e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	d107      	bne.n	8005e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5a:	4b3f      	ldr	r3, [pc, #252]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d109      	bne.n	8005e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e06f      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6a:	4b3b      	ldr	r3, [pc, #236]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e067      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e7a:	4b37      	ldr	r3, [pc, #220]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f023 0203 	bic.w	r2, r3, #3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4934      	ldr	r1, [pc, #208]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e8c:	f7fd fa66 	bl	800335c <HAL_GetTick>
 8005e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e92:	e00a      	b.n	8005eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e94:	f7fd fa62 	bl	800335c <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e04f      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eaa:	4b2b      	ldr	r3, [pc, #172]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 020c 	and.w	r2, r3, #12
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d1eb      	bne.n	8005e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ebc:	4b25      	ldr	r3, [pc, #148]	; (8005f54 <HAL_RCC_ClockConfig+0x1b8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d20c      	bcs.n	8005ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eca:	4b22      	ldr	r3, [pc, #136]	; (8005f54 <HAL_RCC_ClockConfig+0x1b8>)
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ed2:	4b20      	ldr	r3, [pc, #128]	; (8005f54 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d001      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e032      	b.n	8005f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ef0:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4916      	ldr	r1, [pc, #88]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d009      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f0e:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	490e      	ldr	r1, [pc, #56]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f22:	f000 f821 	bl	8005f68 <HAL_RCC_GetSysClockFreq>
 8005f26:	4602      	mov	r2, r0
 8005f28:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	091b      	lsrs	r3, r3, #4
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	490a      	ldr	r1, [pc, #40]	; (8005f5c <HAL_RCC_ClockConfig+0x1c0>)
 8005f34:	5ccb      	ldrb	r3, [r1, r3]
 8005f36:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3a:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <HAL_RCC_ClockConfig+0x1c4>)
 8005f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f3e:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <HAL_RCC_ClockConfig+0x1c8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fd f9c6 	bl	80032d4 <HAL_InitTick>

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40023c00 	.word	0x40023c00
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	08007de8 	.word	0x08007de8
 8005f60:	20000004 	.word	0x20000004
 8005f64:	20000008 	.word	0x20000008

08005f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f6c:	b090      	sub	sp, #64	; 0x40
 8005f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	637b      	str	r3, [r7, #52]	; 0x34
 8005f74:	2300      	movs	r3, #0
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f78:	2300      	movs	r3, #0
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f80:	4b59      	ldr	r3, [pc, #356]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 030c 	and.w	r3, r3, #12
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d00d      	beq.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	f200 80a1 	bhi.w	80060d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <HAL_RCC_GetSysClockFreq+0x34>
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d003      	beq.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f9a:	e09b      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f9c:	4b53      	ldr	r3, [pc, #332]	; (80060ec <HAL_RCC_GetSysClockFreq+0x184>)
 8005f9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005fa0:	e09b      	b.n	80060da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fa2:	4b53      	ldr	r3, [pc, #332]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005fa6:	e098      	b.n	80060da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fa8:	4b4f      	ldr	r3, [pc, #316]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fb2:	4b4d      	ldr	r3, [pc, #308]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d028      	beq.n	8006010 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fbe:	4b4a      	ldr	r3, [pc, #296]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	099b      	lsrs	r3, r3, #6
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	623b      	str	r3, [r7, #32]
 8005fc8:	627a      	str	r2, [r7, #36]	; 0x24
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4b47      	ldr	r3, [pc, #284]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fd4:	fb03 f201 	mul.w	r2, r3, r1
 8005fd8:	2300      	movs	r3, #0
 8005fda:	fb00 f303 	mul.w	r3, r0, r3
 8005fde:	4413      	add	r3, r2
 8005fe0:	4a43      	ldr	r2, [pc, #268]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fe2:	fba0 1202 	umull	r1, r2, r0, r2
 8005fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fe8:	460a      	mov	r2, r1
 8005fea:	62ba      	str	r2, [r7, #40]	; 0x28
 8005fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fee:	4413      	add	r3, r2
 8005ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	61bb      	str	r3, [r7, #24]
 8005ff8:	61fa      	str	r2, [r7, #28]
 8005ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ffe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006002:	f7fa f8e9 	bl	80001d8 <__aeabi_uldivmod>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4613      	mov	r3, r2
 800600c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800600e:	e053      	b.n	80060b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006010:	4b35      	ldr	r3, [pc, #212]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	099b      	lsrs	r3, r3, #6
 8006016:	2200      	movs	r2, #0
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	617a      	str	r2, [r7, #20]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006022:	f04f 0b00 	mov.w	fp, #0
 8006026:	4652      	mov	r2, sl
 8006028:	465b      	mov	r3, fp
 800602a:	f04f 0000 	mov.w	r0, #0
 800602e:	f04f 0100 	mov.w	r1, #0
 8006032:	0159      	lsls	r1, r3, #5
 8006034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006038:	0150      	lsls	r0, r2, #5
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	ebb2 080a 	subs.w	r8, r2, sl
 8006042:	eb63 090b 	sbc.w	r9, r3, fp
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006052:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006056:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800605a:	ebb2 0408 	subs.w	r4, r2, r8
 800605e:	eb63 0509 	sbc.w	r5, r3, r9
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	00eb      	lsls	r3, r5, #3
 800606c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006070:	00e2      	lsls	r2, r4, #3
 8006072:	4614      	mov	r4, r2
 8006074:	461d      	mov	r5, r3
 8006076:	eb14 030a 	adds.w	r3, r4, sl
 800607a:	603b      	str	r3, [r7, #0]
 800607c:	eb45 030b 	adc.w	r3, r5, fp
 8006080:	607b      	str	r3, [r7, #4]
 8006082:	f04f 0200 	mov.w	r2, #0
 8006086:	f04f 0300 	mov.w	r3, #0
 800608a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800608e:	4629      	mov	r1, r5
 8006090:	028b      	lsls	r3, r1, #10
 8006092:	4621      	mov	r1, r4
 8006094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006098:	4621      	mov	r1, r4
 800609a:	028a      	lsls	r2, r1, #10
 800609c:	4610      	mov	r0, r2
 800609e:	4619      	mov	r1, r3
 80060a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a2:	2200      	movs	r2, #0
 80060a4:	60bb      	str	r3, [r7, #8]
 80060a6:	60fa      	str	r2, [r7, #12]
 80060a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060ac:	f7fa f894 	bl	80001d8 <__aeabi_uldivmod>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4613      	mov	r3, r2
 80060b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060b8:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	3301      	adds	r3, #1
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80060c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060d2:	e002      	b.n	80060da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_RCC_GetSysClockFreq+0x184>)
 80060d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3740      	adds	r7, #64	; 0x40
 80060e0:	46bd      	mov	sp, r7
 80060e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060e6:	bf00      	nop
 80060e8:	40023800 	.word	0x40023800
 80060ec:	00f42400 	.word	0x00f42400
 80060f0:	017d7840 	.word	0x017d7840

080060f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060f8:	4b03      	ldr	r3, [pc, #12]	; (8006108 <HAL_RCC_GetHCLKFreq+0x14>)
 80060fa:	681b      	ldr	r3, [r3, #0]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	20000004 	.word	0x20000004

0800610c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006110:	f7ff fff0 	bl	80060f4 <HAL_RCC_GetHCLKFreq>
 8006114:	4602      	mov	r2, r0
 8006116:	4b05      	ldr	r3, [pc, #20]	; (800612c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	0a9b      	lsrs	r3, r3, #10
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	4903      	ldr	r1, [pc, #12]	; (8006130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006122:	5ccb      	ldrb	r3, [r1, r3]
 8006124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006128:	4618      	mov	r0, r3
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40023800 	.word	0x40023800
 8006130:	08007df8 	.word	0x08007df8

08006134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006138:	f7ff ffdc 	bl	80060f4 <HAL_RCC_GetHCLKFreq>
 800613c:	4602      	mov	r2, r0
 800613e:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	0b5b      	lsrs	r3, r3, #13
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	4903      	ldr	r1, [pc, #12]	; (8006158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800614a:	5ccb      	ldrb	r3, [r1, r3]
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006150:	4618      	mov	r0, r3
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40023800 	.word	0x40023800
 8006158:	08007df8 	.word	0x08007df8

0800615c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e041      	b.n	80061f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fc ff18 	bl	8002fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f000 fab6 	bl	800670c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e041      	b.n	8006290 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7fc feeb 	bl	8002ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f000 fa67 	bl	800670c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d109      	bne.n	80062bc <HAL_TIM_PWM_Start+0x24>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	bf14      	ite	ne
 80062b4:	2301      	movne	r3, #1
 80062b6:	2300      	moveq	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	e022      	b.n	8006302 <HAL_TIM_PWM_Start+0x6a>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d109      	bne.n	80062d6 <HAL_TIM_PWM_Start+0x3e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	bf14      	ite	ne
 80062ce:	2301      	movne	r3, #1
 80062d0:	2300      	moveq	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	e015      	b.n	8006302 <HAL_TIM_PWM_Start+0x6a>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d109      	bne.n	80062f0 <HAL_TIM_PWM_Start+0x58>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	bf14      	ite	ne
 80062e8:	2301      	movne	r3, #1
 80062ea:	2300      	moveq	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	e008      	b.n	8006302 <HAL_TIM_PWM_Start+0x6a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	bf14      	ite	ne
 80062fc:	2301      	movne	r3, #1
 80062fe:	2300      	moveq	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e068      	b.n	80063dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d104      	bne.n	800631a <HAL_TIM_PWM_Start+0x82>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006318:	e013      	b.n	8006342 <HAL_TIM_PWM_Start+0xaa>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b04      	cmp	r3, #4
 800631e:	d104      	bne.n	800632a <HAL_TIM_PWM_Start+0x92>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006328:	e00b      	b.n	8006342 <HAL_TIM_PWM_Start+0xaa>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b08      	cmp	r3, #8
 800632e:	d104      	bne.n	800633a <HAL_TIM_PWM_Start+0xa2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006338:	e003      	b.n	8006342 <HAL_TIM_PWM_Start+0xaa>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2202      	movs	r2, #2
 800633e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2201      	movs	r2, #1
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fc84 	bl	8006c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a23      	ldr	r2, [pc, #140]	; (80063e4 <HAL_TIM_PWM_Start+0x14c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d107      	bne.n	800636a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006368:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <HAL_TIM_PWM_Start+0x14c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d018      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x10e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637c:	d013      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x10e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <HAL_TIM_PWM_Start+0x150>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00e      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x10e>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a17      	ldr	r2, [pc, #92]	; (80063ec <HAL_TIM_PWM_Start+0x154>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d009      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x10e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a16      	ldr	r2, [pc, #88]	; (80063f0 <HAL_TIM_PWM_Start+0x158>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d004      	beq.n	80063a6 <HAL_TIM_PWM_Start+0x10e>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a14      	ldr	r2, [pc, #80]	; (80063f4 <HAL_TIM_PWM_Start+0x15c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d111      	bne.n	80063ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b06      	cmp	r3, #6
 80063b6:	d010      	beq.n	80063da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0201 	orr.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c8:	e007      	b.n	80063da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0201 	orr.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40010000 	.word	0x40010000
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800
 80063f0:	40000c00 	.word	0x40000c00
 80063f4:	40014000 	.word	0x40014000

080063f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006412:	2302      	movs	r3, #2
 8006414:	e0ae      	b.n	8006574 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b0c      	cmp	r3, #12
 8006422:	f200 809f 	bhi.w	8006564 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006461 	.word	0x08006461
 8006430:	08006565 	.word	0x08006565
 8006434:	08006565 	.word	0x08006565
 8006438:	08006565 	.word	0x08006565
 800643c:	080064a1 	.word	0x080064a1
 8006440:	08006565 	.word	0x08006565
 8006444:	08006565 	.word	0x08006565
 8006448:	08006565 	.word	0x08006565
 800644c:	080064e3 	.word	0x080064e3
 8006450:	08006565 	.word	0x08006565
 8006454:	08006565 	.word	0x08006565
 8006458:	08006565 	.word	0x08006565
 800645c:	08006523 	.word	0x08006523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f9d0 	bl	800680c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0208 	orr.w	r2, r2, #8
 800647a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0204 	bic.w	r2, r2, #4
 800648a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6999      	ldr	r1, [r3, #24]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	619a      	str	r2, [r3, #24]
      break;
 800649e:	e064      	b.n	800656a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68b9      	ldr	r1, [r7, #8]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fa16 	bl	80068d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6999      	ldr	r1, [r3, #24]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	021a      	lsls	r2, r3, #8
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	619a      	str	r2, [r3, #24]
      break;
 80064e0:	e043      	b.n	800656a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fa61 	bl	80069b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69da      	ldr	r2, [r3, #28]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0208 	orr.w	r2, r2, #8
 80064fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69da      	ldr	r2, [r3, #28]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0204 	bic.w	r2, r2, #4
 800650c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69d9      	ldr	r1, [r3, #28]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	61da      	str	r2, [r3, #28]
      break;
 8006520:	e023      	b.n	800656a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	4618      	mov	r0, r3
 800652a:	f000 faab 	bl	8006a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800653c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69da      	ldr	r2, [r3, #28]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69d9      	ldr	r1, [r3, #28]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	021a      	lsls	r2, r3, #8
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	61da      	str	r2, [r3, #28]
      break;
 8006562:	e002      	b.n	800656a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	75fb      	strb	r3, [r7, #23]
      break;
 8006568:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006572:	7dfb      	ldrb	r3, [r7, #23]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_TIM_ConfigClockSource+0x1c>
 8006594:	2302      	movs	r3, #2
 8006596:	e0b4      	b.n	8006702 <HAL_TIM_ConfigClockSource+0x186>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d0:	d03e      	beq.n	8006650 <HAL_TIM_ConfigClockSource+0xd4>
 80065d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d6:	f200 8087 	bhi.w	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 80065da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065de:	f000 8086 	beq.w	80066ee <HAL_TIM_ConfigClockSource+0x172>
 80065e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e6:	d87f      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 80065e8:	2b70      	cmp	r3, #112	; 0x70
 80065ea:	d01a      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0xa6>
 80065ec:	2b70      	cmp	r3, #112	; 0x70
 80065ee:	d87b      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 80065f0:	2b60      	cmp	r3, #96	; 0x60
 80065f2:	d050      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x11a>
 80065f4:	2b60      	cmp	r3, #96	; 0x60
 80065f6:	d877      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 80065f8:	2b50      	cmp	r3, #80	; 0x50
 80065fa:	d03c      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0xfa>
 80065fc:	2b50      	cmp	r3, #80	; 0x50
 80065fe:	d873      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006600:	2b40      	cmp	r3, #64	; 0x40
 8006602:	d058      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006604:	2b40      	cmp	r3, #64	; 0x40
 8006606:	d86f      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006608:	2b30      	cmp	r3, #48	; 0x30
 800660a:	d064      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x15a>
 800660c:	2b30      	cmp	r3, #48	; 0x30
 800660e:	d86b      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006610:	2b20      	cmp	r3, #32
 8006612:	d060      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006614:	2b20      	cmp	r3, #32
 8006616:	d867      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d05c      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x15a>
 800661c:	2b10      	cmp	r3, #16
 800661e:	d05a      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006620:	e062      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	6899      	ldr	r1, [r3, #8]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f000 faf1 	bl	8006c18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	609a      	str	r2, [r3, #8]
      break;
 800664e:	e04f      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	6899      	ldr	r1, [r3, #8]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f000 fada 	bl	8006c18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006672:	609a      	str	r2, [r3, #8]
      break;
 8006674:	e03c      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	6859      	ldr	r1, [r3, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	461a      	mov	r2, r3
 8006684:	f000 fa4e 	bl	8006b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2150      	movs	r1, #80	; 0x50
 800668e:	4618      	mov	r0, r3
 8006690:	f000 faa7 	bl	8006be2 <TIM_ITRx_SetConfig>
      break;
 8006694:	e02c      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	6859      	ldr	r1, [r3, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	461a      	mov	r2, r3
 80066a4:	f000 fa6d 	bl	8006b82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2160      	movs	r1, #96	; 0x60
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fa97 	bl	8006be2 <TIM_ITRx_SetConfig>
      break;
 80066b4:	e01c      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	6859      	ldr	r1, [r3, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	461a      	mov	r2, r3
 80066c4:	f000 fa2e 	bl	8006b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2140      	movs	r1, #64	; 0x40
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fa87 	bl	8006be2 <TIM_ITRx_SetConfig>
      break;
 80066d4:	e00c      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f000 fa7e 	bl	8006be2 <TIM_ITRx_SetConfig>
      break;
 80066e6:	e003      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	73fb      	strb	r3, [r7, #15]
      break;
 80066ec:	e000      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006700:	7bfb      	ldrb	r3, [r7, #15]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a34      	ldr	r2, [pc, #208]	; (80067f0 <TIM_Base_SetConfig+0xe4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00f      	beq.n	8006744 <TIM_Base_SetConfig+0x38>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672a:	d00b      	beq.n	8006744 <TIM_Base_SetConfig+0x38>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a31      	ldr	r2, [pc, #196]	; (80067f4 <TIM_Base_SetConfig+0xe8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d007      	beq.n	8006744 <TIM_Base_SetConfig+0x38>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a30      	ldr	r2, [pc, #192]	; (80067f8 <TIM_Base_SetConfig+0xec>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d003      	beq.n	8006744 <TIM_Base_SetConfig+0x38>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a2f      	ldr	r2, [pc, #188]	; (80067fc <TIM_Base_SetConfig+0xf0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d108      	bne.n	8006756 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a25      	ldr	r2, [pc, #148]	; (80067f0 <TIM_Base_SetConfig+0xe4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d01b      	beq.n	8006796 <TIM_Base_SetConfig+0x8a>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006764:	d017      	beq.n	8006796 <TIM_Base_SetConfig+0x8a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a22      	ldr	r2, [pc, #136]	; (80067f4 <TIM_Base_SetConfig+0xe8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <TIM_Base_SetConfig+0x8a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a21      	ldr	r2, [pc, #132]	; (80067f8 <TIM_Base_SetConfig+0xec>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d00f      	beq.n	8006796 <TIM_Base_SetConfig+0x8a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a20      	ldr	r2, [pc, #128]	; (80067fc <TIM_Base_SetConfig+0xf0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00b      	beq.n	8006796 <TIM_Base_SetConfig+0x8a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a1f      	ldr	r2, [pc, #124]	; (8006800 <TIM_Base_SetConfig+0xf4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d007      	beq.n	8006796 <TIM_Base_SetConfig+0x8a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a1e      	ldr	r2, [pc, #120]	; (8006804 <TIM_Base_SetConfig+0xf8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d003      	beq.n	8006796 <TIM_Base_SetConfig+0x8a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a1d      	ldr	r2, [pc, #116]	; (8006808 <TIM_Base_SetConfig+0xfc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d108      	bne.n	80067a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a08      	ldr	r2, [pc, #32]	; (80067f0 <TIM_Base_SetConfig+0xe4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d103      	bne.n	80067dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	691a      	ldr	r2, [r3, #16]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	615a      	str	r2, [r3, #20]
}
 80067e2:	bf00      	nop
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	40010000 	.word	0x40010000
 80067f4:	40000400 	.word	0x40000400
 80067f8:	40000800 	.word	0x40000800
 80067fc:	40000c00 	.word	0x40000c00
 8006800:	40014000 	.word	0x40014000
 8006804:	40014400 	.word	0x40014400
 8006808:	40014800 	.word	0x40014800

0800680c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	f023 0201 	bic.w	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0303 	bic.w	r3, r3, #3
 8006842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f023 0302 	bic.w	r3, r3, #2
 8006854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <TIM_OC1_SetConfig+0xc8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d10c      	bne.n	8006882 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f023 0308 	bic.w	r3, r3, #8
 800686e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f023 0304 	bic.w	r3, r3, #4
 8006880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <TIM_OC1_SetConfig+0xc8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d111      	bne.n	80068ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	621a      	str	r2, [r3, #32]
}
 80068c8:	bf00      	nop
 80068ca:	371c      	adds	r7, #28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	40010000 	.word	0x40010000

080068d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f023 0210 	bic.w	r2, r3, #16
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800690e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	021b      	lsls	r3, r3, #8
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0320 	bic.w	r3, r3, #32
 8006922:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a1e      	ldr	r2, [pc, #120]	; (80069ac <TIM_OC2_SetConfig+0xd4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d10d      	bne.n	8006954 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800693e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4313      	orrs	r3, r2
 800694a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006952:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a15      	ldr	r2, [pc, #84]	; (80069ac <TIM_OC2_SetConfig+0xd4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d113      	bne.n	8006984 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800696a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40010000 	.word	0x40010000

080069b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0303 	bic.w	r3, r3, #3
 80069e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	021b      	lsls	r3, r3, #8
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <TIM_OC3_SetConfig+0xd0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d10d      	bne.n	8006a2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	021b      	lsls	r3, r3, #8
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a14      	ldr	r2, [pc, #80]	; (8006a80 <TIM_OC3_SetConfig+0xd0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d113      	bne.n	8006a5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	621a      	str	r2, [r3, #32]
}
 8006a74:	bf00      	nop
 8006a76:	371c      	adds	r7, #28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	40010000 	.word	0x40010000

08006a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	021b      	lsls	r3, r3, #8
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	031b      	lsls	r3, r3, #12
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a10      	ldr	r2, [pc, #64]	; (8006b20 <TIM_OC4_SetConfig+0x9c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d109      	bne.n	8006af8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	019b      	lsls	r3, r3, #6
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	621a      	str	r2, [r3, #32]
}
 8006b12:	bf00      	nop
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40010000 	.word	0x40010000

08006b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f023 0201 	bic.w	r2, r3, #1
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f023 030a 	bic.w	r3, r3, #10
 8006b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	621a      	str	r2, [r3, #32]
}
 8006b76:	bf00      	nop
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b087      	sub	sp, #28
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f023 0210 	bic.w	r2, r3, #16
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	031b      	lsls	r3, r3, #12
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	621a      	str	r2, [r3, #32]
}
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b085      	sub	sp, #20
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f043 0307 	orr.w	r3, r3, #7
 8006c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	609a      	str	r2, [r3, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	021a      	lsls	r2, r3, #8
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	609a      	str	r2, [r3, #8]
}
 8006c4c:	bf00      	nop
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 031f 	and.w	r3, r3, #31
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a1a      	ldr	r2, [r3, #32]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	401a      	ands	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a1a      	ldr	r2, [r3, #32]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c90:	431a      	orrs	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
	...

08006ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e050      	b.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a1c      	ldr	r2, [pc, #112]	; (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d018      	beq.n	8006d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d08:	d013      	beq.n	8006d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a18      	ldr	r2, [pc, #96]	; (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00e      	beq.n	8006d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a16      	ldr	r2, [pc, #88]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d009      	beq.n	8006d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a15      	ldr	r2, [pc, #84]	; (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d004      	beq.n	8006d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a13      	ldr	r2, [pc, #76]	; (8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d10c      	bne.n	8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	40010000 	.word	0x40010000
 8006d70:	40000400 	.word	0x40000400
 8006d74:	40000800 	.word	0x40000800
 8006d78:	40000c00 	.word	0x40000c00
 8006d7c:	40014000 	.word	0x40014000

08006d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e03f      	b.n	8006e12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fc f9ce 	bl	8003148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2224      	movs	r2, #36	; 0x24
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fb9b 	bl	8007500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695a      	ldr	r2, [r3, #20]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b08a      	sub	sp, #40	; 0x28
 8006e1e:	af02      	add	r7, sp, #8
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	603b      	str	r3, [r7, #0]
 8006e26:	4613      	mov	r3, r2
 8006e28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d17c      	bne.n	8006f34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <HAL_UART_Transmit+0x2c>
 8006e40:	88fb      	ldrh	r3, [r7, #6]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e075      	b.n	8006f36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_UART_Transmit+0x3e>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e06e      	b.n	8006f36 <HAL_UART_Transmit+0x11c>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2221      	movs	r2, #33	; 0x21
 8006e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e6e:	f7fc fa75 	bl	800335c <HAL_GetTick>
 8006e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	88fa      	ldrh	r2, [r7, #6]
 8006e78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	88fa      	ldrh	r2, [r7, #6]
 8006e7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e88:	d108      	bne.n	8006e9c <HAL_UART_Transmit+0x82>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d104      	bne.n	8006e9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	e003      	b.n	8006ea4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006eac:	e02a      	b.n	8006f04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2180      	movs	r1, #128	; 0x80
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f988 	bl	80071ce <UART_WaitOnFlagUntilTimeout>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e036      	b.n	8006f36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10b      	bne.n	8006ee6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006edc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	61bb      	str	r3, [r7, #24]
 8006ee4:	e007      	b.n	8006ef6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	781a      	ldrb	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1cf      	bne.n	8006eae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2200      	movs	r2, #0
 8006f16:	2140      	movs	r1, #64	; 0x40
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f958 	bl	80071ce <UART_WaitOnFlagUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e006      	b.n	8006f36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	e000      	b.n	8006f36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f34:	2302      	movs	r3, #2
  }
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3720      	adds	r7, #32
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d11d      	bne.n	8006f94 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <HAL_UART_Receive_DMA+0x26>
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e016      	b.n	8006f96 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d101      	bne.n	8006f76 <HAL_UART_Receive_DMA+0x38>
 8006f72:	2302      	movs	r3, #2
 8006f74:	e00f      	b.n	8006f96 <HAL_UART_Receive_DMA+0x58>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006f84:	88fb      	ldrh	r3, [r7, #6]
 8006f86:	461a      	mov	r2, r3
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f98e 	bl	80072ac <UART_Start_Receive_DMA>
 8006f90:	4603      	mov	r3, r0
 8006f92:	e000      	b.n	8006f96 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006f94:	2302      	movs	r3, #2
  }
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b09c      	sub	sp, #112	; 0x70
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d172      	bne.n	80070e0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007016:	66bb      	str	r3, [r7, #104]	; 0x68
 8007018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	330c      	adds	r3, #12
 800701e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007020:	65ba      	str	r2, [r7, #88]	; 0x58
 8007022:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007028:	e841 2300 	strex	r3, r2, [r1]
 800702c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800702e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e5      	bne.n	8007000 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3314      	adds	r3, #20
 800703a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007046:	f023 0301 	bic.w	r3, r3, #1
 800704a:	667b      	str	r3, [r7, #100]	; 0x64
 800704c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3314      	adds	r3, #20
 8007052:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007054:	647a      	str	r2, [r7, #68]	; 0x44
 8007056:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800705a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e5      	bne.n	8007034 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3314      	adds	r3, #20
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	623b      	str	r3, [r7, #32]
   return(result);
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800707e:	663b      	str	r3, [r7, #96]	; 0x60
 8007080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3314      	adds	r3, #20
 8007086:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007088:	633a      	str	r2, [r7, #48]	; 0x30
 800708a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800708e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e5      	bne.n	8007068 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800709c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d119      	bne.n	80070e0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0310 	bic.w	r3, r3, #16
 80070c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	330c      	adds	r3, #12
 80070ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070cc:	61fa      	str	r2, [r7, #28]
 80070ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	69b9      	ldr	r1, [r7, #24]
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	617b      	str	r3, [r7, #20]
   return(result);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e5      	bne.n	80070ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d106      	bne.n	80070f6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070ec:	4619      	mov	r1, r3
 80070ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070f0:	f7ff ff69 	bl	8006fc6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070f4:	e002      	b.n	80070fc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80070f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070f8:	f7fa ff64 	bl	8001fc4 <HAL_UART_RxCpltCallback>
}
 80070fc:	bf00      	nop
 80070fe:	3770      	adds	r7, #112	; 0x70
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	2b01      	cmp	r3, #1
 8007118:	d108      	bne.n	800712c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800711e:	085b      	lsrs	r3, r3, #1
 8007120:	b29b      	uxth	r3, r3
 8007122:	4619      	mov	r1, r3
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f7ff ff4e 	bl	8006fc6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800712a:	e002      	b.n	8007132 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f7ff ff36 	bl	8006f9e <HAL_UART_RxHalfCpltCallback>
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007156:	2b80      	cmp	r3, #128	; 0x80
 8007158:	bf0c      	ite	eq
 800715a:	2301      	moveq	r3, #1
 800715c:	2300      	movne	r3, #0
 800715e:	b2db      	uxtb	r3, r3
 8007160:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b21      	cmp	r3, #33	; 0x21
 800716c:	d108      	bne.n	8007180 <UART_DMAError+0x46>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2200      	movs	r2, #0
 8007178:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800717a:	68b8      	ldr	r0, [r7, #8]
 800717c:	f000 f934 	bl	80073e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	bf0c      	ite	eq
 800718e:	2301      	moveq	r3, #1
 8007190:	2300      	movne	r3, #0
 8007192:	b2db      	uxtb	r3, r3
 8007194:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b22      	cmp	r3, #34	; 0x22
 80071a0:	d108      	bne.n	80071b4 <UART_DMAError+0x7a>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80071ae:	68b8      	ldr	r0, [r7, #8]
 80071b0:	f000 f942 	bl	8007438 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	f043 0210 	orr.w	r2, r3, #16
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071c0:	68b8      	ldr	r0, [r7, #8]
 80071c2:	f7ff fef6 	bl	8006fb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b090      	sub	sp, #64	; 0x40
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	603b      	str	r3, [r7, #0]
 80071da:	4613      	mov	r3, r2
 80071dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071de:	e050      	b.n	8007282 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e6:	d04c      	beq.n	8007282 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d007      	beq.n	80071fe <UART_WaitOnFlagUntilTimeout+0x30>
 80071ee:	f7fc f8b5 	bl	800335c <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d241      	bcs.n	8007282 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	330c      	adds	r3, #12
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	330c      	adds	r3, #12
 800721c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800721e:	637a      	str	r2, [r7, #52]	; 0x34
 8007220:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e5      	bne.n	80071fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3314      	adds	r3, #20
 8007238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	613b      	str	r3, [r7, #16]
   return(result);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f023 0301 	bic.w	r3, r3, #1
 8007248:	63bb      	str	r3, [r7, #56]	; 0x38
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3314      	adds	r3, #20
 8007250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007252:	623a      	str	r2, [r7, #32]
 8007254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	69f9      	ldr	r1, [r7, #28]
 8007258:	6a3a      	ldr	r2, [r7, #32]
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e5      	bne.n	8007232 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2220      	movs	r2, #32
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2220      	movs	r2, #32
 8007272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e00f      	b.n	80072a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4013      	ands	r3, r2
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	429a      	cmp	r2, r3
 8007290:	bf0c      	ite	eq
 8007292:	2301      	moveq	r3, #1
 8007294:	2300      	movne	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	461a      	mov	r2, r3
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	429a      	cmp	r2, r3
 800729e:	d09f      	beq.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3740      	adds	r7, #64	; 0x40
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b098      	sub	sp, #96	; 0x60
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	4613      	mov	r3, r2
 80072b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2222      	movs	r2, #34	; 0x22
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	4a40      	ldr	r2, [pc, #256]	; (80073dc <UART_Start_Receive_DMA+0x130>)
 80072da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	4a3f      	ldr	r2, [pc, #252]	; (80073e0 <UART_Start_Receive_DMA+0x134>)
 80072e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	4a3e      	ldr	r2, [pc, #248]	; (80073e4 <UART_Start_Receive_DMA+0x138>)
 80072ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	2200      	movs	r2, #0
 80072f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80072f4:	f107 0308 	add.w	r3, r7, #8
 80072f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3304      	adds	r3, #4
 8007304:	4619      	mov	r1, r3
 8007306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	f7fc fe68 	bl	8003fe0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007310:	2300      	movs	r3, #0
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d019      	beq.n	800736a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	330c      	adds	r3, #12
 800733c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800734c:	65bb      	str	r3, [r7, #88]	; 0x58
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	330c      	adds	r3, #12
 8007354:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007356:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007358:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800735c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e5      	bne.n	8007336 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3314      	adds	r3, #20
 8007370:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	f043 0301 	orr.w	r3, r3, #1
 8007380:	657b      	str	r3, [r7, #84]	; 0x54
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3314      	adds	r3, #20
 8007388:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800738a:	63ba      	str	r2, [r7, #56]	; 0x38
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e5      	bne.n	800736a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3314      	adds	r3, #20
 80073a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	617b      	str	r3, [r7, #20]
   return(result);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b4:	653b      	str	r3, [r7, #80]	; 0x50
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3314      	adds	r3, #20
 80073bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073be:	627a      	str	r2, [r7, #36]	; 0x24
 80073c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	6a39      	ldr	r1, [r7, #32]
 80073c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c6:	e841 2300 	strex	r3, r2, [r1]
 80073ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1e5      	bne.n	800739e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3760      	adds	r7, #96	; 0x60
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	08006fdf 	.word	0x08006fdf
 80073e0:	08007105 	.word	0x08007105
 80073e4:	0800713b 	.word	0x0800713b

080073e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b089      	sub	sp, #36	; 0x24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	330c      	adds	r3, #12
 80073f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007406:	61fb      	str	r3, [r7, #28]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	330c      	adds	r3, #12
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	61ba      	str	r2, [r7, #24]
 8007412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6979      	ldr	r1, [r7, #20]
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	613b      	str	r3, [r7, #16]
   return(result);
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e5      	bne.n	80073f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800742c:	bf00      	nop
 800742e:	3724      	adds	r7, #36	; 0x24
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007438:	b480      	push	{r7}
 800743a:	b095      	sub	sp, #84	; 0x54
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	330c      	adds	r3, #12
 8007446:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330c      	adds	r3, #12
 800745e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007460:	643a      	str	r2, [r7, #64]	; 0x40
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007466:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e5      	bne.n	8007440 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3314      	adds	r3, #20
 800747a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	61fb      	str	r3, [r7, #28]
   return(result);
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	f023 0301 	bic.w	r3, r3, #1
 800748a:	64bb      	str	r3, [r7, #72]	; 0x48
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3314      	adds	r3, #20
 8007492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007494:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800749a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e5      	bne.n	8007474 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d119      	bne.n	80074e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	330c      	adds	r3, #12
 80074b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	e853 3f00 	ldrex	r3, [r3]
 80074be:	60bb      	str	r3, [r7, #8]
   return(result);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f023 0310 	bic.w	r3, r3, #16
 80074c6:	647b      	str	r3, [r7, #68]	; 0x44
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	330c      	adds	r3, #12
 80074ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074d0:	61ba      	str	r2, [r7, #24]
 80074d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6979      	ldr	r1, [r7, #20]
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	613b      	str	r3, [r7, #16]
   return(result);
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e5      	bne.n	80074b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2220      	movs	r2, #32
 80074e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074f2:	bf00      	nop
 80074f4:	3754      	adds	r7, #84	; 0x54
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
	...

08007500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007504:	b0c0      	sub	sp, #256	; 0x100
 8007506:	af00      	add	r7, sp, #0
 8007508:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751c:	68d9      	ldr	r1, [r3, #12]
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	ea40 0301 	orr.w	r3, r0, r1
 8007528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800752a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	431a      	orrs	r2, r3
 8007538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	431a      	orrs	r2, r3
 8007540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800754c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007558:	f021 010c 	bic.w	r1, r1, #12
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007566:	430b      	orrs	r3, r1
 8007568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757a:	6999      	ldr	r1, [r3, #24]
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	ea40 0301 	orr.w	r3, r0, r1
 8007586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	4b8f      	ldr	r3, [pc, #572]	; (80077cc <UART_SetConfig+0x2cc>)
 8007590:	429a      	cmp	r2, r3
 8007592:	d005      	beq.n	80075a0 <UART_SetConfig+0xa0>
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4b8d      	ldr	r3, [pc, #564]	; (80077d0 <UART_SetConfig+0x2d0>)
 800759c:	429a      	cmp	r2, r3
 800759e:	d104      	bne.n	80075aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075a0:	f7fe fdc8 	bl	8006134 <HAL_RCC_GetPCLK2Freq>
 80075a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80075a8:	e003      	b.n	80075b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075aa:	f7fe fdaf 	bl	800610c <HAL_RCC_GetPCLK1Freq>
 80075ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075bc:	f040 810c 	bne.w	80077d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	1891      	adds	r1, r2, r2
 80075d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80075da:	415b      	adcs	r3, r3
 80075dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075e2:	4621      	mov	r1, r4
 80075e4:	eb12 0801 	adds.w	r8, r2, r1
 80075e8:	4629      	mov	r1, r5
 80075ea:	eb43 0901 	adc.w	r9, r3, r1
 80075ee:	f04f 0200 	mov.w	r2, #0
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007602:	4690      	mov	r8, r2
 8007604:	4699      	mov	r9, r3
 8007606:	4623      	mov	r3, r4
 8007608:	eb18 0303 	adds.w	r3, r8, r3
 800760c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007610:	462b      	mov	r3, r5
 8007612:	eb49 0303 	adc.w	r3, r9, r3
 8007616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800761a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007626:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800762a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800762e:	460b      	mov	r3, r1
 8007630:	18db      	adds	r3, r3, r3
 8007632:	653b      	str	r3, [r7, #80]	; 0x50
 8007634:	4613      	mov	r3, r2
 8007636:	eb42 0303 	adc.w	r3, r2, r3
 800763a:	657b      	str	r3, [r7, #84]	; 0x54
 800763c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007644:	f7f8 fdc8 	bl	80001d8 <__aeabi_uldivmod>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4b61      	ldr	r3, [pc, #388]	; (80077d4 <UART_SetConfig+0x2d4>)
 800764e:	fba3 2302 	umull	r2, r3, r3, r2
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	011c      	lsls	r4, r3, #4
 8007656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800765a:	2200      	movs	r2, #0
 800765c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007660:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007668:	4642      	mov	r2, r8
 800766a:	464b      	mov	r3, r9
 800766c:	1891      	adds	r1, r2, r2
 800766e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007670:	415b      	adcs	r3, r3
 8007672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007678:	4641      	mov	r1, r8
 800767a:	eb12 0a01 	adds.w	sl, r2, r1
 800767e:	4649      	mov	r1, r9
 8007680:	eb43 0b01 	adc.w	fp, r3, r1
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007698:	4692      	mov	sl, r2
 800769a:	469b      	mov	fp, r3
 800769c:	4643      	mov	r3, r8
 800769e:	eb1a 0303 	adds.w	r3, sl, r3
 80076a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076a6:	464b      	mov	r3, r9
 80076a8:	eb4b 0303 	adc.w	r3, fp, r3
 80076ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80076c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80076c4:	460b      	mov	r3, r1
 80076c6:	18db      	adds	r3, r3, r3
 80076c8:	643b      	str	r3, [r7, #64]	; 0x40
 80076ca:	4613      	mov	r3, r2
 80076cc:	eb42 0303 	adc.w	r3, r2, r3
 80076d0:	647b      	str	r3, [r7, #68]	; 0x44
 80076d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076da:	f7f8 fd7d 	bl	80001d8 <__aeabi_uldivmod>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	4b3b      	ldr	r3, [pc, #236]	; (80077d4 <UART_SetConfig+0x2d4>)
 80076e6:	fba3 2301 	umull	r2, r3, r3, r1
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	2264      	movs	r2, #100	; 0x64
 80076ee:	fb02 f303 	mul.w	r3, r2, r3
 80076f2:	1acb      	subs	r3, r1, r3
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076fa:	4b36      	ldr	r3, [pc, #216]	; (80077d4 <UART_SetConfig+0x2d4>)
 80076fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007700:	095b      	lsrs	r3, r3, #5
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007708:	441c      	add	r4, r3
 800770a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800770e:	2200      	movs	r2, #0
 8007710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007714:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800771c:	4642      	mov	r2, r8
 800771e:	464b      	mov	r3, r9
 8007720:	1891      	adds	r1, r2, r2
 8007722:	63b9      	str	r1, [r7, #56]	; 0x38
 8007724:	415b      	adcs	r3, r3
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800772c:	4641      	mov	r1, r8
 800772e:	1851      	adds	r1, r2, r1
 8007730:	6339      	str	r1, [r7, #48]	; 0x30
 8007732:	4649      	mov	r1, r9
 8007734:	414b      	adcs	r3, r1
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
 8007738:	f04f 0200 	mov.w	r2, #0
 800773c:	f04f 0300 	mov.w	r3, #0
 8007740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007744:	4659      	mov	r1, fp
 8007746:	00cb      	lsls	r3, r1, #3
 8007748:	4651      	mov	r1, sl
 800774a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800774e:	4651      	mov	r1, sl
 8007750:	00ca      	lsls	r2, r1, #3
 8007752:	4610      	mov	r0, r2
 8007754:	4619      	mov	r1, r3
 8007756:	4603      	mov	r3, r0
 8007758:	4642      	mov	r2, r8
 800775a:	189b      	adds	r3, r3, r2
 800775c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007760:	464b      	mov	r3, r9
 8007762:	460a      	mov	r2, r1
 8007764:	eb42 0303 	adc.w	r3, r2, r3
 8007768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007778:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800777c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007780:	460b      	mov	r3, r1
 8007782:	18db      	adds	r3, r3, r3
 8007784:	62bb      	str	r3, [r7, #40]	; 0x28
 8007786:	4613      	mov	r3, r2
 8007788:	eb42 0303 	adc.w	r3, r2, r3
 800778c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800778e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007796:	f7f8 fd1f 	bl	80001d8 <__aeabi_uldivmod>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <UART_SetConfig+0x2d4>)
 80077a0:	fba3 1302 	umull	r1, r3, r3, r2
 80077a4:	095b      	lsrs	r3, r3, #5
 80077a6:	2164      	movs	r1, #100	; 0x64
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	3332      	adds	r3, #50	; 0x32
 80077b2:	4a08      	ldr	r2, [pc, #32]	; (80077d4 <UART_SetConfig+0x2d4>)
 80077b4:	fba2 2303 	umull	r2, r3, r2, r3
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	f003 0207 	and.w	r2, r3, #7
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4422      	add	r2, r4
 80077c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077c8:	e105      	b.n	80079d6 <UART_SetConfig+0x4d6>
 80077ca:	bf00      	nop
 80077cc:	40011000 	.word	0x40011000
 80077d0:	40011400 	.word	0x40011400
 80077d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077ea:	4642      	mov	r2, r8
 80077ec:	464b      	mov	r3, r9
 80077ee:	1891      	adds	r1, r2, r2
 80077f0:	6239      	str	r1, [r7, #32]
 80077f2:	415b      	adcs	r3, r3
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
 80077f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077fa:	4641      	mov	r1, r8
 80077fc:	1854      	adds	r4, r2, r1
 80077fe:	4649      	mov	r1, r9
 8007800:	eb43 0501 	adc.w	r5, r3, r1
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	00eb      	lsls	r3, r5, #3
 800780e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007812:	00e2      	lsls	r2, r4, #3
 8007814:	4614      	mov	r4, r2
 8007816:	461d      	mov	r5, r3
 8007818:	4643      	mov	r3, r8
 800781a:	18e3      	adds	r3, r4, r3
 800781c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007820:	464b      	mov	r3, r9
 8007822:	eb45 0303 	adc.w	r3, r5, r3
 8007826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800782a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007836:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	f04f 0300 	mov.w	r3, #0
 8007842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007846:	4629      	mov	r1, r5
 8007848:	008b      	lsls	r3, r1, #2
 800784a:	4621      	mov	r1, r4
 800784c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007850:	4621      	mov	r1, r4
 8007852:	008a      	lsls	r2, r1, #2
 8007854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007858:	f7f8 fcbe 	bl	80001d8 <__aeabi_uldivmod>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4b60      	ldr	r3, [pc, #384]	; (80079e4 <UART_SetConfig+0x4e4>)
 8007862:	fba3 2302 	umull	r2, r3, r3, r2
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	011c      	lsls	r4, r3, #4
 800786a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800786e:	2200      	movs	r2, #0
 8007870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007874:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800787c:	4642      	mov	r2, r8
 800787e:	464b      	mov	r3, r9
 8007880:	1891      	adds	r1, r2, r2
 8007882:	61b9      	str	r1, [r7, #24]
 8007884:	415b      	adcs	r3, r3
 8007886:	61fb      	str	r3, [r7, #28]
 8007888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800788c:	4641      	mov	r1, r8
 800788e:	1851      	adds	r1, r2, r1
 8007890:	6139      	str	r1, [r7, #16]
 8007892:	4649      	mov	r1, r9
 8007894:	414b      	adcs	r3, r1
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078a4:	4659      	mov	r1, fp
 80078a6:	00cb      	lsls	r3, r1, #3
 80078a8:	4651      	mov	r1, sl
 80078aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ae:	4651      	mov	r1, sl
 80078b0:	00ca      	lsls	r2, r1, #3
 80078b2:	4610      	mov	r0, r2
 80078b4:	4619      	mov	r1, r3
 80078b6:	4603      	mov	r3, r0
 80078b8:	4642      	mov	r2, r8
 80078ba:	189b      	adds	r3, r3, r2
 80078bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078c0:	464b      	mov	r3, r9
 80078c2:	460a      	mov	r2, r1
 80078c4:	eb42 0303 	adc.w	r3, r2, r3
 80078c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80078d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078e4:	4649      	mov	r1, r9
 80078e6:	008b      	lsls	r3, r1, #2
 80078e8:	4641      	mov	r1, r8
 80078ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078ee:	4641      	mov	r1, r8
 80078f0:	008a      	lsls	r2, r1, #2
 80078f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078f6:	f7f8 fc6f 	bl	80001d8 <__aeabi_uldivmod>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4b39      	ldr	r3, [pc, #228]	; (80079e4 <UART_SetConfig+0x4e4>)
 8007900:	fba3 1302 	umull	r1, r3, r3, r2
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	2164      	movs	r1, #100	; 0x64
 8007908:	fb01 f303 	mul.w	r3, r1, r3
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	3332      	adds	r3, #50	; 0x32
 8007912:	4a34      	ldr	r2, [pc, #208]	; (80079e4 <UART_SetConfig+0x4e4>)
 8007914:	fba2 2303 	umull	r2, r3, r2, r3
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800791e:	441c      	add	r4, r3
 8007920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007924:	2200      	movs	r2, #0
 8007926:	673b      	str	r3, [r7, #112]	; 0x70
 8007928:	677a      	str	r2, [r7, #116]	; 0x74
 800792a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800792e:	4642      	mov	r2, r8
 8007930:	464b      	mov	r3, r9
 8007932:	1891      	adds	r1, r2, r2
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	415b      	adcs	r3, r3
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800793e:	4641      	mov	r1, r8
 8007940:	1851      	adds	r1, r2, r1
 8007942:	6039      	str	r1, [r7, #0]
 8007944:	4649      	mov	r1, r9
 8007946:	414b      	adcs	r3, r1
 8007948:	607b      	str	r3, [r7, #4]
 800794a:	f04f 0200 	mov.w	r2, #0
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007956:	4659      	mov	r1, fp
 8007958:	00cb      	lsls	r3, r1, #3
 800795a:	4651      	mov	r1, sl
 800795c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007960:	4651      	mov	r1, sl
 8007962:	00ca      	lsls	r2, r1, #3
 8007964:	4610      	mov	r0, r2
 8007966:	4619      	mov	r1, r3
 8007968:	4603      	mov	r3, r0
 800796a:	4642      	mov	r2, r8
 800796c:	189b      	adds	r3, r3, r2
 800796e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007970:	464b      	mov	r3, r9
 8007972:	460a      	mov	r2, r1
 8007974:	eb42 0303 	adc.w	r3, r2, r3
 8007978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800797a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	663b      	str	r3, [r7, #96]	; 0x60
 8007984:	667a      	str	r2, [r7, #100]	; 0x64
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007992:	4649      	mov	r1, r9
 8007994:	008b      	lsls	r3, r1, #2
 8007996:	4641      	mov	r1, r8
 8007998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800799c:	4641      	mov	r1, r8
 800799e:	008a      	lsls	r2, r1, #2
 80079a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80079a4:	f7f8 fc18 	bl	80001d8 <__aeabi_uldivmod>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4b0d      	ldr	r3, [pc, #52]	; (80079e4 <UART_SetConfig+0x4e4>)
 80079ae:	fba3 1302 	umull	r1, r3, r3, r2
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	2164      	movs	r1, #100	; 0x64
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	3332      	adds	r3, #50	; 0x32
 80079c0:	4a08      	ldr	r2, [pc, #32]	; (80079e4 <UART_SetConfig+0x4e4>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	f003 020f 	and.w	r2, r3, #15
 80079cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4422      	add	r2, r4
 80079d4:	609a      	str	r2, [r3, #8]
}
 80079d6:	bf00      	nop
 80079d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079dc:	46bd      	mov	sp, r7
 80079de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079e2:	bf00      	nop
 80079e4:	51eb851f 	.word	0x51eb851f

080079e8 <_ZdlPvj>:
 80079e8:	f000 b81a 	b.w	8007a20 <_ZdlPv>

080079ec <_Znwj>:
 80079ec:	2801      	cmp	r0, #1
 80079ee:	bf38      	it	cc
 80079f0:	2001      	movcc	r0, #1
 80079f2:	b510      	push	{r4, lr}
 80079f4:	4604      	mov	r4, r0
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 f84e 	bl	8007a98 <malloc>
 80079fc:	b930      	cbnz	r0, 8007a0c <_Znwj+0x20>
 80079fe:	f000 f811 	bl	8007a24 <_ZSt15get_new_handlerv>
 8007a02:	b908      	cbnz	r0, 8007a08 <_Znwj+0x1c>
 8007a04:	f000 f816 	bl	8007a34 <abort>
 8007a08:	4780      	blx	r0
 8007a0a:	e7f4      	b.n	80079f6 <_Znwj+0xa>
 8007a0c:	bd10      	pop	{r4, pc}

08007a0e <_ZSt17__throw_bad_allocv>:
 8007a0e:	b508      	push	{r3, lr}
 8007a10:	f000 f810 	bl	8007a34 <abort>

08007a14 <_ZSt20__throw_length_errorPKc>:
 8007a14:	b508      	push	{r3, lr}
 8007a16:	f000 f80d 	bl	8007a34 <abort>

08007a1a <_ZSt25__throw_bad_function_callv>:
 8007a1a:	b508      	push	{r3, lr}
 8007a1c:	f000 f80a 	bl	8007a34 <abort>

08007a20 <_ZdlPv>:
 8007a20:	f000 b842 	b.w	8007aa8 <free>

08007a24 <_ZSt15get_new_handlerv>:
 8007a24:	4b02      	ldr	r3, [pc, #8]	; (8007a30 <_ZSt15get_new_handlerv+0xc>)
 8007a26:	6818      	ldr	r0, [r3, #0]
 8007a28:	f3bf 8f5b 	dmb	ish
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	20000434 	.word	0x20000434

08007a34 <abort>:
 8007a34:	b508      	push	{r3, lr}
 8007a36:	2006      	movs	r0, #6
 8007a38:	f000 f986 	bl	8007d48 <raise>
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	f7fb f9b5 	bl	8002dac <_exit>
	...

08007a44 <__errno>:
 8007a44:	4b01      	ldr	r3, [pc, #4]	; (8007a4c <__errno+0x8>)
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	20000010 	.word	0x20000010

08007a50 <__libc_init_array>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	4d0d      	ldr	r5, [pc, #52]	; (8007a88 <__libc_init_array+0x38>)
 8007a54:	4c0d      	ldr	r4, [pc, #52]	; (8007a8c <__libc_init_array+0x3c>)
 8007a56:	1b64      	subs	r4, r4, r5
 8007a58:	10a4      	asrs	r4, r4, #2
 8007a5a:	2600      	movs	r6, #0
 8007a5c:	42a6      	cmp	r6, r4
 8007a5e:	d109      	bne.n	8007a74 <__libc_init_array+0x24>
 8007a60:	4d0b      	ldr	r5, [pc, #44]	; (8007a90 <__libc_init_array+0x40>)
 8007a62:	4c0c      	ldr	r4, [pc, #48]	; (8007a94 <__libc_init_array+0x44>)
 8007a64:	f000 f99a 	bl	8007d9c <_init>
 8007a68:	1b64      	subs	r4, r4, r5
 8007a6a:	10a4      	asrs	r4, r4, #2
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	42a6      	cmp	r6, r4
 8007a70:	d105      	bne.n	8007a7e <__libc_init_array+0x2e>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a78:	4798      	blx	r3
 8007a7a:	3601      	adds	r6, #1
 8007a7c:	e7ee      	b.n	8007a5c <__libc_init_array+0xc>
 8007a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a82:	4798      	blx	r3
 8007a84:	3601      	adds	r6, #1
 8007a86:	e7f2      	b.n	8007a6e <__libc_init_array+0x1e>
 8007a88:	08007e10 	.word	0x08007e10
 8007a8c:	08007e10 	.word	0x08007e10
 8007a90:	08007e10 	.word	0x08007e10
 8007a94:	08007e18 	.word	0x08007e18

08007a98 <malloc>:
 8007a98:	4b02      	ldr	r3, [pc, #8]	; (8007aa4 <malloc+0xc>)
 8007a9a:	4601      	mov	r1, r0
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	f000 b8a7 	b.w	8007bf0 <_malloc_r>
 8007aa2:	bf00      	nop
 8007aa4:	20000010 	.word	0x20000010

08007aa8 <free>:
 8007aa8:	4b02      	ldr	r3, [pc, #8]	; (8007ab4 <free+0xc>)
 8007aaa:	4601      	mov	r1, r0
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	f000 b833 	b.w	8007b18 <_free_r>
 8007ab2:	bf00      	nop
 8007ab4:	20000010 	.word	0x20000010

08007ab8 <memcpy>:
 8007ab8:	440a      	add	r2, r1
 8007aba:	4291      	cmp	r1, r2
 8007abc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007ac0:	d100      	bne.n	8007ac4 <memcpy+0xc>
 8007ac2:	4770      	bx	lr
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ace:	4291      	cmp	r1, r2
 8007ad0:	d1f9      	bne.n	8007ac6 <memcpy+0xe>
 8007ad2:	bd10      	pop	{r4, pc}

08007ad4 <memmove>:
 8007ad4:	4288      	cmp	r0, r1
 8007ad6:	b510      	push	{r4, lr}
 8007ad8:	eb01 0402 	add.w	r4, r1, r2
 8007adc:	d902      	bls.n	8007ae4 <memmove+0x10>
 8007ade:	4284      	cmp	r4, r0
 8007ae0:	4623      	mov	r3, r4
 8007ae2:	d807      	bhi.n	8007af4 <memmove+0x20>
 8007ae4:	1e43      	subs	r3, r0, #1
 8007ae6:	42a1      	cmp	r1, r4
 8007ae8:	d008      	beq.n	8007afc <memmove+0x28>
 8007aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007af2:	e7f8      	b.n	8007ae6 <memmove+0x12>
 8007af4:	4402      	add	r2, r0
 8007af6:	4601      	mov	r1, r0
 8007af8:	428a      	cmp	r2, r1
 8007afa:	d100      	bne.n	8007afe <memmove+0x2a>
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b06:	e7f7      	b.n	8007af8 <memmove+0x24>

08007b08 <memset>:
 8007b08:	4402      	add	r2, r0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d100      	bne.n	8007b12 <memset+0xa>
 8007b10:	4770      	bx	lr
 8007b12:	f803 1b01 	strb.w	r1, [r3], #1
 8007b16:	e7f9      	b.n	8007b0c <memset+0x4>

08007b18 <_free_r>:
 8007b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b1a:	2900      	cmp	r1, #0
 8007b1c:	d044      	beq.n	8007ba8 <_free_r+0x90>
 8007b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b22:	9001      	str	r0, [sp, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f1a1 0404 	sub.w	r4, r1, #4
 8007b2a:	bfb8      	it	lt
 8007b2c:	18e4      	addlt	r4, r4, r3
 8007b2e:	f000 f927 	bl	8007d80 <__malloc_lock>
 8007b32:	4a1e      	ldr	r2, [pc, #120]	; (8007bac <_free_r+0x94>)
 8007b34:	9801      	ldr	r0, [sp, #4]
 8007b36:	6813      	ldr	r3, [r2, #0]
 8007b38:	b933      	cbnz	r3, 8007b48 <_free_r+0x30>
 8007b3a:	6063      	str	r3, [r4, #4]
 8007b3c:	6014      	str	r4, [r2, #0]
 8007b3e:	b003      	add	sp, #12
 8007b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b44:	f000 b922 	b.w	8007d8c <__malloc_unlock>
 8007b48:	42a3      	cmp	r3, r4
 8007b4a:	d908      	bls.n	8007b5e <_free_r+0x46>
 8007b4c:	6825      	ldr	r5, [r4, #0]
 8007b4e:	1961      	adds	r1, r4, r5
 8007b50:	428b      	cmp	r3, r1
 8007b52:	bf01      	itttt	eq
 8007b54:	6819      	ldreq	r1, [r3, #0]
 8007b56:	685b      	ldreq	r3, [r3, #4]
 8007b58:	1949      	addeq	r1, r1, r5
 8007b5a:	6021      	streq	r1, [r4, #0]
 8007b5c:	e7ed      	b.n	8007b3a <_free_r+0x22>
 8007b5e:	461a      	mov	r2, r3
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	b10b      	cbz	r3, 8007b68 <_free_r+0x50>
 8007b64:	42a3      	cmp	r3, r4
 8007b66:	d9fa      	bls.n	8007b5e <_free_r+0x46>
 8007b68:	6811      	ldr	r1, [r2, #0]
 8007b6a:	1855      	adds	r5, r2, r1
 8007b6c:	42a5      	cmp	r5, r4
 8007b6e:	d10b      	bne.n	8007b88 <_free_r+0x70>
 8007b70:	6824      	ldr	r4, [r4, #0]
 8007b72:	4421      	add	r1, r4
 8007b74:	1854      	adds	r4, r2, r1
 8007b76:	42a3      	cmp	r3, r4
 8007b78:	6011      	str	r1, [r2, #0]
 8007b7a:	d1e0      	bne.n	8007b3e <_free_r+0x26>
 8007b7c:	681c      	ldr	r4, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	6053      	str	r3, [r2, #4]
 8007b82:	4421      	add	r1, r4
 8007b84:	6011      	str	r1, [r2, #0]
 8007b86:	e7da      	b.n	8007b3e <_free_r+0x26>
 8007b88:	d902      	bls.n	8007b90 <_free_r+0x78>
 8007b8a:	230c      	movs	r3, #12
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	e7d6      	b.n	8007b3e <_free_r+0x26>
 8007b90:	6825      	ldr	r5, [r4, #0]
 8007b92:	1961      	adds	r1, r4, r5
 8007b94:	428b      	cmp	r3, r1
 8007b96:	bf04      	itt	eq
 8007b98:	6819      	ldreq	r1, [r3, #0]
 8007b9a:	685b      	ldreq	r3, [r3, #4]
 8007b9c:	6063      	str	r3, [r4, #4]
 8007b9e:	bf04      	itt	eq
 8007ba0:	1949      	addeq	r1, r1, r5
 8007ba2:	6021      	streq	r1, [r4, #0]
 8007ba4:	6054      	str	r4, [r2, #4]
 8007ba6:	e7ca      	b.n	8007b3e <_free_r+0x26>
 8007ba8:	b003      	add	sp, #12
 8007baa:	bd30      	pop	{r4, r5, pc}
 8007bac:	20000438 	.word	0x20000438

08007bb0 <sbrk_aligned>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	4e0e      	ldr	r6, [pc, #56]	; (8007bec <sbrk_aligned+0x3c>)
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	6831      	ldr	r1, [r6, #0]
 8007bb8:	4605      	mov	r5, r0
 8007bba:	b911      	cbnz	r1, 8007bc2 <sbrk_aligned+0x12>
 8007bbc:	f000 f88c 	bl	8007cd8 <_sbrk_r>
 8007bc0:	6030      	str	r0, [r6, #0]
 8007bc2:	4621      	mov	r1, r4
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	f000 f887 	bl	8007cd8 <_sbrk_r>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	d00a      	beq.n	8007be4 <sbrk_aligned+0x34>
 8007bce:	1cc4      	adds	r4, r0, #3
 8007bd0:	f024 0403 	bic.w	r4, r4, #3
 8007bd4:	42a0      	cmp	r0, r4
 8007bd6:	d007      	beq.n	8007be8 <sbrk_aligned+0x38>
 8007bd8:	1a21      	subs	r1, r4, r0
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f000 f87c 	bl	8007cd8 <_sbrk_r>
 8007be0:	3001      	adds	r0, #1
 8007be2:	d101      	bne.n	8007be8 <sbrk_aligned+0x38>
 8007be4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007be8:	4620      	mov	r0, r4
 8007bea:	bd70      	pop	{r4, r5, r6, pc}
 8007bec:	2000043c 	.word	0x2000043c

08007bf0 <_malloc_r>:
 8007bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf4:	1ccd      	adds	r5, r1, #3
 8007bf6:	f025 0503 	bic.w	r5, r5, #3
 8007bfa:	3508      	adds	r5, #8
 8007bfc:	2d0c      	cmp	r5, #12
 8007bfe:	bf38      	it	cc
 8007c00:	250c      	movcc	r5, #12
 8007c02:	2d00      	cmp	r5, #0
 8007c04:	4607      	mov	r7, r0
 8007c06:	db01      	blt.n	8007c0c <_malloc_r+0x1c>
 8007c08:	42a9      	cmp	r1, r5
 8007c0a:	d905      	bls.n	8007c18 <_malloc_r+0x28>
 8007c0c:	230c      	movs	r3, #12
 8007c0e:	603b      	str	r3, [r7, #0]
 8007c10:	2600      	movs	r6, #0
 8007c12:	4630      	mov	r0, r6
 8007c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c18:	4e2e      	ldr	r6, [pc, #184]	; (8007cd4 <_malloc_r+0xe4>)
 8007c1a:	f000 f8b1 	bl	8007d80 <__malloc_lock>
 8007c1e:	6833      	ldr	r3, [r6, #0]
 8007c20:	461c      	mov	r4, r3
 8007c22:	bb34      	cbnz	r4, 8007c72 <_malloc_r+0x82>
 8007c24:	4629      	mov	r1, r5
 8007c26:	4638      	mov	r0, r7
 8007c28:	f7ff ffc2 	bl	8007bb0 <sbrk_aligned>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	4604      	mov	r4, r0
 8007c30:	d14d      	bne.n	8007cce <_malloc_r+0xde>
 8007c32:	6834      	ldr	r4, [r6, #0]
 8007c34:	4626      	mov	r6, r4
 8007c36:	2e00      	cmp	r6, #0
 8007c38:	d140      	bne.n	8007cbc <_malloc_r+0xcc>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	4631      	mov	r1, r6
 8007c3e:	4638      	mov	r0, r7
 8007c40:	eb04 0803 	add.w	r8, r4, r3
 8007c44:	f000 f848 	bl	8007cd8 <_sbrk_r>
 8007c48:	4580      	cmp	r8, r0
 8007c4a:	d13a      	bne.n	8007cc2 <_malloc_r+0xd2>
 8007c4c:	6821      	ldr	r1, [r4, #0]
 8007c4e:	3503      	adds	r5, #3
 8007c50:	1a6d      	subs	r5, r5, r1
 8007c52:	f025 0503 	bic.w	r5, r5, #3
 8007c56:	3508      	adds	r5, #8
 8007c58:	2d0c      	cmp	r5, #12
 8007c5a:	bf38      	it	cc
 8007c5c:	250c      	movcc	r5, #12
 8007c5e:	4629      	mov	r1, r5
 8007c60:	4638      	mov	r0, r7
 8007c62:	f7ff ffa5 	bl	8007bb0 <sbrk_aligned>
 8007c66:	3001      	adds	r0, #1
 8007c68:	d02b      	beq.n	8007cc2 <_malloc_r+0xd2>
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	442b      	add	r3, r5
 8007c6e:	6023      	str	r3, [r4, #0]
 8007c70:	e00e      	b.n	8007c90 <_malloc_r+0xa0>
 8007c72:	6822      	ldr	r2, [r4, #0]
 8007c74:	1b52      	subs	r2, r2, r5
 8007c76:	d41e      	bmi.n	8007cb6 <_malloc_r+0xc6>
 8007c78:	2a0b      	cmp	r2, #11
 8007c7a:	d916      	bls.n	8007caa <_malloc_r+0xba>
 8007c7c:	1961      	adds	r1, r4, r5
 8007c7e:	42a3      	cmp	r3, r4
 8007c80:	6025      	str	r5, [r4, #0]
 8007c82:	bf18      	it	ne
 8007c84:	6059      	strne	r1, [r3, #4]
 8007c86:	6863      	ldr	r3, [r4, #4]
 8007c88:	bf08      	it	eq
 8007c8a:	6031      	streq	r1, [r6, #0]
 8007c8c:	5162      	str	r2, [r4, r5]
 8007c8e:	604b      	str	r3, [r1, #4]
 8007c90:	4638      	mov	r0, r7
 8007c92:	f104 060b 	add.w	r6, r4, #11
 8007c96:	f000 f879 	bl	8007d8c <__malloc_unlock>
 8007c9a:	f026 0607 	bic.w	r6, r6, #7
 8007c9e:	1d23      	adds	r3, r4, #4
 8007ca0:	1af2      	subs	r2, r6, r3
 8007ca2:	d0b6      	beq.n	8007c12 <_malloc_r+0x22>
 8007ca4:	1b9b      	subs	r3, r3, r6
 8007ca6:	50a3      	str	r3, [r4, r2]
 8007ca8:	e7b3      	b.n	8007c12 <_malloc_r+0x22>
 8007caa:	6862      	ldr	r2, [r4, #4]
 8007cac:	42a3      	cmp	r3, r4
 8007cae:	bf0c      	ite	eq
 8007cb0:	6032      	streq	r2, [r6, #0]
 8007cb2:	605a      	strne	r2, [r3, #4]
 8007cb4:	e7ec      	b.n	8007c90 <_malloc_r+0xa0>
 8007cb6:	4623      	mov	r3, r4
 8007cb8:	6864      	ldr	r4, [r4, #4]
 8007cba:	e7b2      	b.n	8007c22 <_malloc_r+0x32>
 8007cbc:	4634      	mov	r4, r6
 8007cbe:	6876      	ldr	r6, [r6, #4]
 8007cc0:	e7b9      	b.n	8007c36 <_malloc_r+0x46>
 8007cc2:	230c      	movs	r3, #12
 8007cc4:	603b      	str	r3, [r7, #0]
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	f000 f860 	bl	8007d8c <__malloc_unlock>
 8007ccc:	e7a1      	b.n	8007c12 <_malloc_r+0x22>
 8007cce:	6025      	str	r5, [r4, #0]
 8007cd0:	e7de      	b.n	8007c90 <_malloc_r+0xa0>
 8007cd2:	bf00      	nop
 8007cd4:	20000438 	.word	0x20000438

08007cd8 <_sbrk_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4d06      	ldr	r5, [pc, #24]	; (8007cf4 <_sbrk_r+0x1c>)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	4604      	mov	r4, r0
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	602b      	str	r3, [r5, #0]
 8007ce4:	f7fb f86c 	bl	8002dc0 <_sbrk>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_sbrk_r+0x1a>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_sbrk_r+0x1a>
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	20000440 	.word	0x20000440

08007cf8 <_raise_r>:
 8007cf8:	291f      	cmp	r1, #31
 8007cfa:	b538      	push	{r3, r4, r5, lr}
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	460d      	mov	r5, r1
 8007d00:	d904      	bls.n	8007d0c <_raise_r+0x14>
 8007d02:	2316      	movs	r3, #22
 8007d04:	6003      	str	r3, [r0, #0]
 8007d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d0e:	b112      	cbz	r2, 8007d16 <_raise_r+0x1e>
 8007d10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d14:	b94b      	cbnz	r3, 8007d2a <_raise_r+0x32>
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 f830 	bl	8007d7c <_getpid_r>
 8007d1c:	462a      	mov	r2, r5
 8007d1e:	4601      	mov	r1, r0
 8007d20:	4620      	mov	r0, r4
 8007d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d26:	f000 b817 	b.w	8007d58 <_kill_r>
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d00a      	beq.n	8007d44 <_raise_r+0x4c>
 8007d2e:	1c59      	adds	r1, r3, #1
 8007d30:	d103      	bne.n	8007d3a <_raise_r+0x42>
 8007d32:	2316      	movs	r3, #22
 8007d34:	6003      	str	r3, [r0, #0]
 8007d36:	2001      	movs	r0, #1
 8007d38:	e7e7      	b.n	8007d0a <_raise_r+0x12>
 8007d3a:	2400      	movs	r4, #0
 8007d3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d40:	4628      	mov	r0, r5
 8007d42:	4798      	blx	r3
 8007d44:	2000      	movs	r0, #0
 8007d46:	e7e0      	b.n	8007d0a <_raise_r+0x12>

08007d48 <raise>:
 8007d48:	4b02      	ldr	r3, [pc, #8]	; (8007d54 <raise+0xc>)
 8007d4a:	4601      	mov	r1, r0
 8007d4c:	6818      	ldr	r0, [r3, #0]
 8007d4e:	f7ff bfd3 	b.w	8007cf8 <_raise_r>
 8007d52:	bf00      	nop
 8007d54:	20000010 	.word	0x20000010

08007d58 <_kill_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d07      	ldr	r5, [pc, #28]	; (8007d78 <_kill_r+0x20>)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	4611      	mov	r1, r2
 8007d64:	602b      	str	r3, [r5, #0]
 8007d66:	f7fb f811 	bl	8002d8c <_kill>
 8007d6a:	1c43      	adds	r3, r0, #1
 8007d6c:	d102      	bne.n	8007d74 <_kill_r+0x1c>
 8007d6e:	682b      	ldr	r3, [r5, #0]
 8007d70:	b103      	cbz	r3, 8007d74 <_kill_r+0x1c>
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	bd38      	pop	{r3, r4, r5, pc}
 8007d76:	bf00      	nop
 8007d78:	20000440 	.word	0x20000440

08007d7c <_getpid_r>:
 8007d7c:	f7fa bffe 	b.w	8002d7c <_getpid>

08007d80 <__malloc_lock>:
 8007d80:	4801      	ldr	r0, [pc, #4]	; (8007d88 <__malloc_lock+0x8>)
 8007d82:	f000 b809 	b.w	8007d98 <__retarget_lock_acquire_recursive>
 8007d86:	bf00      	nop
 8007d88:	20000444 	.word	0x20000444

08007d8c <__malloc_unlock>:
 8007d8c:	4801      	ldr	r0, [pc, #4]	; (8007d94 <__malloc_unlock+0x8>)
 8007d8e:	f000 b804 	b.w	8007d9a <__retarget_lock_release_recursive>
 8007d92:	bf00      	nop
 8007d94:	20000444 	.word	0x20000444

08007d98 <__retarget_lock_acquire_recursive>:
 8007d98:	4770      	bx	lr

08007d9a <__retarget_lock_release_recursive>:
 8007d9a:	4770      	bx	lr

08007d9c <_init>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	bf00      	nop
 8007da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da2:	bc08      	pop	{r3}
 8007da4:	469e      	mov	lr, r3
 8007da6:	4770      	bx	lr

08007da8 <_fini>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	bf00      	nop
 8007dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dae:	bc08      	pop	{r3}
 8007db0:	469e      	mov	lr, r3
 8007db2:	4770      	bx	lr
